{"version":3,"file":"three-pathfinding.umd.js","sources":["../src/Utils.js","../src/BinaryHeap.js","../src/AStar.js","../src/Builder.js","../src/Channel.js","../src/index.js"],"sourcesContent":["class Utils {\n\n  static computeCentroids (geometry) {\n    var f, fl, face;\n\n    for ( f = 0, fl = geometry.faces.length; f < fl; f ++ ) {\n\n      face = geometry.faces[ f ];\n      face.centroid = new THREE.Vector3( 0, 0, 0 );\n\n      face.centroid.add( geometry.vertices[ face.a ] );\n      face.centroid.add( geometry.vertices[ face.b ] );\n      face.centroid.add( geometry.vertices[ face.c ] );\n      face.centroid.divideScalar( 3 );\n\n    }\n  }\n\n  static roundNumber (value, decimals) {\n    return Number(value.toFixed(decimals));\n  }\n\n  static sample (list) {\n    return list[Math.floor(Math.random() * list.length)];\n  }\n\n  static mergeVertexIds (aList, bList) {\n\n    var sharedVertices = [];\n\n    aList.forEach((vID) => {\n      if (bList.indexOf(vID) >= 0) {\n        sharedVertices.push(vID);\n      }\n    });\n\n    if (sharedVertices.length < 2) return [];\n\n    if (sharedVertices.includes(aList[0]) && sharedVertices.includes(aList[aList.length - 1])) {\n      // Vertices on both edges are bad, so shift them once to the left\n      aList.push(aList.shift());\n    }\n\n    if (sharedVertices.includes(bList[0]) && sharedVertices.includes(bList[bList.length - 1])) {\n      // Vertices on both edges are bad, so shift them once to the left\n      bList.push(bList.shift());\n    }\n\n    // Again!\n    sharedVertices = [];\n\n    aList.forEach((vId) => {\n      if (bList.includes(vId)) {\n        sharedVertices.push(vId);\n      }\n    });\n\n    var clockwiseMostSharedVertex = sharedVertices[1];\n    var counterClockwiseMostSharedVertex = sharedVertices[0];\n\n\n    var cList = aList.slice();\n    while (cList[0] !== clockwiseMostSharedVertex) {\n      cList.push(cList.shift());\n    }\n\n    var c = 0;\n\n    var temp = bList.slice();\n    while (temp[0] !== counterClockwiseMostSharedVertex) {\n      temp.push(temp.shift());\n\n      if (c++ > 10) throw new Error('Unexpected state');\n    }\n\n    // Shave\n    temp.shift();\n    temp.pop();\n\n    cList = cList.concat(temp);\n\n    return cList;\n  }\n\n  static setPolygonCentroid (polygon, navigationMesh) {\n    var sum = new THREE.Vector3();\n\n    var vertices = navigationMesh.vertices;\n\n    polygon.vertexIds.forEach((vId) => {\n      sum.add(vertices[vId]);\n    });\n\n    sum.divideScalar(polygon.vertexIds.length);\n\n    polygon.centroid.copy(sum);\n  }\n\n  static cleanPolygon (polygon, navigationMesh) {\n\n    var newVertexIds = [];\n\n    var vertices = navigationMesh.vertices;\n\n    for (var i = 0; i < polygon.vertexIds.length; i++) {\n\n      var vertex = vertices[polygon.vertexIds[i]];\n\n      var nextVertexId, previousVertexId;\n      var nextVertex, previousVertex;\n\n      if (i === 0) {\n        nextVertexId = polygon.vertexIds[1];\n        previousVertexId = polygon.vertexIds[polygon.vertexIds.length - 1];\n      } else if (i === polygon.vertexIds.length - 1) {\n        nextVertexId = polygon.vertexIds[0];\n        previousVertexId = polygon.vertexIds[polygon.vertexIds.length - 2];\n      } else {\n        nextVertexId = polygon.vertexIds[i + 1];\n        previousVertexId = polygon.vertexIds[i - 1];\n      }\n\n      nextVertex = vertices[nextVertexId];\n      previousVertex = vertices[previousVertexId];\n\n      var a = nextVertex.clone().sub(vertex);\n      var b = previousVertex.clone().sub(vertex);\n\n      var angle = a.angleTo(b);\n\n      if (angle > Math.PI - 0.01 && angle < Math.PI + 0.01) {\n\n        // Remove the neighbours who had this vertex\n        var goodNeighbours = [];\n        polygon.neighbours.forEach((neighbour) => {\n          if (!neighbour.vertexIds.includes(polygon.vertexIds[i])) {\n            goodNeighbours.push(neighbour);\n          }\n        });\n        polygon.neighbours = goodNeighbours;\n\n\n        // TODO cleanup the list of vertices and rebuild vertexIds for all polygons\n      } else {\n        newVertexIds.push(polygon.vertexIds[i]);\n      }\n\n    }\n\n    polygon.vertexIds = newVertexIds;\n\n    this.setPolygonCentroid(polygon, navigationMesh);\n\n  }\n\n  static isConvex (polygon, navigationMesh) {\n\n    var vertices = navigationMesh.vertices;\n\n    if (polygon.vertexIds.length < 3) return false;\n\n    var convex = true;\n\n    var total = 0;\n\n    var results = [];\n\n    for (var i = 0; i < polygon.vertexIds.length; i++) {\n\n      var vertex = vertices[polygon.vertexIds[i]];\n\n      var nextVertex, previousVertex;\n\n      if (i === 0) {\n        nextVertex = vertices[polygon.vertexIds[1]];\n        previousVertex = vertices[polygon.vertexIds[polygon.vertexIds.length - 1]];\n      } else if (i === polygon.vertexIds.length - 1) {\n        nextVertex = vertices[polygon.vertexIds[0]];\n        previousVertex = vertices[polygon.vertexIds[polygon.vertexIds.length - 2]];\n      } else {\n        nextVertex = vertices[polygon.vertexIds[i + 1]];\n        previousVertex = vertices[polygon.vertexIds[i - 1]];\n      }\n\n      var a = nextVertex.clone().sub(vertex);\n      var b = previousVertex.clone().sub(vertex);\n\n      var angle = a.angleTo(b);\n      total += angle;\n\n      if (angle === Math.PI || angle === 0) return false;\n\n      var r = a.cross(b).y;\n      results.push(r);\n    }\n\n    // if ( total > (polygon.vertexIds.length-2)*Math.PI ) return false;\n\n    results.forEach((r) => {\n      if (r === 0) convex = false;\n    });\n\n    if (results[0] > 0) {\n      results.forEach((r) => {\n        if (r < 0) convex = false;\n      });\n    } else {\n      results.forEach((r) => {\n        if (r > 0) convex = false;\n      });\n    }\n\n    return convex;\n  }\n\n  static distanceToSquared (a, b) {\n\n    var dx = a.x - b.x;\n    var dy = a.y - b.y;\n    var dz = a.z - b.z;\n\n    return dx * dx + dy * dy + dz * dz;\n\n  }\n\n  //+ Jonas Raoni Soares Silva\n  //@ http://jsfromhell.com/math/is-point-in-poly [rev. #0]\n  static isPointInPoly (poly, pt) {\n    for (var c = false, i = -1, l = poly.length, j = l - 1; ++i < l; j = i)\n      ((poly[i].z <= pt.z && pt.z < poly[j].z) || (poly[j].z <= pt.z && pt.z < poly[i].z)) && (pt.x < (poly[j].x - poly[i].x) * (pt.z - poly[i].z) / (poly[j].z - poly[i].z) + poly[i].x) && (c = !c);\n    return c;\n  }\n\n  static isVectorInPolygon (vector, polygon, vertices) {\n\n    // reference point will be the centroid of the polygon\n    // We need to rotate the vector as well as all the points which the polygon uses\n\n    var lowestPoint = 100000;\n    var highestPoint = -100000;\n\n    var polygonVertices = [];\n\n    polygon.vertexIds.forEach((vId) => {\n      lowestPoint = Math.min(vertices[vId].y, lowestPoint);\n      highestPoint = Math.max(vertices[vId].y, highestPoint);\n      polygonVertices.push(vertices[vId]);\n    });\n\n    if (vector.y < highestPoint + 0.5 && vector.y > lowestPoint - 0.5 &&\n      this.isPointInPoly(polygonVertices, vector)) {\n      return true;\n    }\n    return false;\n  }\n\n  static triarea2 (a, b, c) {\n    var ax = b.x - a.x;\n    var az = b.z - a.z;\n    var bx = c.x - a.x;\n    var bz = c.z - a.z;\n    return bx * az - ax * bz;\n  }\n\n  static vequal (a, b) {\n    return this.distanceToSquared(a, b) < 0.00001;\n  }\n}\n\nexport { Utils };\n","// javascript-astar\n// http://github.com/bgrins/javascript-astar\n// Freely distributable under the MIT License.\n// Implements the astar search algorithm in javascript using a binary heap.\n\nclass BinaryHeap {\n  constructor (scoreFunction) {\n    this.content = [];\n    this.scoreFunction = scoreFunction;\n  }\n\n  push (element) {\n    // Add the new element to the end of the array.\n    this.content.push(element);\n\n    // Allow it to sink down.\n    this.sinkDown(this.content.length - 1);\n  }\n\n  pop () {\n    // Store the first element so we can return it later.\n    const result = this.content[0];\n    // Get the element at the end of the array.\n    const end = this.content.pop();\n    // If there are any elements left, put the end element at the\n    // start, and let it bubble up.\n    if (this.content.length > 0) {\n      this.content[0] = end;\n      this.bubbleUp(0);\n    }\n    return result;\n  }\n\n  remove (node) {\n    const i = this.content.indexOf(node);\n\n    // When it is found, the process seen in 'pop' is repeated\n    // to fill up the hole.\n    const end = this.content.pop();\n\n    if (i !== this.content.length - 1) {\n      this.content[i] = end;\n\n      if (this.scoreFunction(end) < this.scoreFunction(node)) {\n        this.sinkDown(i);\n      } else {\n        this.bubbleUp(i);\n      }\n    }\n  }\n\n  size () {\n    return this.content.length;\n  }\n\n  rescoreElement (node) {\n    this.sinkDown(this.content.indexOf(node));\n  }\n\n  sinkDown (n) {\n    // Fetch the element that has to be sunk.\n    const element = this.content[n];\n\n    // When at 0, an element can not sink any further.\n    while (n > 0) {\n      // Compute the parent element's index, and fetch it.\n      const parentN = ((n + 1) >> 1) - 1;\n      const parent = this.content[parentN];\n\n      if (this.scoreFunction(element) < this.scoreFunction(parent)) {\n        // Swap the elements if the parent is greater.\n        this.content[parentN] = element;\n        this.content[n] = parent;\n        // Update 'n' to continue at the new position.\n        n = parentN;\n      } else {\n        // Found a parent that is less, no need to sink any further.\n        break;\n      }\n    }\n  }\n\n  bubbleUp (n) {\n    // Look up the target element and its score.\n    const length = this.content.length,\n      element = this.content[n],\n      elemScore = this.scoreFunction(element);\n\n    while (true) {\n      // Compute the indices of the child elements.\n      const child2N = (n + 1) << 1,\n        child1N = child2N - 1;\n      // This is used to store the new position of the element,\n      // if any.\n      let swap = null;\n      let child1Score;\n      // If the first child exists (is inside the array)...\n      if (child1N < length) {\n        // Look it up and compute its score.\n        const child1 = this.content[child1N];\n        child1Score = this.scoreFunction(child1);\n\n        // If the score is less than our element's, we need to swap.\n        if (child1Score < elemScore) {\n          swap = child1N;\n        }\n      }\n\n      // Do the same checks for the other child.\n      if (child2N < length) {\n        const child2 = this.content[child2N],\n          child2Score = this.scoreFunction(child2);\n        if (child2Score < (swap === null ? elemScore : child1Score)) {\n          swap = child2N;\n        }\n      }\n\n      // If the element needs to be moved, swap it, and continue.\n      if (swap !== null) {\n        this.content[n] = this.content[swap];\n        this.content[swap] = element;\n        n = swap;\n      }\n\n      // Otherwise, we are done.\n      else {\n        break;\n      }\n    }\n  }\n\n}\n\nexport { BinaryHeap };\n","import { BinaryHeap } from './BinaryHeap';\nimport { Utils } from './Utils.js';\n\nclass AStar {\n  static init (graph) {\n    for (let x = 0; x < graph.length; x++) {\n      //for(var x in graph) {\n      const node = graph[x];\n      node.f = 0;\n      node.g = 0;\n      node.h = 0;\n      node.cost = 1.0;\n      node.visited = false;\n      node.closed = false;\n      node.parent = null;\n    }\n  }\n\n  static cleanUp (graph) {\n    for (let x = 0; x < graph.length; x++) {\n      const node = graph[x];\n      delete node.f;\n      delete node.g;\n      delete node.h;\n      delete node.cost;\n      delete node.visited;\n      delete node.closed;\n      delete node.parent;\n    }\n  }\n\n  static heap () {\n    return new BinaryHeap(function (node) {\n      return node.f;\n    });\n  }\n\n  static search (graph, start, end) {\n    this.init(graph);\n    //heuristic = heuristic || astar.manhattan;\n\n\n    const openHeap = this.heap();\n\n    openHeap.push(start);\n\n    while (openHeap.size() > 0) {\n\n      // Grab the lowest f(x) to process next.  Heap keeps this sorted for us.\n      const currentNode = openHeap.pop();\n\n      // End case -- result has been found, return the traced path.\n      if (currentNode === end) {\n        let curr = currentNode;\n        const ret = [];\n        while (curr.parent) {\n          ret.push(curr);\n          curr = curr.parent;\n        }\n        this.cleanUp(ret);\n        return ret.reverse();\n      }\n\n      // Normal case -- move currentNode from open to closed, process each of its neighbours.\n      currentNode.closed = true;\n\n      // Find all neighbours for the current node. Optionally find diagonal neighbours as well (false by default).\n      const neighbours = this.neighbours(graph, currentNode);\n\n      for (let i = 0, il = neighbours.length; i < il; i++) {\n        const neighbour = neighbours[i];\n\n        if (neighbour.closed) {\n          // Not a valid node to process, skip to next neighbour.\n          continue;\n        }\n\n        // The g score is the shortest distance from start to current node.\n        // We need to check if the path we have arrived at this neighbour is the shortest one we have seen yet.\n        const gScore = currentNode.g + neighbour.cost;\n        const beenVisited = neighbour.visited;\n\n        if (!beenVisited || gScore < neighbour.g) {\n\n          // Found an optimal (so far) path to this node.  Take score for node to see how good it is.\n          neighbour.visited = true;\n          neighbour.parent = currentNode;\n          if (!neighbour.centroid || !end.centroid) throw new Error('Unexpected state');\n          neighbour.h = neighbour.h || this.heuristic(neighbour.centroid, end.centroid);\n          neighbour.g = gScore;\n          neighbour.f = neighbour.g + neighbour.h;\n\n          if (!beenVisited) {\n            // Pushing to heap will put it in proper place based on the 'f' value.\n            openHeap.push(neighbour);\n          } else {\n            // Already seen the node, but since it has been rescored we need to reorder it in the heap\n            openHeap.rescoreElement(neighbour);\n          }\n        }\n      }\n    }\n\n    // No result was found - empty array signifies failure to find path.\n    return [];\n  }\n\n  static heuristic (pos1, pos2) {\n    return Utils.distanceToSquared(pos1, pos2);\n  }\n\n  static neighbours (graph, node) {\n    const ret = [];\n\n    for (let e = 0; e < node.neighbours.length; e++) {\n      ret.push(graph[node.neighbours[e]]);\n    }\n\n    return ret;\n  }\n}\n\nexport { AStar };\n","import { Utils } from './Utils';\n\nlet polygonId = 1;\n\nclass Builder {\n  /**\n   * Constructs groups from the given navigation mesh.\n   * @param  {THREE.Geometry} geometry\n   * @return {Zone}\n   */\n  static buildZone (geometry) {\n\n    const navMesh = this._buildNavigationMesh(geometry);\n\n    const zone = {};\n\n    navMesh.vertices.forEach((v) => {\n      v.x = Utils.roundNumber(v.x, 2);\n      v.y = Utils.roundNumber(v.y, 2);\n      v.z = Utils.roundNumber(v.z, 2);\n    });\n\n    zone.vertices = navMesh.vertices;\n\n    const groups = this._buildPolygonGroups(navMesh);\n\n    zone.groups = [];\n\n    const findPolygonIndex = function (group, p) {\n      for (let i = 0; i < group.length; i++) {\n        if (p === group[i]) return i;\n      }\n    };\n\n    // TODO: This block represents 50-60% of navigation mesh construction time,\n    // and could probably be optimized. For example, construct portals while\n    // determining the neighbor graph.\n    groups.forEach((group) => {\n\n      const newGroup = [];\n\n      group.forEach((p) => {\n\n        // TODO: Optimize.\n        const neighbours = p.neighbours.map((n) => findPolygonIndex(group, n));\n\n        // Build a portal list to each neighbour\n        const portals = p.neighbours.map((n) => this._getSharedVerticesInOrder(p, n));\n\n        p.centroid.x = Utils.roundNumber(p.centroid.x, 2);\n        p.centroid.y = Utils.roundNumber(p.centroid.y, 2);\n        p.centroid.z = Utils.roundNumber(p.centroid.z, 2);\n\n        newGroup.push({\n          id: findPolygonIndex(group, p),\n          neighbours: neighbours,\n          vertexIds: p.vertexIds,\n          centroid: p.centroid,\n          portals: portals\n        });\n\n      });\n\n      zone.groups.push(newGroup);\n    });\n\n    return zone;\n  }\n\n  /**\n   * Constructs a navigation mesh from the given geometry.\n   * @param {THREE.Geometry} geometry\n   * @return {Object}\n   */\n  static _buildNavigationMesh (geometry) {\n    Utils.computeCentroids(geometry);\n    geometry.mergeVertices();\n    return this._buildPolygonsFromGeometry(geometry);\n  }\n\n  static _buildPolygonGroups (navigationMesh) {\n\n    const polygons = navigationMesh.polygons;\n\n    const polygonGroups = [];\n    let groupCount = 0;\n\n    const spreadGroupId = function (polygon) {\n      polygon.neighbours.forEach((neighbour) => {\n        if (neighbour.group === undefined) {\n          neighbour.group = polygon.group;\n          spreadGroupId(neighbour);\n        }\n      });\n    };\n\n    polygons.forEach((polygon) => {\n\n      if (polygon.group === undefined) {\n        polygon.group = groupCount++;\n        // Spread it\n        spreadGroupId(polygon);\n      }\n\n      if (!polygonGroups[polygon.group]) polygonGroups[polygon.group] = [];\n\n      polygonGroups[polygon.group].push(polygon);\n    });\n\n    return polygonGroups;\n  }\n\n  static _buildPolygonNeighbours (polygon, navigationMesh, vertexPolygonMap) {\n    const neighbors = new Set();\n\n    const groupA = vertexPolygonMap.get(polygon.vertexIds[0]);\n    const groupB = vertexPolygonMap.get(polygon.vertexIds[1]);\n    const groupC = vertexPolygonMap.get(polygon.vertexIds[2]);\n\n    // It's only necessary to iterate groups A and B. Polygons contained only\n    // in group C cannot share a >1 vertex with this polygon.\n    // IMPORTANT: Bublé cannot compile for-of loops.\n    groupA.forEach((candidate) => {\n      if (groupB.has(candidate) || groupC.has(candidate)) {\n        neighbors.add(navigationMesh.polygons[candidate]);\n      }\n    });\n    groupB.forEach((candidate) => {\n      if (groupC.has(candidate)) {\n        neighbors.add(navigationMesh.polygons[candidate]);\n      }\n    });\n\n    polygon.neighbours = Array.from(neighbors);\n  }\n\n  static _buildPolygonsFromGeometry (geometry) {\n\n    const polygons = [];\n    const vertices = geometry.vertices;\n    const faceVertexUvs = geometry.faceVertexUvs;\n\n    // Constructing the neighbor graph brute force is O(n²). To avoid that,\n    // create a map from vertices to the polygons that contain them, and use it\n    // while connecting polygons. This reduces complexity to O(n*m), where 'm'\n    // is related to connectivity of the mesh.\n    const vertexPolygonMap = new Map(); // Map<vertexID, Set<polygonIndex>>\n    for (let i = 0; i < vertices.length; i++) {\n      vertexPolygonMap.set(i, new Set());\n    }\n\n    // Convert the faces into a custom format that supports more than 3 vertices\n    geometry.faces.forEach((face) => {\n      polygons.push({\n        id: polygonId++,\n        vertexIds: [face.a, face.b, face.c],\n        centroid: face.centroid,\n        normal: face.normal,\n        neighbours: []\n      });\n      vertexPolygonMap.get(face.a).add(polygons.length - 1);\n      vertexPolygonMap.get(face.b).add(polygons.length - 1);\n      vertexPolygonMap.get(face.c).add(polygons.length - 1);\n    });\n\n    const navigationMesh = {\n      polygons: polygons,\n      vertices: vertices,\n      faceVertexUvs: faceVertexUvs\n    };\n\n    // Build a list of adjacent polygons\n    polygons.forEach((polygon) => {\n      this._buildPolygonNeighbours(polygon, navigationMesh, vertexPolygonMap);\n    });\n\n    return navigationMesh;\n  }\n\n  static _getSharedVerticesInOrder (a, b) {\n\n    const aList = a.vertexIds;\n    const bList = b.vertexIds;\n\n    const sharedVertices = new Set();\n\n    aList.forEach((vId) => {\n      if (bList.includes(vId)) {\n        sharedVertices.add(vId);\n      }\n    });\n\n    if (sharedVertices.size < 2) return [];\n\n    if (sharedVertices.has(aList[0]) && sharedVertices.has(aList[aList.length - 1])) {\n      // Vertices on both edges are bad, so shift them once to the left\n      aList.push(aList.shift());\n    }\n\n    if (sharedVertices.has(bList[0]) && sharedVertices.has(bList[bList.length - 1])) {\n      // Vertices on both edges are bad, so shift them once to the left\n      bList.push(bList.shift());\n    }\n\n    // Again!\n    const sharedVerticesOrdered = [];\n\n    aList.forEach((vId) => {\n      if (bList.includes(vId)) {\n        sharedVerticesOrdered.push(vId);\n      }\n    });\n\n    return sharedVerticesOrdered;\n  }\n}\n\nexport { Builder };\n","import { Utils } from './Utils';\n\nclass Channel {\n  constructor () {\n    this.portals = [];\n  }\n\n  push (p1, p2) {\n    if (p2 === undefined) p2 = p1;\n    this.portals.push({\n      left: p1,\n      right: p2\n    });\n  }\n\n  stringPull () {\n    const portals = this.portals;\n    const pts = [];\n    // Init scan state\n    let portalApex, portalLeft, portalRight;\n    let apexIndex = 0,\n      leftIndex = 0,\n      rightIndex = 0;\n\n    portalApex = portals[0].left;\n    portalLeft = portals[0].left;\n    portalRight = portals[0].right;\n\n    // Add start point.\n    pts.push(portalApex);\n\n    for (let i = 1; i < portals.length; i++) {\n      const left = portals[i].left;\n      const right = portals[i].right;\n\n      // Update right vertex.\n      if (Utils.triarea2(portalApex, portalRight, right) <= 0.0) {\n        if (Utils.vequal(portalApex, portalRight) || Utils.triarea2(portalApex, portalLeft, right) > 0.0) {\n          // Tighten the funnel.\n          portalRight = right;\n          rightIndex = i;\n        } else {\n          // Right over left, insert left to path and restart scan from portal left point.\n          pts.push(portalLeft);\n          // Make current left the new apex.\n          portalApex = portalLeft;\n          apexIndex = leftIndex;\n          // Reset portal\n          portalLeft = portalApex;\n          portalRight = portalApex;\n          leftIndex = apexIndex;\n          rightIndex = apexIndex;\n          // Restart scan\n          i = apexIndex;\n          continue;\n        }\n      }\n\n      // Update left vertex.\n      if (Utils.triarea2(portalApex, portalLeft, left) >= 0.0) {\n        if (Utils.vequal(portalApex, portalLeft) || Utils.triarea2(portalApex, portalRight, left) < 0.0) {\n          // Tighten the funnel.\n          portalLeft = left;\n          leftIndex = i;\n        } else {\n          // Left over right, insert right to path and restart scan from portal right point.\n          pts.push(portalRight);\n          // Make current right the new apex.\n          portalApex = portalRight;\n          apexIndex = rightIndex;\n          // Reset portal\n          portalLeft = portalApex;\n          portalRight = portalApex;\n          leftIndex = apexIndex;\n          rightIndex = apexIndex;\n          // Restart scan\n          i = apexIndex;\n          continue;\n        }\n      }\n    }\n\n    if ((pts.length === 0) || (!Utils.vequal(pts[pts.length - 1], portals[portals.length - 1].left))) {\n      // Append last point to path.\n      pts.push(portals[portals.length - 1].left);\n    }\n\n    this.path = pts;\n    return pts;\n  }\n}\n\nexport { Channel };\n","/* global THREE */\n\nimport { Utils } from './Utils';\nimport { AStar } from './AStar';\nimport { Builder } from './Builder';\nimport { Channel } from './Channel';\n\n/**\n * Defines an instance of the pathfinding module, with one or more zones.\n */\nclass Pathfinding {\n\tconstructor () {\n\t\tthis.zones = {};\n\t}\n\n\t/**\n\t * (Static) Builds a zone/node set from navigation mesh geometry.\n\t * @param  {THREE.Geometry} geometry\n\t * @return {Zone}\n\t */\n\tstatic createZone (geometry) {\n\t\treturn Builder.buildZone(geometry);\n\t}\n\n\t/**\n\t * Sets data for the given zone.\n\t * @param {string} zoneID\n\t * @param {Zone} zone\n\t */\n\tsetZoneData (zoneID, zone) {\n\t\tthis.zones[zoneID] = zone;\n\t}\n\n\t/**\n\t * Returns closest node group ID for given position.\n\t * @param  {string} zoneID\n\t * @param  {THREE.Vector3} position\n\t * @return {number}\n\t */\n\tgetGroup (zoneID, position) {\n\t\tif (!this.zones[zoneID]) return null;\n\n\t\tlet closestNodeGroup = null;\n\t\tlet distance = Math.pow(50, 2);\n\n\t\tthis.zones[zoneID].groups.forEach((group, index) => {\n\t\t\tgroup.forEach((node) => {\n\t\t\t\tconst measuredDistance = Utils.distanceToSquared(node.centroid, position);\n\t\t\t\tif (measuredDistance < distance) {\n\t\t\t\t\tclosestNodeGroup = index;\n\t\t\t\t\tdistance = measuredDistance;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\treturn closestNodeGroup;\n\t}\n\n\t/**\n\t * Returns a random node within a given range of a given position.\n\t * @param  {string} zoneID\n\t * @param  {number} groupID\n\t * @param  {THREE.Vector3} nearPosition\n\t * @param  {number} nearRange\n\t * @return {Node}\n\t */\n\tgetRandomNode (zoneID, groupID, nearPosition, nearRange) {\n\n\t\tif (!this.zones[zoneID]) return new THREE.Vector3();\n\n\t\tnearPosition = nearPosition || null;\n\t\tnearRange = nearRange || 0;\n\n\t\tconst candidates = [];\n\t\tconst polygons = this.zones[zoneID].groups[groupID];\n\n\t\tpolygons.forEach((p) => {\n\t\t\tif (nearPosition && nearRange) {\n\t\t\t\tif (Utils.distanceToSquared(nearPosition, p.centroid) < nearRange * nearRange) {\n\t\t\t\t\tcandidates.push(p.centroid);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcandidates.push(p.centroid);\n\t\t\t}\n\t\t});\n\n\t\treturn Utils.sample(candidates) || new THREE.Vector3();\n\t}\n\n\t/**\n\t * Returns the closest node to the target position.\n\t * @param  {THREE.Vector3} position\n\t * @param  {string}  zoneID\n\t * @param  {number}  groupID\n\t * @param  {boolean} checkPolygon\n\t * @return {Node}\n\t */\n\tgetClosestNode (position, zoneID, groupID, checkPolygon = false) {\n\t\tconst nodes = this.zones[zoneID].groups[groupID];\n\t\tconst vertices = this.zones[zoneID].vertices;\n\t\tlet closestNode = null;\n\t\tlet closestDistance = Infinity;\n\n\t\tnodes.forEach((node) => {\n\t\t\tconst distance = Utils.distanceToSquared(node.centroid, position);\n\t\t\tif (distance < closestDistance\n\t\t\t\t\t&& (!checkPolygon || Utils.isVectorInPolygon(position, node, vertices))) {\n\t\t\t\tclosestNode = node;\n\t\t\t\tclosestDistance = distance;\n\t\t\t}\n\t\t});\n\n\t\treturn closestNode;\n\t}\n\n\t/**\n\t * Returns a path between given start and end points. If a complete path\n\t * cannot be found, will return the nearest endpoint available.\n\t *\n\t * @param  {THREE.Vector3} startPosition Start position.\n\t * @param  {THREE.Vector3} targetPosition Destination.\n\t * @param  {string} zoneID ID of current zone.\n\t * @param  {number} groupID Current group ID.\n\t * @return {Array<THREE.Vector3>} Array of points defining the path.\n\t */\n\tfindPath (startPosition, targetPosition, zoneID, groupID) {\n\t\tconst nodes = this.zones[zoneID].groups[groupID];\n\t\tconst vertices = this.zones[zoneID].vertices;\n\n\t\tconst closestNode = this.getClosestNode(startPosition, zoneID, groupID);\n\t\tconst farthestNode = this.getClosestNode(targetPosition, zoneID, groupID, true);\n\n\t\t// If we can't find any node, just go straight to the target\n\t\tif (!closestNode || !farthestNode) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst paths = AStar.search(nodes, closestNode, farthestNode);\n\n\t\tconst getPortalFromTo = function (a, b) {\n\t\t\tfor (var i = 0; i < a.neighbours.length; i++) {\n\t\t\t\tif (a.neighbours[i] === b.id) {\n\t\t\t\t\treturn a.portals[i];\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// We have the corridor, now pull the rope.\n\t\tconst channel = new Channel();\n\t\tchannel.push(startPosition);\n\t\tfor (let i = 0; i < paths.length; i++) {\n\t\t\tconst polygon = paths[i];\n\t\t\tconst nextPolygon = paths[i + 1];\n\n\t\t\tif (nextPolygon) {\n\t\t\t\tconst portals = getPortalFromTo(polygon, nextPolygon);\n\t\t\t\tchannel.push(\n\t\t\t\t\tvertices[portals[0]],\n\t\t\t\t\tvertices[portals[1]]\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tchannel.push(targetPosition);\n\t\tchannel.stringPull();\n\n\t\t// Return the path, omitting first position (which is already known).\n\t\tconst path = channel.path.map((c) => new THREE.Vector3(c.x, c.y, c.z));\n\t\tpath.shift();\n\t\treturn path;\n\t}\n}\n\n/**\n * Clamps a step along the navmesh, given start and desired endpoint. May be\n * used to constrain first-person / WASD controls.\n *\n * @param  {THREE.Vector3} start\n * @param  {THREE.Vector3} end Desired endpoint.\n * @param  {Node} node\n * @param  {string} zoneID\n * @param  {number} groupID\n * @param  {THREE.Vector3} endTarget Updated endpoint.\n * @return {Node} Updated node.\n */\nPathfinding.prototype.clampStep = (function () {\n\tconst point = new THREE.Vector3();\n\tconst plane = new THREE.Plane();\n\tconst triangle = new THREE.Triangle();\n\n\tlet closestNode;\n\tlet closestPoint = new THREE.Vector3();\n\tlet closestDistance;\n\n\treturn function (start, end, node, zoneID, groupID, endTarget) {\n\t\tconst vertices = this.zones[zoneID].vertices;\n\t\tconst nodes = this.zones[zoneID].groups[groupID];\n\n\t\tconst nodeQueue = [node];\n\t\tconst nodeDepth = {};\n\t\tnodeDepth[node.id] = 0;\n\n\t\tclosestNode = undefined;\n\t\tclosestPoint.set(0, 0, 0);\n\t\tclosestDistance = Infinity;\n\n\t\t// Project the step along the current node.\n\t\tplane.setFromCoplanarPoints(\n\t\t\tvertices[node.vertexIds[0]],\n\t\t\tvertices[node.vertexIds[1]],\n\t\t\tvertices[node.vertexIds[2]]\n\t\t);\n\t\tplane.projectPoint(end, point);\n\t\tend.copy(point);\n\n\t\tfor (let currentNode = nodeQueue.pop(); currentNode; currentNode = nodeQueue.pop()) {\n\n\t\t\ttriangle.set(\n\t\t\t\tvertices[currentNode.vertexIds[0]],\n\t\t\t\tvertices[currentNode.vertexIds[1]],\n\t\t\t\tvertices[currentNode.vertexIds[2]]\n\t\t\t);\n\n\t\t\ttriangle.closestPointToPoint(end, point);\n\n\t\t\tif (point.distanceToSquared(end) < closestDistance) {\n\t\t\t\tclosestNode = currentNode;\n\t\t\t\tclosestPoint.copy(point);\n\t\t\t\tclosestDistance = point.distanceToSquared(end);\n\t\t\t}\n\n\t\t\tconst depth = nodeDepth[currentNode];\n\t\t\tif (depth > 2) continue;\n\n\t\t\tfor (let i = 0; i < currentNode.neighbours.length; i++) {\n\t\t\t\tconst neighbour = nodes[currentNode.neighbours[i]];\n\t\t\t\tif (neighbour.id in nodeDepth) continue;\n\n\t\t\t\tnodeQueue.push(neighbour);\n\t\t\t\tnodeDepth[neighbour.id] = depth + 1;\n\t\t\t}\n\t\t}\n\n\t\tendTarget.copy(closestPoint);\n\t\treturn closestNode;\n\t};\n}());\n\n/**\n * Defines a zone of interconnected groups on a navigation mesh.\n *\n * @type {Object}\n * @property {Array<Group>} groups\n * @property {Array<THREE.Vector3} vertices\n */\nconst Zone = {}; // jshint ignore:line\n\n/**\n * Defines a group within a navigation mesh.\n *\n * @type {Object}\n */\nconst Group = {}; // jshint ignore:line\n\n/**\n * Defines a node (or polygon) within a group.\n *\n * @type {Object}\n * @property {number} id\n * @property {Array<number>} neighbours IDs of neighboring nodes.\n * @property {Array<number} vertexIds\n * @property {THREE.Vector3} centroid\n * @property {Array<Array<number>>} portals Array of portals, each defined by two vertex IDs.\n * @property {boolean} closed\n * @property {number} cost\n */\nconst Node = {}; // jshint ignore:line\n\nexport { Pathfinding };\n"],"names":["Utils","computeCentroids","geometry","f","fl","face","faces","length","centroid","THREE","Vector3","add","vertices","a","b","c","divideScalar","roundNumber","value","decimals","Number","toFixed","sample","list","Math","floor","random","mergeVertexIds","aList","bList","sharedVertices","forEach","vID","indexOf","push","includes","shift","vId","clockwiseMostSharedVertex","counterClockwiseMostSharedVertex","cList","slice","temp","Error","pop","concat","setPolygonCentroid","polygon","navigationMesh","sum","vertexIds","copy","cleanPolygon","newVertexIds","i","nextVertexId","previousVertexId","previousVertex","vertex","clone","sub","angle","angleTo","PI","goodNeighbours","neighbours","neighbour","isConvex","convex","results","nextVertex","r","cross","y","distanceToSquared","dx","x","dy","dz","z","isPointInPoly","poly","pt","l","j","isVectorInPolygon","vector","lowestPoint","highestPoint","polygonVertices","min","max","this","triarea2","vequal","BinaryHeap","scoreFunction","content","element","sinkDown","result","end","bubbleUp","remove","node","const","size","rescoreElement","n","parentN","parent","elemScore","child2N","child1N","swap","child1Score","AStar","init","graph","let","g","h","cost","visited","closed","cleanUp","heap","search","start","openHeap","currentNode","curr","ret","reverse","il","gScore","beenVisited","heuristic","pos1","pos2","e","polygonId","Builder","buildZone","navMesh","_buildNavigationMesh","zone","v","groups","_buildPolygonGroups","findPolygonIndex","group","p","newGroup","map","portals","_getSharedVerticesInOrder","id","mergeVertices","_buildPolygonsFromGeometry","polygonGroups","groupCount","spreadGroupId","undefined","polygons","_buildPolygonNeighbours","vertexPolygonMap","neighbors","Set","groupA","get","groupB","groupC","candidate","has","Array","from","faceVertexUvs","Map","set","normal","sharedVerticesOrdered","Channel","p1","p2","stringPull","portalApex","portalLeft","portalRight","pts","apexIndex","leftIndex","rightIndex","left","right","path","closestNode","closestDistance","point","plane","triangle","closestPoint","Pathfinding","zones","createZone","setZoneData","zoneID","getGroup","position","closestNodeGroup","distance","pow","index","measuredDistance","getRandomNode","groupID","nearPosition","nearRange","candidates","getClosestNode","checkPolygon","Infinity","findPath","startPosition","targetPosition","nodes","farthestNode","paths","getPortalFromTo","channel","nextPolygon","prototype","clampStep","Plane","Triangle","endTarget","nodeQueue","nodeDepth","setFromCoplanarPoints","projectPoint","closestPointToPoint","depth"],"mappings":"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"}