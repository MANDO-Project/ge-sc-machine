'use strict';

var React = require('react');
var jerrypick = require('jerrypick');
var fromEntries = require('fromentries');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var fromEntries__default = /*#__PURE__*/_interopDefaultLegacy(fromEntries);

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

function _iterableToArrayLimit(arr, i) {
  var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]);

  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;

  var _s, _e;

  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function index (kapsuleComponent, comboParam) {
  var _ref = _typeof(comboParam) === 'object' ? comboParam : {
    // support old schema for backwards compatibility
    wrapperElementType: comboParam,
    methodNames: (arguments.length <= 2 ? undefined : arguments[2]) || undefined,
    initPropNames: (arguments.length <= 3 ? undefined : arguments[3]) || undefined
  },
      _ref$wrapperElementTy = _ref.wrapperElementType,
      wrapperElementType = _ref$wrapperElementTy === void 0 ? 'div' : _ref$wrapperElementTy,
      _ref$nodeMapper = _ref.nodeMapper,
      nodeMapper = _ref$nodeMapper === void 0 ? function (node) {
    return node;
  } : _ref$nodeMapper,
      _ref$methodNames = _ref.methodNames,
      methodNames = _ref$methodNames === void 0 ? [] : _ref$methodNames,
      _ref$initPropNames = _ref.initPropNames,
      initPropNames = _ref$initPropNames === void 0 ? [] : _ref$initPropNames;

  return /*#__PURE__*/React.forwardRef(function (props, ref) {
    var domEl = React.useRef();

    var _useState = React.useState({}),
        _useState2 = _slicedToArray(_useState, 2),
        prevProps = _useState2[0],
        setPrevProps = _useState2[1];

    React.useEffect(function () {
      return setPrevProps(props);
    }); // remember previous props
    // instantiate the inner kapsule component with the defined initPropNames

    var comp = React.useMemo(function () {
      var configOptions = fromEntries__default['default'](initPropNames.filter(function (p) {
        return props.hasOwnProperty(p);
      }).map(function (prop) {
        return [prop, props[prop]];
      }));
      return kapsuleComponent(configOptions);
    }, []);
    React.useLayoutEffect(function () {
      comp(nodeMapper(domEl.current)); // mount kapsule synchronously on this element ref, optionally mapped into an object that the kapsule understands
    }, []);
    React.useEffect(function () {
      // invoke destructor on unmount, if it exists
      return comp._destructor instanceof Function ? comp._destructor : undefined;
    }, []); // Call a component method

    var _call = React.useCallback(function (method) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      return comp[method] instanceof Function ? comp[method].apply(comp, args) : undefined;
    } // method not found
    , [comp]); // propagate component props that have changed


    var dynamicProps = jerrypick.omit(props, [].concat(_toConsumableArray(methodNames), _toConsumableArray(initPropNames))); // initPropNames or methodNames should not be called

    Object.keys(dynamicProps).filter(function (p) {
      return prevProps[p] !== props[p];
    }).forEach(function (p) {
      return _call(p, props[p]);
    }); // bind external methods to parent ref

    React.useImperativeHandle(ref, function () {
      return fromEntries__default['default'](methodNames.map(function (method) {
        return [method, function () {
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }

          return _call.apply(void 0, [method].concat(args));
        }];
      }));
    });
    return /*#__PURE__*/React__default['default'].createElement(wrapperElementType, {
      ref: domEl
    });
  });
}

module.exports = index;
