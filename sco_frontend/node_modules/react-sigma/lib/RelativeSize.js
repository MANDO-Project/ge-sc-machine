"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

require("../sigma/plugins.relativeSize");

var _propTypes = _interopRequireDefault(require("prop-types"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**

RelativeSize component, interface for RelativeSize sigma plugin.
It supposes that sigma graph is already in place, therefore component should not be
mounted until graph is available. It can be used within Sigma component if graph is
preloaded, or within loader component, like NeoCypher.

Sets nodes sizes corresponding its degree.

 @param {number} initialSize  start size for every node, will be multiplied by Math.sqrt(node.degree)

**/
class RelativeSize extends _react.default.Component {
  constructor(props) {
    super(props);

    _defineProperty(this, "render", () => null);

    sigma.plugins.relativeSize(this.props.sigma, this.props.initialSize);
  }

}

_defineProperty(RelativeSize, "propTypes", {
  initialSize: _propTypes.default.number.isRequired,
  sigma: function () {
    return (typeof sigma === "function" ? _propTypes.default.instanceOf(sigma) : _propTypes.default.any).apply(this, arguments);
  }
});

var _default = RelativeSize;
exports.default = _default;