function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import '../sigma/sigma.plugins.dragNodes';

/**
 *
 * DragNodes component, exposing the dragNodes plugin.
 *
 * When this plugin is active, individual nodes can be dragged around on
 * the canvas. The plugin fires various events during dragging and dropping.
 *
 * This plugin is not compatible with the WebGL renderer.
 *
 * @param {Sigma$EventHandler} onStartdrag      provide callback for "startdrag" event, fired at the beginning of the drag.
 * @param {Sigma$EventHandler} onDrag      provide callback for "drag" event, fired while the node is dragged.
 * @param {Sigma$EventHandler} onDrop      provide callback for "drop" event, fired at the end of the drag if the node has been dragged.
 * @param {Sigma$EventHandler} onDragend      provide callback for "dragend" event, fired at the end of the drag.
 *
**/
var DragNodes = /*#__PURE__*/function (_React$Component) {
  _inherits(DragNodes, _React$Component);

  var _super = _createSuper(DragNodes);

  function DragNodes(props) {
    var _this;

    _classCallCheck(this, DragNodes);

    _this = _super.call(this, props);

    _defineProperty(_assertThisInitialized(_this), "render", function () {
      return null;
    });

    if (_this.props.sigma) {
      var dragListener = sigma.plugins.dragNodes(_this.props.sigma, _this.props.sigma.renderers[0]);
      DragNodes.bindHandlers(props, dragListener);
    }

    return _this;
  }

  _createClass(DragNodes, null, [{
    key: "bindHandlers",
    value: function bindHandlers(handlers, dragListener) {
      // Adapted from Sigma component
      ["startdrag", "drag", "drop", "dragend"].forEach(function (event) {
        var handler = "on" + event[0].toUpperCase() + event.substr(1);

        if (handlers[handler]) {
          dragListener.bind(event, handlers[handler]);
        }
      });
    }
  }]);

  return DragNodes;
}(React.Component);

_defineProperty(DragNodes, "propTypes", {
  sigma: function (_sigma) {
    function sigma() {
      return _sigma.apply(this, arguments);
    }

    sigma.toString = function () {
      return _sigma.toString();
    };

    return sigma;
  }(function () {
    return (typeof sigma === "function" ? PropTypes.instanceOf(sigma) : PropTypes.any).apply(this, arguments);
  }),
  onStartdrag: PropTypes.func,
  onDrag: PropTypes.func,
  onDrop: PropTypes.func,
  onDragend: PropTypes.func
});

export default DragNodes;
import PropTypes from "prop-types";