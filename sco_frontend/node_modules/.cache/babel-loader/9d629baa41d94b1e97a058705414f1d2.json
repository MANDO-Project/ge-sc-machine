{"ast":null,"code":"//\n// format - printf-like string formatting for JavaScript\n// github.com/samsonjs/format\n// @_sjs\n//\n// Copyright 2010 - 2013 Sami Samhuri <sami@samhuri.net>\n//\n// MIT License\n// http://sjs.mit-license.org\n//\n;\n\n(function () {\n  //// Export the API\n  var namespace; // CommonJS / Node module\n\n  if (typeof module !== 'undefined') {\n    namespace = module.exports = format;\n  } // Browsers and other environments\n  else {\n    // Get the global object. Works in ES3, ES5, and ES5 strict mode.\n    namespace = function () {\n      return this || (1, eval)('this');\n    }();\n  }\n\n  namespace.format = format;\n  namespace.vsprintf = vsprintf;\n\n  if (typeof console !== 'undefined' && typeof console.log === 'function') {\n    namespace.printf = printf;\n  }\n\n  function\n    /* ... */\n  printf() {\n    console.log(format.apply(null, arguments));\n  }\n\n  function vsprintf(fmt, replacements) {\n    return format.apply(null, [fmt].concat(replacements));\n  }\n\n  function format(fmt) {\n    var argIndex = 1 // skip initial format argument\n    ,\n        args = [].slice.call(arguments),\n        i = 0,\n        n = fmt.length,\n        result = '',\n        c,\n        escaped = false,\n        arg,\n        tmp,\n        leadingZero = false,\n        precision,\n        nextArg = function nextArg() {\n      return args[argIndex++];\n    },\n        slurpNumber = function slurpNumber() {\n      var digits = '';\n\n      while (/\\d/.test(fmt[i])) {\n        digits += fmt[i++];\n        c = fmt[i];\n      }\n\n      return digits.length > 0 ? parseInt(digits) : null;\n    };\n\n    for (; i < n; ++i) {\n      c = fmt[i];\n\n      if (escaped) {\n        escaped = false;\n\n        if (c == '.') {\n          leadingZero = false;\n          c = fmt[++i];\n        } else if (c == '0' && fmt[i + 1] == '.') {\n          leadingZero = true;\n          i += 2;\n          c = fmt[i];\n        } else {\n          leadingZero = true;\n        }\n\n        precision = slurpNumber();\n\n        switch (c) {\n          case 'b':\n            // number in binary\n            result += parseInt(nextArg(), 10).toString(2);\n            break;\n\n          case 'c':\n            // character\n            arg = nextArg();\n            if (typeof arg === 'string' || arg instanceof String) result += arg;else result += String.fromCharCode(parseInt(arg, 10));\n            break;\n\n          case 'd':\n            // number in decimal\n            result += parseInt(nextArg(), 10);\n            break;\n\n          case 'f':\n            // floating point number\n            tmp = String(parseFloat(nextArg()).toFixed(precision || 6));\n            result += leadingZero ? tmp : tmp.replace(/^0/, '');\n            break;\n\n          case 'j':\n            // JSON\n            result += JSON.stringify(nextArg());\n            break;\n\n          case 'o':\n            // number in octal\n            result += '0' + parseInt(nextArg(), 10).toString(8);\n            break;\n\n          case 's':\n            // string\n            result += nextArg();\n            break;\n\n          case 'x':\n            // lowercase hexadecimal\n            result += '0x' + parseInt(nextArg(), 10).toString(16);\n            break;\n\n          case 'X':\n            // uppercase hexadecimal\n            result += '0x' + parseInt(nextArg(), 10).toString(16).toUpperCase();\n            break;\n\n          default:\n            result += c;\n            break;\n        }\n      } else if (c === '%') {\n        escaped = true;\n      } else {\n        result += c;\n      }\n    }\n\n    return result;\n  }\n})();","map":null,"metadata":{},"sourceType":"script"}