{"ast":null,"code":"var createPatternBuilder = require('./createPatternBuilder');\n\nmodule.exports = generateCreateSpringForceFunction;\nmodule.exports.generateCreateSpringForceFunctionBody = generateCreateSpringForceFunctionBody;\n\nfunction generateCreateSpringForceFunction(dimension) {\n  var code = generateCreateSpringForceFunctionBody(dimension);\n  return new Function('options', 'random', code);\n}\n\nfunction generateCreateSpringForceFunctionBody(dimension) {\n  var pattern = createPatternBuilder(dimension);\n  var code = \"\\n  if (!Number.isFinite(options.springCoefficient)) throw new Error('Spring coefficient is not a number');\\n  if (!Number.isFinite(options.springLength)) throw new Error('Spring length is not a number');\\n\\n  return {\\n    /**\\n     * Updates forces acting on a spring\\n     */\\n    update: function (spring) {\\n      var body1 = spring.from;\\n      var body2 = spring.to;\\n      var length = spring.length < 0 ? options.springLength : spring.length;\\n      \".concat(pattern('var d{var} = body2.pos.{var} - body1.pos.{var};', {\n    indent: 6\n  }), \"\\n      var r = Math.sqrt(\").concat(pattern('d{var} * d{var}', {\n    join: ' + '\n  }), \");\\n\\n      if (r === 0) {\\n        \").concat(pattern('d{var} = (random.nextDouble() - 0.5) / 50;', {\n    indent: 8\n  }), \"\\n        r = Math.sqrt(\").concat(pattern('d{var} * d{var}', {\n    join: ' + '\n  }), \");\\n      }\\n\\n      var d = r - length;\\n      var coefficient = ((spring.coefficient > 0) ? spring.coefficient : options.springCoefficient) * d / r;\\n\\n      \").concat(pattern('body1.force.{var} += coefficient * d{var}', {\n    indent: 6\n  }), \";\\n      body1.springCount += 1;\\n      body1.springLength += r;\\n\\n      \").concat(pattern('body2.force.{var} -= coefficient * d{var}', {\n    indent: 6\n  }), \";\\n      body2.springCount += 1;\\n      body2.springLength += r;\\n    }\\n  };\\n\");\n  return code;\n}","map":null,"metadata":{},"sourceType":"script"}