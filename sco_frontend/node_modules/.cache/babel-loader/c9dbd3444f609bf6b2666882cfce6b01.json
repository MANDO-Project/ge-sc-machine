{"ast":null,"code":"var _toConsumableArray = require(\"C:\\\\Users\\\\Admin\\\\Music\\\\MANDO\\\\ge-sc-machine\\\\sco_frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/toConsumableArray\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n  return re.source;\n}\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\n\n\nfunction lookahead(re) {\n  return concat('(?=', re, ')');\n}\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\n\n\nfunction concat() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var joined = args.map(function (x) {\n    return source(x);\n  }).join(\"\");\n  return joined;\n}\n/**\n * Any of the passed expresssions may match\n *\n * Creates a huge this | this | that | that match\n * @param {(RegExp | string)[] } args\n * @returns {string}\n */\n\n\nfunction either() {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n\n  var joined = '(' + args.map(function (x) {\n    return source(x);\n  }).join(\"|\") + \")\";\n  return joined;\n}\n\nvar keywordWrapper = function keywordWrapper(keyword) {\n  return concat(/\\b/, keyword, /\\w$/.test(keyword) ? /\\b/ : /\\B/);\n}; // Keywords that require a leading dot.\n\n\nvar dotKeywords = ['Protocol', // contextual\n'Type' // contextual\n].map(keywordWrapper); // Keywords that may have a leading dot.\n\nvar optionalDotKeywords = ['init', 'self'].map(keywordWrapper); // should register as keyword, not type\n\nvar keywordTypes = ['Any', 'Self']; // Regular keywords and literals.\n\nvar keywords = [// strings below will be fed into the regular `keywords` engine while regex\n// will result in additional modes being created to scan for those keywords to\n// avoid conflicts with other rules\n'associatedtype', 'async', 'await', /as\\?/, // operator\n/as!/, // operator\n'as', // operator\n'break', 'case', 'catch', 'class', 'continue', 'convenience', // contextual\n'default', 'defer', 'deinit', 'didSet', // contextual\n'do', 'dynamic', // contextual\n'else', 'enum', 'extension', 'fallthrough', /fileprivate\\(set\\)/, 'fileprivate', 'final', // contextual\n'for', 'func', 'get', // contextual\n'guard', 'if', 'import', 'indirect', // contextual\n'infix', // contextual\n/init\\?/, /init!/, 'inout', /internal\\(set\\)/, 'internal', 'in', 'is', // operator\n'lazy', // contextual\n'let', 'mutating', // contextual\n'nonmutating', // contextual\n/open\\(set\\)/, // contextual\n'open', // contextual\n'operator', 'optional', // contextual\n'override', // contextual\n'postfix', // contextual\n'precedencegroup', 'prefix', // contextual\n/private\\(set\\)/, 'private', 'protocol', /public\\(set\\)/, 'public', 'repeat', 'required', // contextual\n'rethrows', 'return', 'set', // contextual\n'some', // contextual\n'static', 'struct', 'subscript', 'super', 'switch', 'throws', 'throw', /try\\?/, // operator\n/try!/, // operator\n'try', // operator\n'typealias', /unowned\\(safe\\)/, // contextual\n/unowned\\(unsafe\\)/, // contextual\n'unowned', // contextual\n'var', 'weak', // contextual\n'where', 'while', 'willSet' // contextual\n]; // NOTE: Contextual keywords are reserved only in specific contexts.\n// Ideally, these should be matched using modes to avoid false positives.\n// Literals.\n\nvar literals = ['false', 'nil', 'true']; // Keywords used in precedence groups.\n\nvar precedencegroupKeywords = ['assignment', 'associativity', 'higherThan', 'left', 'lowerThan', 'none', 'right']; // Keywords that start with a number sign (#).\n// #available is handled separately.\n\nvar numberSignKeywords = ['#colorLiteral', '#column', '#dsohandle', '#else', '#elseif', '#endif', '#error', '#file', '#fileID', '#fileLiteral', '#filePath', '#function', '#if', '#imageLiteral', '#keyPath', '#line', '#selector', '#sourceLocation', '#warn_unqualified_access', '#warning']; // Global functions in the Standard Library.\n\nvar builtIns = ['abs', 'all', 'any', 'assert', 'assertionFailure', 'debugPrint', 'dump', 'fatalError', 'getVaList', 'isKnownUniquelyReferenced', 'max', 'min', 'numericCast', 'pointwiseMax', 'pointwiseMin', 'precondition', 'preconditionFailure', 'print', 'readLine', 'repeatElement', 'sequence', 'stride', 'swap', 'swift_unboxFromSwiftValueWithType', 'transcode', 'type', 'unsafeBitCast', 'unsafeDowncast', 'withExtendedLifetime', 'withUnsafeMutablePointer', 'withUnsafePointer', 'withVaList', 'withoutActuallyEscaping', 'zip']; // Valid first characters for operators.\n\nvar operatorHead = either(/[/=\\-+!*%<>&|^~?]/, /[\\u00A1-\\u00A7]/, /[\\u00A9\\u00AB]/, /[\\u00AC\\u00AE]/, /[\\u00B0\\u00B1]/, /[\\u00B6\\u00BB\\u00BF\\u00D7\\u00F7]/, /[\\u2016-\\u2017]/, /[\\u2020-\\u2027]/, /[\\u2030-\\u203E]/, /[\\u2041-\\u2053]/, /[\\u2055-\\u205E]/, /[\\u2190-\\u23FF]/, /[\\u2500-\\u2775]/, /[\\u2794-\\u2BFF]/, /[\\u2E00-\\u2E7F]/, /[\\u3001-\\u3003]/, /[\\u3008-\\u3020]/, /[\\u3030]/); // Valid characters for operators.\n\nvar operatorCharacter = either(operatorHead, /[\\u0300-\\u036F]/, /[\\u1DC0-\\u1DFF]/, /[\\u20D0-\\u20FF]/, /[\\uFE00-\\uFE0F]/, /[\\uFE20-\\uFE2F]/ // TODO: The following characters are also allowed, but the regex isn't supported yet.\n// /[\\u{E0100}-\\u{E01EF}]/u\n); // Valid operator.\n\nvar operator = concat(operatorHead, operatorCharacter, '*'); // Valid first characters for identifiers.\n\nvar identifierHead = either(/[a-zA-Z_]/, /[\\u00A8\\u00AA\\u00AD\\u00AF\\u00B2-\\u00B5\\u00B7-\\u00BA]/, /[\\u00BC-\\u00BE\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u00FF]/, /[\\u0100-\\u02FF\\u0370-\\u167F\\u1681-\\u180D\\u180F-\\u1DBF]/, /[\\u1E00-\\u1FFF]/, /[\\u200B-\\u200D\\u202A-\\u202E\\u203F-\\u2040\\u2054\\u2060-\\u206F]/, /[\\u2070-\\u20CF\\u2100-\\u218F\\u2460-\\u24FF\\u2776-\\u2793]/, /[\\u2C00-\\u2DFF\\u2E80-\\u2FFF]/, /[\\u3004-\\u3007\\u3021-\\u302F\\u3031-\\u303F\\u3040-\\uD7FF]/, /[\\uF900-\\uFD3D\\uFD40-\\uFDCF\\uFDF0-\\uFE1F\\uFE30-\\uFE44]/, /[\\uFE47-\\uFEFE\\uFF00-\\uFFFD]/ // Should be /[\\uFE47-\\uFFFD]/, but we have to exclude FEFF.\n// The following characters are also allowed, but the regexes aren't supported yet.\n// /[\\u{10000}-\\u{1FFFD}\\u{20000-\\u{2FFFD}\\u{30000}-\\u{3FFFD}\\u{40000}-\\u{4FFFD}]/u,\n// /[\\u{50000}-\\u{5FFFD}\\u{60000-\\u{6FFFD}\\u{70000}-\\u{7FFFD}\\u{80000}-\\u{8FFFD}]/u,\n// /[\\u{90000}-\\u{9FFFD}\\u{A0000-\\u{AFFFD}\\u{B0000}-\\u{BFFFD}\\u{C0000}-\\u{CFFFD}]/u,\n// /[\\u{D0000}-\\u{DFFFD}\\u{E0000-\\u{EFFFD}]/u\n); // Valid characters for identifiers.\n\nvar identifierCharacter = either(identifierHead, /\\d/, /[\\u0300-\\u036F\\u1DC0-\\u1DFF\\u20D0-\\u20FF\\uFE20-\\uFE2F]/); // Valid identifier.\n\nvar identifier = concat(identifierHead, identifierCharacter, '*'); // Valid type identifier.\n\nvar typeIdentifier = concat(/[A-Z]/, identifierCharacter, '*'); // Built-in attributes, which are highlighted as keywords.\n// @available is handled separately.\n\nvar keywordAttributes = ['autoclosure', concat(/convention\\(/, either('swift', 'block', 'c'), /\\)/), 'discardableResult', 'dynamicCallable', 'dynamicMemberLookup', 'escaping', 'frozen', 'GKInspectable', 'IBAction', 'IBDesignable', 'IBInspectable', 'IBOutlet', 'IBSegueAction', 'inlinable', 'main', 'nonobjc', 'NSApplicationMain', 'NSCopying', 'NSManaged', concat(/objc\\(/, identifier, /\\)/), 'objc', 'objcMembers', 'propertyWrapper', 'requires_stored_property_inits', 'testable', 'UIApplicationMain', 'unknown', 'usableFromInline']; // Contextual keywords used in @available and #available.\n\nvar availabilityKeywords = ['iOS', 'iOSApplicationExtension', 'macOS', 'macOSApplicationExtension', 'macCatalyst', 'macCatalystApplicationExtension', 'watchOS', 'watchOSApplicationExtension', 'tvOS', 'tvOSApplicationExtension', 'swift'];\n/*\nLanguage: Swift\nDescription: Swift is a general-purpose programming language built using a modern approach to safety, performance, and software design patterns.\nAuthor: Steven Van Impe <steven.vanimpe@icloud.com>\nContributors: Chris Eidhof <chris@eidhof.nl>, Nate Cook <natecook@gmail.com>, Alexander Lichter <manniL@gmx.net>, Richard Gibson <gibson042@github>\nWebsite: https://swift.org\nCategory: common, system\n*/\n\n/** @type LanguageFn */\n\nfunction swift(hljs) {\n  var WHITESPACE = {\n    match: /\\s+/,\n    relevance: 0\n  }; // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID411\n\n  var BLOCK_COMMENT = hljs.COMMENT('/\\\\*', '\\\\*/', {\n    contains: ['self']\n  });\n  var COMMENTS = [hljs.C_LINE_COMMENT_MODE, BLOCK_COMMENT]; // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID413\n  // https://docs.swift.org/swift-book/ReferenceManual/zzSummaryOfTheGrammar.html\n\n  var DOT_KEYWORD = {\n    className: 'keyword',\n    begin: concat(/\\./, lookahead(either.apply(void 0, _toConsumableArray(dotKeywords).concat(_toConsumableArray(optionalDotKeywords))))),\n    end: either.apply(void 0, _toConsumableArray(dotKeywords).concat(_toConsumableArray(optionalDotKeywords))),\n    excludeBegin: true\n  };\n  var KEYWORD_GUARD = {\n    // Consume .keyword to prevent highlighting properties and methods as keywords.\n    match: concat(/\\./, either.apply(void 0, keywords)),\n    relevance: 0\n  };\n  var PLAIN_KEYWORDS = keywords.filter(function (kw) {\n    return typeof kw === 'string';\n  }).concat([\"_|0\"]); // seems common, so 0 relevance\n\n  var REGEX_KEYWORDS = keywords.filter(function (kw) {\n    return typeof kw !== 'string';\n  }) // find regex\n  .concat(keywordTypes).map(keywordWrapper);\n  var KEYWORD = {\n    variants: [{\n      className: 'keyword',\n      match: either.apply(void 0, _toConsumableArray(REGEX_KEYWORDS).concat(_toConsumableArray(optionalDotKeywords)))\n    }]\n  }; // find all the regular keywords\n\n  var KEYWORDS = {\n    $pattern: either(/\\b\\w+/, // regular keywords\n    /#\\w+/ // number keywords\n    ),\n    keyword: PLAIN_KEYWORDS.concat(numberSignKeywords),\n    literal: literals\n  };\n  var KEYWORD_MODES = [DOT_KEYWORD, KEYWORD_GUARD, KEYWORD]; // https://github.com/apple/swift/tree/main/stdlib/public/core\n\n  var BUILT_IN_GUARD = {\n    // Consume .built_in to prevent highlighting properties and methods.\n    match: concat(/\\./, either.apply(void 0, builtIns)),\n    relevance: 0\n  };\n  var BUILT_IN = {\n    className: 'built_in',\n    match: concat(/\\b/, either.apply(void 0, builtIns), /(?=\\()/)\n  };\n  var BUILT_INS = [BUILT_IN_GUARD, BUILT_IN]; // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID418\n\n  var OPERATOR_GUARD = {\n    // Prevent -> from being highlighting as an operator.\n    match: /->/,\n    relevance: 0\n  };\n  var OPERATOR = {\n    className: 'operator',\n    relevance: 0,\n    variants: [{\n      match: operator\n    }, {\n      // dot-operator: only operators that start with a dot are allowed to use dots as\n      // characters (..., ...<, .*, etc). So there rule here is: a dot followed by one or more\n      // characters that may also include dots.\n      match: \"\\\\.(\\\\.|\".concat(operatorCharacter, \")+\")\n    }]\n  };\n  var OPERATORS = [OPERATOR_GUARD, OPERATOR]; // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_numeric-literal\n  // TODO: Update for leading `-` after lookbehind is supported everywhere\n\n  var decimalDigits = '([0-9]_*)+';\n  var hexDigits = '([0-9a-fA-F]_*)+';\n  var NUMBER = {\n    className: 'number',\n    relevance: 0,\n    variants: [// decimal floating-point-literal (subsumes decimal-literal)\n    {\n      match: \"\\\\b(\".concat(decimalDigits, \")(\\\\.(\").concat(decimalDigits, \"))?\") + \"([eE][+-]?(\".concat(decimalDigits, \"))?\\\\b\")\n    }, // hexadecimal floating-point-literal (subsumes hexadecimal-literal)\n    {\n      match: \"\\\\b0x(\".concat(hexDigits, \")(\\\\.(\").concat(hexDigits, \"))?\") + \"([pP][+-]?(\".concat(decimalDigits, \"))?\\\\b\")\n    }, // octal-literal\n    {\n      match: /\\b0o([0-7]_*)+\\b/\n    }, // binary-literal\n    {\n      match: /\\b0b([01]_*)+\\b/\n    }]\n  }; // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_string-literal\n\n  var ESCAPED_CHARACTER = function ESCAPED_CHARACTER() {\n    var rawDelimiter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return {\n      className: 'subst',\n      variants: [{\n        match: concat(/\\\\/, rawDelimiter, /[0\\\\tnr\"']/)\n      }, {\n        match: concat(/\\\\/, rawDelimiter, /u\\{[0-9a-fA-F]{1,8}\\}/)\n      }]\n    };\n  };\n\n  var ESCAPED_NEWLINE = function ESCAPED_NEWLINE() {\n    var rawDelimiter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return {\n      className: 'subst',\n      match: concat(/\\\\/, rawDelimiter, /[\\t ]*(?:[\\r\\n]|\\r\\n)/)\n    };\n  };\n\n  var INTERPOLATION = function INTERPOLATION() {\n    var rawDelimiter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return {\n      className: 'subst',\n      label: \"interpol\",\n      begin: concat(/\\\\/, rawDelimiter, /\\(/),\n      end: /\\)/\n    };\n  };\n\n  var MULTILINE_STRING = function MULTILINE_STRING() {\n    var rawDelimiter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return {\n      begin: concat(rawDelimiter, /\"\"\"/),\n      end: concat(/\"\"\"/, rawDelimiter),\n      contains: [ESCAPED_CHARACTER(rawDelimiter), ESCAPED_NEWLINE(rawDelimiter), INTERPOLATION(rawDelimiter)]\n    };\n  };\n\n  var SINGLE_LINE_STRING = function SINGLE_LINE_STRING() {\n    var rawDelimiter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n    return {\n      begin: concat(rawDelimiter, /\"/),\n      end: concat(/\"/, rawDelimiter),\n      contains: [ESCAPED_CHARACTER(rawDelimiter), INTERPOLATION(rawDelimiter)]\n    };\n  };\n\n  var STRING = {\n    className: 'string',\n    variants: [MULTILINE_STRING(), MULTILINE_STRING(\"#\"), MULTILINE_STRING(\"##\"), MULTILINE_STRING(\"###\"), SINGLE_LINE_STRING(), SINGLE_LINE_STRING(\"#\"), SINGLE_LINE_STRING(\"##\"), SINGLE_LINE_STRING(\"###\")]\n  }; // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID412\n\n  var QUOTED_IDENTIFIER = {\n    match: concat(/`/, identifier, /`/)\n  };\n  var IMPLICIT_PARAMETER = {\n    className: 'variable',\n    match: /\\$\\d+/\n  };\n  var PROPERTY_WRAPPER_PROJECTION = {\n    className: 'variable',\n    match: \"\\\\$\".concat(identifierCharacter, \"+\")\n  };\n  var IDENTIFIERS = [QUOTED_IDENTIFIER, IMPLICIT_PARAMETER, PROPERTY_WRAPPER_PROJECTION]; // https://docs.swift.org/swift-book/ReferenceManual/Attributes.html\n\n  var AVAILABLE_ATTRIBUTE = {\n    match: /(@|#)available/,\n    className: \"keyword\",\n    starts: {\n      contains: [{\n        begin: /\\(/,\n        end: /\\)/,\n        keywords: availabilityKeywords,\n        contains: [].concat(OPERATORS, [NUMBER, STRING])\n      }]\n    }\n  };\n  var KEYWORD_ATTRIBUTE = {\n    className: 'keyword',\n    match: concat(/@/, either.apply(void 0, keywordAttributes))\n  };\n  var USER_DEFINED_ATTRIBUTE = {\n    className: 'meta',\n    match: concat(/@/, identifier)\n  };\n  var ATTRIBUTES = [AVAILABLE_ATTRIBUTE, KEYWORD_ATTRIBUTE, USER_DEFINED_ATTRIBUTE]; // https://docs.swift.org/swift-book/ReferenceManual/Types.html\n\n  var TYPE = {\n    match: lookahead(/\\b[A-Z]/),\n    relevance: 0,\n    contains: [{\n      // Common Apple frameworks, for relevance boost\n      className: 'type',\n      match: concat(/(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)/, identifierCharacter, '+')\n    }, {\n      // Type identifier\n      className: 'type',\n      match: typeIdentifier,\n      relevance: 0\n    }, {\n      // Optional type\n      match: /[?!]+/,\n      relevance: 0\n    }, {\n      // Variadic parameter\n      match: /\\.\\.\\./,\n      relevance: 0\n    }, {\n      // Protocol composition\n      match: concat(/\\s+&\\s+/, lookahead(typeIdentifier)),\n      relevance: 0\n    }]\n  };\n  var GENERIC_ARGUMENTS = {\n    begin: /</,\n    end: />/,\n    keywords: KEYWORDS,\n    contains: [].concat(COMMENTS, KEYWORD_MODES, ATTRIBUTES, [OPERATOR_GUARD, TYPE])\n  };\n  TYPE.contains.push(GENERIC_ARGUMENTS); // https://docs.swift.org/swift-book/ReferenceManual/Expressions.html#ID552\n  // Prevents element names from being highlighted as keywords.\n\n  var TUPLE_ELEMENT_NAME = {\n    match: concat(identifier, /\\s*:/),\n    keywords: \"_|0\",\n    relevance: 0\n  }; // Matches tuples as well as the parameter list of a function type.\n\n  var TUPLE = {\n    begin: /\\(/,\n    end: /\\)/,\n    relevance: 0,\n    keywords: KEYWORDS,\n    contains: ['self', TUPLE_ELEMENT_NAME].concat(COMMENTS, KEYWORD_MODES, BUILT_INS, OPERATORS, [NUMBER, STRING], IDENTIFIERS, ATTRIBUTES, [TYPE])\n  }; // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID362\n  // Matches both the keyword func and the function title.\n  // Grouping these lets us differentiate between the operator function <\n  // and the start of the generic parameter clause (also <).\n\n  var FUNC_PLUS_TITLE = {\n    beginKeywords: 'func',\n    contains: [{\n      className: 'title',\n      match: either(QUOTED_IDENTIFIER.match, identifier, operator),\n      // Required to make sure the opening < of the generic parameter clause\n      // isn't parsed as a second title.\n      endsParent: true,\n      relevance: 0\n    }, WHITESPACE]\n  };\n  var GENERIC_PARAMETERS = {\n    begin: /</,\n    end: />/,\n    contains: [].concat(COMMENTS, [TYPE])\n  };\n  var FUNCTION_PARAMETER_NAME = {\n    begin: either(lookahead(concat(identifier, /\\s*:/)), lookahead(concat(identifier, /\\s+/, identifier, /\\s*:/))),\n    end: /:/,\n    relevance: 0,\n    contains: [{\n      className: 'keyword',\n      match: /\\b_\\b/\n    }, {\n      className: 'params',\n      match: identifier\n    }]\n  };\n  var FUNCTION_PARAMETERS = {\n    begin: /\\(/,\n    end: /\\)/,\n    keywords: KEYWORDS,\n    contains: [FUNCTION_PARAMETER_NAME].concat(COMMENTS, KEYWORD_MODES, OPERATORS, [NUMBER, STRING], ATTRIBUTES, [TYPE, TUPLE]),\n    endsParent: true,\n    illegal: /[\"']/\n  };\n  var FUNCTION = {\n    className: 'function',\n    match: lookahead(/\\bfunc\\b/),\n    contains: [FUNC_PLUS_TITLE, GENERIC_PARAMETERS, FUNCTION_PARAMETERS, WHITESPACE],\n    illegal: [/\\[/, /%/]\n  }; // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID375\n  // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID379\n\n  var INIT_SUBSCRIPT = {\n    className: 'function',\n    match: /\\b(subscript|init[?!]?)\\s*(?=[<(])/,\n    keywords: {\n      keyword: \"subscript init init? init!\",\n      $pattern: /\\w+[?!]?/\n    },\n    contains: [GENERIC_PARAMETERS, FUNCTION_PARAMETERS, WHITESPACE],\n    illegal: /\\[|%/\n  }; // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID380\n\n  var OPERATOR_DECLARATION = {\n    beginKeywords: 'operator',\n    end: hljs.MATCH_NOTHING_RE,\n    contains: [{\n      className: 'title',\n      match: operator,\n      endsParent: true,\n      relevance: 0\n    }]\n  }; // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID550\n\n  var PRECEDENCEGROUP = {\n    beginKeywords: 'precedencegroup',\n    end: hljs.MATCH_NOTHING_RE,\n    contains: [{\n      className: 'title',\n      match: typeIdentifier,\n      relevance: 0\n    }, {\n      begin: /{/,\n      end: /}/,\n      relevance: 0,\n      endsParent: true,\n      keywords: [].concat(precedencegroupKeywords, literals),\n      contains: [TYPE]\n    }]\n  }; // Add supported submodes to string interpolation.\n\n  var _iterator = _createForOfIteratorHelper(STRING.variants),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var variant = _step.value;\n      var interpolation = variant.contains.find(function (mode) {\n        return mode.label === \"interpol\";\n      }); // TODO: Interpolation can contain any expression, so there's room for improvement here.\n\n      interpolation.keywords = KEYWORDS;\n      var submodes = [].concat(KEYWORD_MODES, BUILT_INS, OPERATORS, [NUMBER, STRING], IDENTIFIERS);\n      interpolation.contains = [].concat(_toConsumableArray(submodes), [{\n        begin: /\\(/,\n        end: /\\)/,\n        contains: ['self'].concat(_toConsumableArray(submodes))\n      }]);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return {\n    name: 'Swift',\n    keywords: KEYWORDS,\n    contains: [].concat(COMMENTS, [FUNCTION, INIT_SUBSCRIPT, {\n      className: 'class',\n      beginKeywords: 'struct protocol class extension enum',\n      end: '\\\\{',\n      excludeEnd: true,\n      keywords: KEYWORDS,\n      contains: [hljs.inherit(hljs.TITLE_MODE, {\n        begin: /[A-Za-z$_][\\u00C0-\\u02B80-9A-Za-z$_]*/\n      })].concat(KEYWORD_MODES)\n    }, OPERATOR_DECLARATION, PRECEDENCEGROUP, {\n      beginKeywords: 'import',\n      end: /$/,\n      contains: [].concat(COMMENTS),\n      relevance: 0\n    }], KEYWORD_MODES, BUILT_INS, OPERATORS, [NUMBER, STRING], IDENTIFIERS, ATTRIBUTES, [TYPE, TUPLE])\n  };\n}\n\nmodule.exports = swift;","map":null,"metadata":{},"sourceType":"script"}