{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React from 'react';\nimport '../sigma/parsers.gexf';\nimport { embedProps } from './tools';\n/**\n\nLoadGEXF component, interface for parsers.json sigma plugin. Can be used within Sigma component.\nCan be composed with other plugins: on load it mounts all child components (e.g. other sigma plugins).\nChild's componentWillMount should be used to enable plugins on loaded graph.\n\n @param {string} path   path to the GEXF file\n @param {Function} onGraphLoaded        Optional callback for graph update\n\n[see sigma plugin page for more details](https://github.com/jacomyal/sigma.js/tree/master/plugins/sigma.neo4j.cypher)\n\n**/\n\nvar LoadGEXF = /*#__PURE__*/function (_React$Component) {\n  _inherits(LoadGEXF, _React$Component);\n\n  var _super = _createSuper(LoadGEXF);\n\n  function LoadGEXF(props) {\n    var _this;\n\n    _classCallCheck(this, LoadGEXF);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"onLoad\", function () {\n      if (_this.props.sigma) _this.props.sigma.refresh();\n\n      _this.setState({\n        loaded: true\n      });\n\n      if (_this.props.onGraphLoaded) return _this.props.onGraphLoaded();\n    });\n\n    _this.state = {\n      loaded: false\n    };\n    return _this;\n  }\n\n  _createClass(LoadGEXF, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._load(this.props.path);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(props) {\n      // reload only if path changes\n      if (this.props.path !== props.path) {\n        this.setState({\n          loaded: false\n        });\n\n        this._load(props.path);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (!this.state.loaded) return null;\n      return /*#__PURE__*/React.createElement(\"div\", null, embedProps(this.props.children, {\n        sigma: this.props.sigma\n      }));\n    }\n  }, {\n    key: \"_load\",\n    value: function _load(url) {\n      sigma.parsers.gexf(this.props.path, this.props.sigma, this.onLoad);\n    }\n  }]);\n\n  return LoadGEXF;\n}(React.Component);\n\n_defineProperty(LoadGEXF, \"propTypes\", {\n  path: PropTypes.string.isRequired,\n  onGraphLoaded: PropTypes.func,\n  children: PropTypes.any,\n  sigma: function sigma() {\n    return (typeof Sigma === \"function\" ? PropTypes.instanceOf(Sigma) : PropTypes.any).apply(this, arguments);\n  }\n});\n\nexport default LoadGEXF;\nimport PropTypes from \"prop-types\";","map":null,"metadata":{},"sourceType":"module"}