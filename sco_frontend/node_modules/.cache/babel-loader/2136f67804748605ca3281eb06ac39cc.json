{"ast":null,"code":"/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n  return re.source;\n}\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\n\n\nfunction optional(re) {\n  return concat('(', re, ')?');\n}\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\n\n\nfunction concat() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  const joined = args.map(x => source(x)).join(\"\");\n  return joined;\n}\n/*\nLanguage: C\nCategory: common, system\nWebsite: https://en.wikipedia.org/wiki/C_(programming_language)\n*/\n\n/** @type LanguageFn */\n\n\nfunction c(hljs) {\n  // added for historic reasons because `hljs.C_LINE_COMMENT_MODE` does\n  // not include such support nor can we be sure all the grammars depending\n  // on it would desire this behavior\n  const C_LINE_COMMENT_MODE = hljs.COMMENT('//', '$', {\n    contains: [{\n      begin: /\\\\\\n/\n    }]\n  });\n  const DECLTYPE_AUTO_RE = 'decltype\\\\(auto\\\\)';\n  const NAMESPACE_RE = '[a-zA-Z_]\\\\w*::';\n  const TEMPLATE_ARGUMENT_RE = '<[^<>]+>';\n  const FUNCTION_TYPE_RE = '(' + DECLTYPE_AUTO_RE + '|' + optional(NAMESPACE_RE) + '[a-zA-Z_]\\\\w*' + optional(TEMPLATE_ARGUMENT_RE) + ')';\n  const CPP_PRIMITIVE_TYPES = {\n    className: 'keyword',\n    begin: '\\\\b[a-z\\\\d_]*_t\\\\b'\n  }; // https://en.cppreference.com/w/cpp/language/escape\n  // \\\\ \\x \\xFF \\u2837 \\u00323747 \\374\n\n  const CHARACTER_ESCAPES = '\\\\\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\\\S)';\n  const STRINGS = {\n    className: 'string',\n    variants: [{\n      begin: '(u8?|U|L)?\"',\n      end: '\"',\n      illegal: '\\\\n',\n      contains: [hljs.BACKSLASH_ESCAPE]\n    }, {\n      begin: '(u8?|U|L)?\\'(' + CHARACTER_ESCAPES + \"|.)\",\n      end: '\\'',\n      illegal: '.'\n    }, hljs.END_SAME_AS_BEGIN({\n      begin: /(?:u8?|U|L)?R\"([^()\\\\ ]{0,16})\\(/,\n      end: /\\)([^()\\\\ ]{0,16})\"/\n    })]\n  };\n  const NUMBERS = {\n    className: 'number',\n    variants: [{\n      begin: '\\\\b(0b[01\\']+)'\n    }, {\n      begin: '(-?)\\\\b([\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)'\n    }, {\n      begin: '(-?)(\\\\b0[xX][a-fA-F0-9\\']+|(\\\\b[\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)([eE][-+]?[\\\\d\\']+)?)'\n    }],\n    relevance: 0\n  };\n  const PREPROCESSOR = {\n    className: 'meta',\n    begin: /#\\s*[a-z]+\\b/,\n    end: /$/,\n    keywords: {\n      'meta-keyword': 'if else elif endif define undef warning error line ' + 'pragma _Pragma ifdef ifndef include'\n    },\n    contains: [{\n      begin: /\\\\\\n/,\n      relevance: 0\n    }, hljs.inherit(STRINGS, {\n      className: 'meta-string'\n    }), {\n      className: 'meta-string',\n      begin: /<.*?>/\n    }, C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE]\n  };\n  const TITLE_MODE = {\n    className: 'title',\n    begin: optional(NAMESPACE_RE) + hljs.IDENT_RE,\n    relevance: 0\n  };\n  const FUNCTION_TITLE = optional(NAMESPACE_RE) + hljs.IDENT_RE + '\\\\s*\\\\(';\n  const CPP_KEYWORDS = {\n    keyword: 'int float while private char char8_t char16_t char32_t catch import module export virtual operator sizeof ' + 'dynamic_cast|10 typedef const_cast|10 const for static_cast|10 union namespace ' + 'unsigned long volatile static protected bool template mutable if public friend ' + 'do goto auto void enum else break extern using asm case typeid wchar_t ' + 'short reinterpret_cast|10 default double register explicit signed typename try this ' + 'switch continue inline delete alignas alignof constexpr consteval constinit decltype ' + 'concept co_await co_return co_yield requires ' + 'noexcept static_assert thread_local restrict final override ' + 'atomic_bool atomic_char atomic_schar ' + 'atomic_uchar atomic_short atomic_ushort atomic_int atomic_uint atomic_long atomic_ulong atomic_llong ' + 'atomic_ullong new throw return ' + 'and and_eq bitand bitor compl not not_eq or or_eq xor xor_eq',\n    built_in: 'std string wstring cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream ' + 'auto_ptr deque list queue stack vector map set pair bitset multiset multimap unordered_set ' + 'unordered_map unordered_multiset unordered_multimap priority_queue make_pair array shared_ptr abort terminate abs acos ' + 'asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp ' + 'fscanf future isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper ' + 'isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow ' + 'printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp ' + 'strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan ' + 'vfprintf vprintf vsprintf endl initializer_list unique_ptr _Bool complex _Complex imaginary _Imaginary',\n    literal: 'true false nullptr NULL'\n  };\n  const EXPRESSION_CONTAINS = [PREPROCESSOR, CPP_PRIMITIVE_TYPES, C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, NUMBERS, STRINGS];\n  const EXPRESSION_CONTEXT = {\n    // This mode covers expression context where we can't expect a function\n    // definition and shouldn't highlight anything that looks like one:\n    // `return some()`, `else if()`, `(x*sum(1, 2))`\n    variants: [{\n      begin: /=/,\n      end: /;/\n    }, {\n      begin: /\\(/,\n      end: /\\)/\n    }, {\n      beginKeywords: 'new throw return else',\n      end: /;/\n    }],\n    keywords: CPP_KEYWORDS,\n    contains: EXPRESSION_CONTAINS.concat([{\n      begin: /\\(/,\n      end: /\\)/,\n      keywords: CPP_KEYWORDS,\n      contains: EXPRESSION_CONTAINS.concat(['self']),\n      relevance: 0\n    }]),\n    relevance: 0\n  };\n  const FUNCTION_DECLARATION = {\n    className: 'function',\n    begin: '(' + FUNCTION_TYPE_RE + '[\\\\*&\\\\s]+)+' + FUNCTION_TITLE,\n    returnBegin: true,\n    end: /[{;=]/,\n    excludeEnd: true,\n    keywords: CPP_KEYWORDS,\n    illegal: /[^\\w\\s\\*&:<>.]/,\n    contains: [{\n      // to prevent it from being confused as the function title\n      begin: DECLTYPE_AUTO_RE,\n      keywords: CPP_KEYWORDS,\n      relevance: 0\n    }, {\n      begin: FUNCTION_TITLE,\n      returnBegin: true,\n      contains: [TITLE_MODE],\n      relevance: 0\n    }, {\n      className: 'params',\n      begin: /\\(/,\n      end: /\\)/,\n      keywords: CPP_KEYWORDS,\n      relevance: 0,\n      contains: [C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, STRINGS, NUMBERS, CPP_PRIMITIVE_TYPES, // Count matching parentheses.\n      {\n        begin: /\\(/,\n        end: /\\)/,\n        keywords: CPP_KEYWORDS,\n        relevance: 0,\n        contains: ['self', C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, STRINGS, NUMBERS, CPP_PRIMITIVE_TYPES]\n      }]\n    }, CPP_PRIMITIVE_TYPES, C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, PREPROCESSOR]\n  };\n  return {\n    name: \"C\",\n    aliases: ['h'],\n    keywords: CPP_KEYWORDS,\n    // Until differentiations are added between `c` and `cpp`, `c` will\n    // not be auto-detected to avoid auto-detect conflicts between C and C++\n    disableAutodetect: true,\n    illegal: '</',\n    contains: [].concat(EXPRESSION_CONTEXT, FUNCTION_DECLARATION, EXPRESSION_CONTAINS, [PREPROCESSOR, {\n      // containers: ie, `vector <int> rooms (9);`\n      begin: '\\\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array)\\\\s*<',\n      end: '>',\n      keywords: CPP_KEYWORDS,\n      contains: ['self', CPP_PRIMITIVE_TYPES]\n    }, {\n      begin: hljs.IDENT_RE + '::',\n      keywords: CPP_KEYWORDS\n    }, {\n      className: 'class',\n      beginKeywords: 'enum class struct union',\n      end: /[{;:<>=]/,\n      contains: [{\n        beginKeywords: \"final class struct\"\n      }, hljs.TITLE_MODE]\n    }]),\n    exports: {\n      preprocessor: PREPROCESSOR,\n      strings: STRINGS,\n      keywords: CPP_KEYWORDS\n    }\n  };\n}\n\nmodule.exports = c;","map":{"version":3,"sources":["C:/Users/Admin/Music/MANDO/ge-sc-machine/sco_frontend/node_modules/highlight.js/lib/languages/c.js"],"names":["source","re","optional","concat","args","joined","map","x","join","c","hljs","C_LINE_COMMENT_MODE","COMMENT","contains","begin","DECLTYPE_AUTO_RE","NAMESPACE_RE","TEMPLATE_ARGUMENT_RE","FUNCTION_TYPE_RE","CPP_PRIMITIVE_TYPES","className","CHARACTER_ESCAPES","STRINGS","variants","end","illegal","BACKSLASH_ESCAPE","END_SAME_AS_BEGIN","NUMBERS","relevance","PREPROCESSOR","keywords","inherit","C_BLOCK_COMMENT_MODE","TITLE_MODE","IDENT_RE","FUNCTION_TITLE","CPP_KEYWORDS","keyword","built_in","literal","EXPRESSION_CONTAINS","EXPRESSION_CONTEXT","beginKeywords","FUNCTION_DECLARATION","returnBegin","excludeEnd","name","aliases","disableAutodetect","exports","preprocessor","strings","module"],"mappings":"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","sourcesContent":["/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n\n  return re.source;\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction optional(re) {\n  return concat('(', re, ')?');\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map((x) => source(x)).join(\"\");\n  return joined;\n}\n\n/*\nLanguage: C\nCategory: common, system\nWebsite: https://en.wikipedia.org/wiki/C_(programming_language)\n*/\n\n/** @type LanguageFn */\nfunction c(hljs) {\n  // added for historic reasons because `hljs.C_LINE_COMMENT_MODE` does\n  // not include such support nor can we be sure all the grammars depending\n  // on it would desire this behavior\n  const C_LINE_COMMENT_MODE = hljs.COMMENT('//', '$', {\n    contains: [\n      {\n        begin: /\\\\\\n/\n      }\n    ]\n  });\n  const DECLTYPE_AUTO_RE = 'decltype\\\\(auto\\\\)';\n  const NAMESPACE_RE = '[a-zA-Z_]\\\\w*::';\n  const TEMPLATE_ARGUMENT_RE = '<[^<>]+>';\n  const FUNCTION_TYPE_RE = '(' +\n    DECLTYPE_AUTO_RE + '|' +\n    optional(NAMESPACE_RE) +\n    '[a-zA-Z_]\\\\w*' + optional(TEMPLATE_ARGUMENT_RE) +\n  ')';\n  const CPP_PRIMITIVE_TYPES = {\n    className: 'keyword',\n    begin: '\\\\b[a-z\\\\d_]*_t\\\\b'\n  };\n\n  // https://en.cppreference.com/w/cpp/language/escape\n  // \\\\ \\x \\xFF \\u2837 \\u00323747 \\374\n  const CHARACTER_ESCAPES = '\\\\\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\\\S)';\n  const STRINGS = {\n    className: 'string',\n    variants: [\n      {\n        begin: '(u8?|U|L)?\"',\n        end: '\"',\n        illegal: '\\\\n',\n        contains: [ hljs.BACKSLASH_ESCAPE ]\n      },\n      {\n        begin: '(u8?|U|L)?\\'(' + CHARACTER_ESCAPES + \"|.)\",\n        end: '\\'',\n        illegal: '.'\n      },\n      hljs.END_SAME_AS_BEGIN({\n        begin: /(?:u8?|U|L)?R\"([^()\\\\ ]{0,16})\\(/,\n        end: /\\)([^()\\\\ ]{0,16})\"/\n      })\n    ]\n  };\n\n  const NUMBERS = {\n    className: 'number',\n    variants: [\n      {\n        begin: '\\\\b(0b[01\\']+)'\n      },\n      {\n        begin: '(-?)\\\\b([\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)'\n      },\n      {\n        begin: '(-?)(\\\\b0[xX][a-fA-F0-9\\']+|(\\\\b[\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)([eE][-+]?[\\\\d\\']+)?)'\n      }\n    ],\n    relevance: 0\n  };\n\n  const PREPROCESSOR = {\n    className: 'meta',\n    begin: /#\\s*[a-z]+\\b/,\n    end: /$/,\n    keywords: {\n      'meta-keyword':\n        'if else elif endif define undef warning error line ' +\n        'pragma _Pragma ifdef ifndef include'\n    },\n    contains: [\n      {\n        begin: /\\\\\\n/,\n        relevance: 0\n      },\n      hljs.inherit(STRINGS, {\n        className: 'meta-string'\n      }),\n      {\n        className: 'meta-string',\n        begin: /<.*?>/\n      },\n      C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE\n    ]\n  };\n\n  const TITLE_MODE = {\n    className: 'title',\n    begin: optional(NAMESPACE_RE) + hljs.IDENT_RE,\n    relevance: 0\n  };\n\n  const FUNCTION_TITLE = optional(NAMESPACE_RE) + hljs.IDENT_RE + '\\\\s*\\\\(';\n\n  const CPP_KEYWORDS = {\n    keyword: 'int float while private char char8_t char16_t char32_t catch import module export virtual operator sizeof ' +\n      'dynamic_cast|10 typedef const_cast|10 const for static_cast|10 union namespace ' +\n      'unsigned long volatile static protected bool template mutable if public friend ' +\n      'do goto auto void enum else break extern using asm case typeid wchar_t ' +\n      'short reinterpret_cast|10 default double register explicit signed typename try this ' +\n      'switch continue inline delete alignas alignof constexpr consteval constinit decltype ' +\n      'concept co_await co_return co_yield requires ' +\n      'noexcept static_assert thread_local restrict final override ' +\n      'atomic_bool atomic_char atomic_schar ' +\n      'atomic_uchar atomic_short atomic_ushort atomic_int atomic_uint atomic_long atomic_ulong atomic_llong ' +\n      'atomic_ullong new throw return ' +\n      'and and_eq bitand bitor compl not not_eq or or_eq xor xor_eq',\n    built_in: 'std string wstring cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream ' +\n      'auto_ptr deque list queue stack vector map set pair bitset multiset multimap unordered_set ' +\n      'unordered_map unordered_multiset unordered_multimap priority_queue make_pair array shared_ptr abort terminate abs acos ' +\n      'asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp ' +\n      'fscanf future isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper ' +\n      'isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow ' +\n      'printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp ' +\n      'strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan ' +\n      'vfprintf vprintf vsprintf endl initializer_list unique_ptr _Bool complex _Complex imaginary _Imaginary',\n    literal: 'true false nullptr NULL'\n  };\n\n  const EXPRESSION_CONTAINS = [\n    PREPROCESSOR,\n    CPP_PRIMITIVE_TYPES,\n    C_LINE_COMMENT_MODE,\n    hljs.C_BLOCK_COMMENT_MODE,\n    NUMBERS,\n    STRINGS\n  ];\n\n  const EXPRESSION_CONTEXT = {\n    // This mode covers expression context where we can't expect a function\n    // definition and shouldn't highlight anything that looks like one:\n    // `return some()`, `else if()`, `(x*sum(1, 2))`\n    variants: [\n      {\n        begin: /=/,\n        end: /;/\n      },\n      {\n        begin: /\\(/,\n        end: /\\)/\n      },\n      {\n        beginKeywords: 'new throw return else',\n        end: /;/\n      }\n    ],\n    keywords: CPP_KEYWORDS,\n    contains: EXPRESSION_CONTAINS.concat([\n      {\n        begin: /\\(/,\n        end: /\\)/,\n        keywords: CPP_KEYWORDS,\n        contains: EXPRESSION_CONTAINS.concat([ 'self' ]),\n        relevance: 0\n      }\n    ]),\n    relevance: 0\n  };\n\n  const FUNCTION_DECLARATION = {\n    className: 'function',\n    begin: '(' + FUNCTION_TYPE_RE + '[\\\\*&\\\\s]+)+' + FUNCTION_TITLE,\n    returnBegin: true,\n    end: /[{;=]/,\n    excludeEnd: true,\n    keywords: CPP_KEYWORDS,\n    illegal: /[^\\w\\s\\*&:<>.]/,\n    contains: [\n      { // to prevent it from being confused as the function title\n        begin: DECLTYPE_AUTO_RE,\n        keywords: CPP_KEYWORDS,\n        relevance: 0\n      },\n      {\n        begin: FUNCTION_TITLE,\n        returnBegin: true,\n        contains: [ TITLE_MODE ],\n        relevance: 0\n      },\n      {\n        className: 'params',\n        begin: /\\(/,\n        end: /\\)/,\n        keywords: CPP_KEYWORDS,\n        relevance: 0,\n        contains: [\n          C_LINE_COMMENT_MODE,\n          hljs.C_BLOCK_COMMENT_MODE,\n          STRINGS,\n          NUMBERS,\n          CPP_PRIMITIVE_TYPES,\n          // Count matching parentheses.\n          {\n            begin: /\\(/,\n            end: /\\)/,\n            keywords: CPP_KEYWORDS,\n            relevance: 0,\n            contains: [\n              'self',\n              C_LINE_COMMENT_MODE,\n              hljs.C_BLOCK_COMMENT_MODE,\n              STRINGS,\n              NUMBERS,\n              CPP_PRIMITIVE_TYPES\n            ]\n          }\n        ]\n      },\n      CPP_PRIMITIVE_TYPES,\n      C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      PREPROCESSOR\n    ]\n  };\n\n  return {\n    name: \"C\",\n    aliases: [\n      'h'\n    ],\n    keywords: CPP_KEYWORDS,\n    // Until differentiations are added between `c` and `cpp`, `c` will\n    // not be auto-detected to avoid auto-detect conflicts between C and C++\n    disableAutodetect: true,\n    illegal: '</',\n    contains: [].concat(\n      EXPRESSION_CONTEXT,\n      FUNCTION_DECLARATION,\n      EXPRESSION_CONTAINS,\n      [\n        PREPROCESSOR,\n        { // containers: ie, `vector <int> rooms (9);`\n          begin: '\\\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array)\\\\s*<',\n          end: '>',\n          keywords: CPP_KEYWORDS,\n          contains: [\n            'self',\n            CPP_PRIMITIVE_TYPES\n          ]\n        },\n        {\n          begin: hljs.IDENT_RE + '::',\n          keywords: CPP_KEYWORDS\n        },\n        {\n          className: 'class',\n          beginKeywords: 'enum class struct union',\n          end: /[{;:<>=]/,\n          contains: [\n            {\n              beginKeywords: \"final class struct\"\n            },\n            hljs.TITLE_MODE\n          ]\n        }\n      ]),\n    exports: {\n      preprocessor: PREPROCESSOR,\n      strings: STRINGS,\n      keywords: CPP_KEYWORDS\n    }\n  };\n}\n\nmodule.exports = c;\n"]},"metadata":{},"sourceType":"script"}