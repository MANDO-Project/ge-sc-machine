{"ast":null,"code":"/*\nLanguage: D\nAuthor: Aleksandar Ruzicic <aleksandar@ruzicic.info>\nDescription: D is a language with C-like syntax and static typing. It pragmatically combines efficiency, control, and modeling power, with safety and programmer productivity.\nVersion: 1.0a\nWebsite: https://dlang.org\nDate: 2012-04-08\n*/\n\n/**\n * Known issues:\n *\n * - invalid hex string literals will be recognized as a double quoted strings\n *   but 'x' at the beginning of string will not be matched\n *\n * - delimited string literals are not checked for matching end delimiter\n *   (not possible to do with js regexp)\n *\n * - content of token string is colored as a string (i.e. no keyword coloring inside a token string)\n *   also, content of token string is not validated to contain only valid D tokens\n *\n * - special token sequence rule is not strictly following D grammar (anything following #line\n *   up to the end of line is matched as special token sequence)\n */\n\n/** @type LanguageFn */\nfunction d(hljs) {\n  /**\n   * Language keywords\n   *\n   * @type {Object}\n   */\n  const D_KEYWORDS = {\n    $pattern: hljs.UNDERSCORE_IDENT_RE,\n    keyword: 'abstract alias align asm assert auto body break byte case cast catch class ' + 'const continue debug default delete deprecated do else enum export extern final ' + 'finally for foreach foreach_reverse|10 goto if immutable import in inout int ' + 'interface invariant is lazy macro mixin module new nothrow out override package ' + 'pragma private protected public pure ref return scope shared static struct ' + 'super switch synchronized template this throw try typedef typeid typeof union ' + 'unittest version void volatile while with __FILE__ __LINE__ __gshared|10 ' + '__thread __traits __DATE__ __EOF__ __TIME__ __TIMESTAMP__ __VENDOR__ __VERSION__',\n    built_in: 'bool cdouble cent cfloat char creal dchar delegate double dstring float function ' + 'idouble ifloat ireal long real short string ubyte ucent uint ulong ushort wchar ' + 'wstring',\n    literal: 'false null true'\n  };\n  /**\n   * Number literal regexps\n   *\n   * @type {String}\n   */\n\n  const decimal_integer_re = '(0|[1-9][\\\\d_]*)';\n  const decimal_integer_nosus_re = '(0|[1-9][\\\\d_]*|\\\\d[\\\\d_]*|[\\\\d_]+?\\\\d)';\n  const binary_integer_re = '0[bB][01_]+';\n  const hexadecimal_digits_re = '([\\\\da-fA-F][\\\\da-fA-F_]*|_[\\\\da-fA-F][\\\\da-fA-F_]*)';\n  const hexadecimal_integer_re = '0[xX]' + hexadecimal_digits_re;\n  const decimal_exponent_re = '([eE][+-]?' + decimal_integer_nosus_re + ')';\n  const decimal_float_re = '(' + decimal_integer_nosus_re + '(\\\\.\\\\d*|' + decimal_exponent_re + ')|' + '\\\\d+\\\\.' + decimal_integer_nosus_re + '|' + '\\\\.' + decimal_integer_re + decimal_exponent_re + '?' + ')';\n  const hexadecimal_float_re = '(0[xX](' + hexadecimal_digits_re + '\\\\.' + hexadecimal_digits_re + '|' + '\\\\.?' + hexadecimal_digits_re + ')[pP][+-]?' + decimal_integer_nosus_re + ')';\n  const integer_re = '(' + decimal_integer_re + '|' + binary_integer_re + '|' + hexadecimal_integer_re + ')';\n  const float_re = '(' + hexadecimal_float_re + '|' + decimal_float_re + ')';\n  /**\n   * Escape sequence supported in D string and character literals\n   *\n   * @type {String}\n   */\n\n  const escape_sequence_re = '\\\\\\\\(' + '[\\'\"\\\\?\\\\\\\\abfnrtv]|' + // common escapes\n  'u[\\\\dA-Fa-f]{4}|' + // four hex digit unicode codepoint\n  '[0-7]{1,3}|' + // one to three octal digit ascii char code\n  'x[\\\\dA-Fa-f]{2}|' + // two hex digit ascii char code\n  'U[\\\\dA-Fa-f]{8}' + // eight hex digit unicode codepoint\n  ')|' + '&[a-zA-Z\\\\d]{2,};'; // named character entity\n\n  /**\n   * D integer number literals\n   *\n   * @type {Object}\n   */\n\n  const D_INTEGER_MODE = {\n    className: 'number',\n    begin: '\\\\b' + integer_re + '(L|u|U|Lu|LU|uL|UL)?',\n    relevance: 0\n  };\n  /**\n   * [D_FLOAT_MODE description]\n   * @type {Object}\n   */\n\n  const D_FLOAT_MODE = {\n    className: 'number',\n    begin: '\\\\b(' + float_re + '([fF]|L|i|[fF]i|Li)?|' + integer_re + '(i|[fF]i|Li)' + ')',\n    relevance: 0\n  };\n  /**\n   * D character literal\n   *\n   * @type {Object}\n   */\n\n  const D_CHARACTER_MODE = {\n    className: 'string',\n    begin: '\\'(' + escape_sequence_re + '|.)',\n    end: '\\'',\n    illegal: '.'\n  };\n  /**\n   * D string escape sequence\n   *\n   * @type {Object}\n   */\n\n  const D_ESCAPE_SEQUENCE = {\n    begin: escape_sequence_re,\n    relevance: 0\n  };\n  /**\n   * D double quoted string literal\n   *\n   * @type {Object}\n   */\n\n  const D_STRING_MODE = {\n    className: 'string',\n    begin: '\"',\n    contains: [D_ESCAPE_SEQUENCE],\n    end: '\"[cwd]?'\n  };\n  /**\n   * D wysiwyg and delimited string literals\n   *\n   * @type {Object}\n   */\n\n  const D_WYSIWYG_DELIMITED_STRING_MODE = {\n    className: 'string',\n    begin: '[rq]\"',\n    end: '\"[cwd]?',\n    relevance: 5\n  };\n  /**\n   * D alternate wysiwyg string literal\n   *\n   * @type {Object}\n   */\n\n  const D_ALTERNATE_WYSIWYG_STRING_MODE = {\n    className: 'string',\n    begin: '`',\n    end: '`[cwd]?'\n  };\n  /**\n   * D hexadecimal string literal\n   *\n   * @type {Object}\n   */\n\n  const D_HEX_STRING_MODE = {\n    className: 'string',\n    begin: 'x\"[\\\\da-fA-F\\\\s\\\\n\\\\r]*\"[cwd]?',\n    relevance: 10\n  };\n  /**\n   * D delimited string literal\n   *\n   * @type {Object}\n   */\n\n  const D_TOKEN_STRING_MODE = {\n    className: 'string',\n    begin: 'q\"\\\\{',\n    end: '\\\\}\"'\n  };\n  /**\n   * Hashbang support\n   *\n   * @type {Object}\n   */\n\n  const D_HASHBANG_MODE = {\n    className: 'meta',\n    begin: '^#!',\n    end: '$',\n    relevance: 5\n  };\n  /**\n   * D special token sequence\n   *\n   * @type {Object}\n   */\n\n  const D_SPECIAL_TOKEN_SEQUENCE_MODE = {\n    className: 'meta',\n    begin: '#(line)',\n    end: '$',\n    relevance: 5\n  };\n  /**\n   * D attributes\n   *\n   * @type {Object}\n   */\n\n  const D_ATTRIBUTE_MODE = {\n    className: 'keyword',\n    begin: '@[a-zA-Z_][a-zA-Z_\\\\d]*'\n  };\n  /**\n   * D nesting comment\n   *\n   * @type {Object}\n   */\n\n  const D_NESTING_COMMENT_MODE = hljs.COMMENT('\\\\/\\\\+', '\\\\+\\\\/', {\n    contains: ['self'],\n    relevance: 10\n  });\n  return {\n    name: 'D',\n    keywords: D_KEYWORDS,\n    contains: [hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, D_NESTING_COMMENT_MODE, D_HEX_STRING_MODE, D_STRING_MODE, D_WYSIWYG_DELIMITED_STRING_MODE, D_ALTERNATE_WYSIWYG_STRING_MODE, D_TOKEN_STRING_MODE, D_FLOAT_MODE, D_INTEGER_MODE, D_CHARACTER_MODE, D_HASHBANG_MODE, D_SPECIAL_TOKEN_SEQUENCE_MODE, D_ATTRIBUTE_MODE]\n  };\n}\n\nmodule.exports = d;","map":{"version":3,"sources":["C:/Users/Admin/Music/MANDO/ge-sc-machine/sco_frontend/node_modules/highlight.js/lib/languages/d.js"],"names":["d","hljs","D_KEYWORDS","$pattern","UNDERSCORE_IDENT_RE","keyword","built_in","literal","decimal_integer_re","decimal_integer_nosus_re","binary_integer_re","hexadecimal_digits_re","hexadecimal_integer_re","decimal_exponent_re","decimal_float_re","hexadecimal_float_re","integer_re","float_re","escape_sequence_re","D_INTEGER_MODE","className","begin","relevance","D_FLOAT_MODE","D_CHARACTER_MODE","end","illegal","D_ESCAPE_SEQUENCE","D_STRING_MODE","contains","D_WYSIWYG_DELIMITED_STRING_MODE","D_ALTERNATE_WYSIWYG_STRING_MODE","D_HEX_STRING_MODE","D_TOKEN_STRING_MODE","D_HASHBANG_MODE","D_SPECIAL_TOKEN_SEQUENCE_MODE","D_ATTRIBUTE_MODE","D_NESTING_COMMENT_MODE","COMMENT","name","keywords","C_LINE_COMMENT_MODE","C_BLOCK_COMMENT_MODE","module","exports"],"mappings":"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","sourcesContent":["/*\nLanguage: D\nAuthor: Aleksandar Ruzicic <aleksandar@ruzicic.info>\nDescription: D is a language with C-like syntax and static typing. It pragmatically combines efficiency, control, and modeling power, with safety and programmer productivity.\nVersion: 1.0a\nWebsite: https://dlang.org\nDate: 2012-04-08\n*/\n\n/**\n * Known issues:\n *\n * - invalid hex string literals will be recognized as a double quoted strings\n *   but 'x' at the beginning of string will not be matched\n *\n * - delimited string literals are not checked for matching end delimiter\n *   (not possible to do with js regexp)\n *\n * - content of token string is colored as a string (i.e. no keyword coloring inside a token string)\n *   also, content of token string is not validated to contain only valid D tokens\n *\n * - special token sequence rule is not strictly following D grammar (anything following #line\n *   up to the end of line is matched as special token sequence)\n */\n\n/** @type LanguageFn */\nfunction d(hljs) {\n  /**\n   * Language keywords\n   *\n   * @type {Object}\n   */\n  const D_KEYWORDS = {\n    $pattern: hljs.UNDERSCORE_IDENT_RE,\n    keyword:\n      'abstract alias align asm assert auto body break byte case cast catch class ' +\n      'const continue debug default delete deprecated do else enum export extern final ' +\n      'finally for foreach foreach_reverse|10 goto if immutable import in inout int ' +\n      'interface invariant is lazy macro mixin module new nothrow out override package ' +\n      'pragma private protected public pure ref return scope shared static struct ' +\n      'super switch synchronized template this throw try typedef typeid typeof union ' +\n      'unittest version void volatile while with __FILE__ __LINE__ __gshared|10 ' +\n      '__thread __traits __DATE__ __EOF__ __TIME__ __TIMESTAMP__ __VENDOR__ __VERSION__',\n    built_in:\n      'bool cdouble cent cfloat char creal dchar delegate double dstring float function ' +\n      'idouble ifloat ireal long real short string ubyte ucent uint ulong ushort wchar ' +\n      'wstring',\n    literal:\n      'false null true'\n  };\n\n  /**\n   * Number literal regexps\n   *\n   * @type {String}\n   */\n  const decimal_integer_re = '(0|[1-9][\\\\d_]*)';\n  const decimal_integer_nosus_re = '(0|[1-9][\\\\d_]*|\\\\d[\\\\d_]*|[\\\\d_]+?\\\\d)';\n  const binary_integer_re = '0[bB][01_]+';\n  const hexadecimal_digits_re = '([\\\\da-fA-F][\\\\da-fA-F_]*|_[\\\\da-fA-F][\\\\da-fA-F_]*)';\n  const hexadecimal_integer_re = '0[xX]' + hexadecimal_digits_re;\n\n  const decimal_exponent_re = '([eE][+-]?' + decimal_integer_nosus_re + ')';\n  const decimal_float_re = '(' + decimal_integer_nosus_re + '(\\\\.\\\\d*|' + decimal_exponent_re + ')|' +\n                '\\\\d+\\\\.' + decimal_integer_nosus_re + '|' +\n                '\\\\.' + decimal_integer_re + decimal_exponent_re + '?' +\n              ')';\n  const hexadecimal_float_re = '(0[xX](' +\n                  hexadecimal_digits_re + '\\\\.' + hexadecimal_digits_re + '|' +\n                  '\\\\.?' + hexadecimal_digits_re +\n                 ')[pP][+-]?' + decimal_integer_nosus_re + ')';\n\n  const integer_re = '(' +\n      decimal_integer_re + '|' +\n      binary_integer_re + '|' +\n       hexadecimal_integer_re +\n    ')';\n\n  const float_re = '(' +\n      hexadecimal_float_re + '|' +\n      decimal_float_re +\n    ')';\n\n  /**\n   * Escape sequence supported in D string and character literals\n   *\n   * @type {String}\n   */\n  const escape_sequence_re = '\\\\\\\\(' +\n              '[\\'\"\\\\?\\\\\\\\abfnrtv]|' + // common escapes\n              'u[\\\\dA-Fa-f]{4}|' + // four hex digit unicode codepoint\n              '[0-7]{1,3}|' + // one to three octal digit ascii char code\n              'x[\\\\dA-Fa-f]{2}|' + // two hex digit ascii char code\n              'U[\\\\dA-Fa-f]{8}' + // eight hex digit unicode codepoint\n              ')|' +\n              '&[a-zA-Z\\\\d]{2,};'; // named character entity\n\n  /**\n   * D integer number literals\n   *\n   * @type {Object}\n   */\n  const D_INTEGER_MODE = {\n    className: 'number',\n    begin: '\\\\b' + integer_re + '(L|u|U|Lu|LU|uL|UL)?',\n    relevance: 0\n  };\n\n  /**\n   * [D_FLOAT_MODE description]\n   * @type {Object}\n   */\n  const D_FLOAT_MODE = {\n    className: 'number',\n    begin: '\\\\b(' +\n        float_re + '([fF]|L|i|[fF]i|Li)?|' +\n        integer_re + '(i|[fF]i|Li)' +\n      ')',\n    relevance: 0\n  };\n\n  /**\n   * D character literal\n   *\n   * @type {Object}\n   */\n  const D_CHARACTER_MODE = {\n    className: 'string',\n    begin: '\\'(' + escape_sequence_re + '|.)',\n    end: '\\'',\n    illegal: '.'\n  };\n\n  /**\n   * D string escape sequence\n   *\n   * @type {Object}\n   */\n  const D_ESCAPE_SEQUENCE = {\n    begin: escape_sequence_re,\n    relevance: 0\n  };\n\n  /**\n   * D double quoted string literal\n   *\n   * @type {Object}\n   */\n  const D_STRING_MODE = {\n    className: 'string',\n    begin: '\"',\n    contains: [D_ESCAPE_SEQUENCE],\n    end: '\"[cwd]?'\n  };\n\n  /**\n   * D wysiwyg and delimited string literals\n   *\n   * @type {Object}\n   */\n  const D_WYSIWYG_DELIMITED_STRING_MODE = {\n    className: 'string',\n    begin: '[rq]\"',\n    end: '\"[cwd]?',\n    relevance: 5\n  };\n\n  /**\n   * D alternate wysiwyg string literal\n   *\n   * @type {Object}\n   */\n  const D_ALTERNATE_WYSIWYG_STRING_MODE = {\n    className: 'string',\n    begin: '`',\n    end: '`[cwd]?'\n  };\n\n  /**\n   * D hexadecimal string literal\n   *\n   * @type {Object}\n   */\n  const D_HEX_STRING_MODE = {\n    className: 'string',\n    begin: 'x\"[\\\\da-fA-F\\\\s\\\\n\\\\r]*\"[cwd]?',\n    relevance: 10\n  };\n\n  /**\n   * D delimited string literal\n   *\n   * @type {Object}\n   */\n  const D_TOKEN_STRING_MODE = {\n    className: 'string',\n    begin: 'q\"\\\\{',\n    end: '\\\\}\"'\n  };\n\n  /**\n   * Hashbang support\n   *\n   * @type {Object}\n   */\n  const D_HASHBANG_MODE = {\n    className: 'meta',\n    begin: '^#!',\n    end: '$',\n    relevance: 5\n  };\n\n  /**\n   * D special token sequence\n   *\n   * @type {Object}\n   */\n  const D_SPECIAL_TOKEN_SEQUENCE_MODE = {\n    className: 'meta',\n    begin: '#(line)',\n    end: '$',\n    relevance: 5\n  };\n\n  /**\n   * D attributes\n   *\n   * @type {Object}\n   */\n  const D_ATTRIBUTE_MODE = {\n    className: 'keyword',\n    begin: '@[a-zA-Z_][a-zA-Z_\\\\d]*'\n  };\n\n  /**\n   * D nesting comment\n   *\n   * @type {Object}\n   */\n  const D_NESTING_COMMENT_MODE = hljs.COMMENT(\n    '\\\\/\\\\+',\n    '\\\\+\\\\/',\n    {\n      contains: ['self'],\n      relevance: 10\n    }\n  );\n\n  return {\n    name: 'D',\n    keywords: D_KEYWORDS,\n    contains: [\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      D_NESTING_COMMENT_MODE,\n      D_HEX_STRING_MODE,\n      D_STRING_MODE,\n      D_WYSIWYG_DELIMITED_STRING_MODE,\n      D_ALTERNATE_WYSIWYG_STRING_MODE,\n      D_TOKEN_STRING_MODE,\n      D_FLOAT_MODE,\n      D_INTEGER_MODE,\n      D_CHARACTER_MODE,\n      D_HASHBANG_MODE,\n      D_SPECIAL_TOKEN_SEQUENCE_MODE,\n      D_ATTRIBUTE_MODE\n    ]\n  };\n}\n\nmodule.exports = d;\n"]},"metadata":{},"sourceType":"script"}