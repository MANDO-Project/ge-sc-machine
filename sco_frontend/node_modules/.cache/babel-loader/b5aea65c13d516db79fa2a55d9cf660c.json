{"ast":null,"code":"import constant from \"./constant.js\";\nexport default function (radius, x, y, z) {\n  var nodes,\n      nDim,\n      strength = constant(0.1),\n      strengths,\n      radiuses;\n  if (typeof radius !== \"function\") radius = constant(+radius);\n  if (x == null) x = 0;\n  if (y == null) y = 0;\n  if (z == null) z = 0;\n\n  function force(alpha) {\n    for (var i = 0, n = nodes.length; i < n; ++i) {\n      var node = nodes[i],\n          dx = node.x - x || 1e-6,\n          dy = (node.y || 0) - y || 1e-6,\n          dz = (node.z || 0) - z || 1e-6,\n          r = Math.sqrt(dx * dx + dy * dy + dz * dz),\n          k = (radiuses[i] - r) * strengths[i] * alpha / r;\n      node.vx += dx * k;\n\n      if (nDim > 1) {\n        node.vy += dy * k;\n      }\n\n      if (nDim > 2) {\n        node.vz += dz * k;\n      }\n    }\n  }\n\n  function initialize() {\n    if (!nodes) return;\n    var i,\n        n = nodes.length;\n    strengths = new Array(n);\n    radiuses = new Array(n);\n\n    for (i = 0; i < n; ++i) {\n      radiuses[i] = +radius(nodes[i], i, nodes);\n      strengths[i] = isNaN(radiuses[i]) ? 0 : +strength(nodes[i], i, nodes);\n    }\n  }\n\n  force.initialize = function (initNodes) {\n    nodes = initNodes;\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    nDim = args.find(function (arg) {\n      return [1, 2, 3].includes(arg);\n    }) || 2;\n    initialize();\n  };\n\n  force.strength = function (_) {\n    return arguments.length ? (strength = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : strength;\n  };\n\n  force.radius = function (_) {\n    return arguments.length ? (radius = typeof _ === \"function\" ? _ : constant(+_), initialize(), force) : radius;\n  };\n\n  force.x = function (_) {\n    return arguments.length ? (x = +_, force) : x;\n  };\n\n  force.y = function (_) {\n    return arguments.length ? (y = +_, force) : y;\n  };\n\n  force.z = function (_) {\n    return arguments.length ? (z = +_, force) : z;\n  };\n\n  return force;\n}","map":null,"metadata":{},"sourceType":"module"}