{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Admin\\\\Music\\\\MANDO\\\\ge-sc-machine\\\\sco_frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Admin\\\\Music\\\\MANDO\\\\ge-sc-machine\\\\sco_frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { BufferGeometry, Clock, Float32BufferAttribute, Mesh, OrthographicCamera, Vector2, WebGLRenderTarget } from 'three';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { ShaderPass } from './ShaderPass.js';\nimport { MaskPass } from './MaskPass.js';\nimport { ClearMaskPass } from './MaskPass.js';\n\nvar EffectComposer = /*#__PURE__*/function () {\n  function EffectComposer(renderer, renderTarget) {\n    _classCallCheck(this, EffectComposer);\n\n    this.renderer = renderer;\n\n    if (renderTarget === undefined) {\n      var size = renderer.getSize(new Vector2());\n      this._pixelRatio = renderer.getPixelRatio();\n      this._width = size.width;\n      this._height = size.height;\n      renderTarget = new WebGLRenderTarget(this._width * this._pixelRatio, this._height * this._pixelRatio);\n      renderTarget.texture.name = 'EffectComposer.rt1';\n    } else {\n      this._pixelRatio = 1;\n      this._width = renderTarget.width;\n      this._height = renderTarget.height;\n    }\n\n    this.renderTarget1 = renderTarget;\n    this.renderTarget2 = renderTarget.clone();\n    this.renderTarget2.texture.name = 'EffectComposer.rt2';\n    this.writeBuffer = this.renderTarget1;\n    this.readBuffer = this.renderTarget2;\n    this.renderToScreen = true;\n    this.passes = []; // dependencies\n\n    if (CopyShader === undefined) {\n      console.error('THREE.EffectComposer relies on CopyShader');\n    }\n\n    if (ShaderPass === undefined) {\n      console.error('THREE.EffectComposer relies on ShaderPass');\n    }\n\n    this.copyPass = new ShaderPass(CopyShader);\n    this.clock = new Clock();\n  }\n\n  _createClass(EffectComposer, [{\n    key: \"swapBuffers\",\n    value: function swapBuffers() {\n      var tmp = this.readBuffer;\n      this.readBuffer = this.writeBuffer;\n      this.writeBuffer = tmp;\n    }\n  }, {\n    key: \"addPass\",\n    value: function addPass(pass) {\n      this.passes.push(pass);\n      pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n    }\n  }, {\n    key: \"insertPass\",\n    value: function insertPass(pass, index) {\n      this.passes.splice(index, 0, pass);\n      pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n    }\n  }, {\n    key: \"removePass\",\n    value: function removePass(pass) {\n      var index = this.passes.indexOf(pass);\n\n      if (index !== -1) {\n        this.passes.splice(index, 1);\n      }\n    }\n  }, {\n    key: \"isLastEnabledPass\",\n    value: function isLastEnabledPass(passIndex) {\n      for (var i = passIndex + 1; i < this.passes.length; i++) {\n        if (this.passes[i].enabled) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"render\",\n    value: function render(deltaTime) {\n      // deltaTime value is in seconds\n      if (deltaTime === undefined) {\n        deltaTime = this.clock.getDelta();\n      }\n\n      var currentRenderTarget = this.renderer.getRenderTarget();\n      var maskActive = false;\n\n      for (var i = 0, il = this.passes.length; i < il; i++) {\n        var pass = this.passes[i];\n        if (pass.enabled === false) continue;\n        pass.renderToScreen = this.renderToScreen && this.isLastEnabledPass(i);\n        pass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive);\n\n        if (pass.needsSwap) {\n          if (maskActive) {\n            var context = this.renderer.getContext();\n            var stencil = this.renderer.state.buffers.stencil; //context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n\n            stencil.setFunc(context.NOTEQUAL, 1, 0xffffffff);\n            this.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime); //context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n\n            stencil.setFunc(context.EQUAL, 1, 0xffffffff);\n          }\n\n          this.swapBuffers();\n        }\n\n        if (MaskPass !== undefined) {\n          if (pass instanceof MaskPass) {\n            maskActive = true;\n          } else if (pass instanceof ClearMaskPass) {\n            maskActive = false;\n          }\n        }\n      }\n\n      this.renderer.setRenderTarget(currentRenderTarget);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset(renderTarget) {\n      if (renderTarget === undefined) {\n        var size = this.renderer.getSize(new Vector2());\n        this._pixelRatio = this.renderer.getPixelRatio();\n        this._width = size.width;\n        this._height = size.height;\n        renderTarget = this.renderTarget1.clone();\n        renderTarget.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);\n      }\n\n      this.renderTarget1.dispose();\n      this.renderTarget2.dispose();\n      this.renderTarget1 = renderTarget;\n      this.renderTarget2 = renderTarget.clone();\n      this.writeBuffer = this.renderTarget1;\n      this.readBuffer = this.renderTarget2;\n    }\n  }, {\n    key: \"setSize\",\n    value: function setSize(width, height) {\n      this._width = width;\n      this._height = height;\n      var effectiveWidth = this._width * this._pixelRatio;\n      var effectiveHeight = this._height * this._pixelRatio;\n      this.renderTarget1.setSize(effectiveWidth, effectiveHeight);\n      this.renderTarget2.setSize(effectiveWidth, effectiveHeight);\n\n      for (var i = 0; i < this.passes.length; i++) {\n        this.passes[i].setSize(effectiveWidth, effectiveHeight);\n      }\n    }\n  }, {\n    key: \"setPixelRatio\",\n    value: function setPixelRatio(pixelRatio) {\n      this._pixelRatio = pixelRatio;\n      this.setSize(this._width, this._height);\n    }\n  }]);\n\n  return EffectComposer;\n}();\n\nvar Pass = /*#__PURE__*/function () {\n  function Pass() {\n    _classCallCheck(this, Pass);\n\n    // if set to true, the pass is processed by the composer\n    this.enabled = true; // if set to true, the pass indicates to swap read and write buffer after rendering\n\n    this.needsSwap = true; // if set to true, the pass clears its buffer before rendering\n\n    this.clear = false; // if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\n    this.renderToScreen = false;\n  }\n\n  _createClass(Pass, [{\n    key: \"setSize\",\n    value: function setSize() {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      console.error('THREE.Pass: .render() must be implemented in derived pass.');\n    }\n  }]);\n\n  return Pass;\n}(); // Helper for passes that need to fill the viewport with a single quad.\n\n\nvar _camera = new OrthographicCamera(-1, 1, 1, -1, 0, 1); // https://github.com/mrdoob/three.js/pull/21358\n\n\nvar _geometry = new BufferGeometry();\n\n_geometry.setAttribute('position', new Float32BufferAttribute([-1, 3, 0, -1, -1, 0, 3, -1, 0], 3));\n\n_geometry.setAttribute('uv', new Float32BufferAttribute([0, 2, 0, 0, 2, 0], 2));\n\nvar FullScreenQuad = /*#__PURE__*/function () {\n  function FullScreenQuad(material) {\n    _classCallCheck(this, FullScreenQuad);\n\n    this._mesh = new Mesh(_geometry, material);\n  }\n\n  _createClass(FullScreenQuad, [{\n    key: \"dispose\",\n    value: function dispose() {\n      this._mesh.geometry.dispose();\n    }\n  }, {\n    key: \"render\",\n    value: function render(renderer) {\n      renderer.render(this._mesh, _camera);\n    }\n  }, {\n    key: \"material\",\n    get: function get() {\n      return this._mesh.material;\n    },\n    set: function set(value) {\n      this._mesh.material = value;\n    }\n  }]);\n\n  return FullScreenQuad;\n}();\n\nexport { EffectComposer, Pass, FullScreenQuad };","map":null,"metadata":{},"sourceType":"module"}