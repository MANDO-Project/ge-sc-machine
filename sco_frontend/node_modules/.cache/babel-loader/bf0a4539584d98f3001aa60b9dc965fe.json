{"ast":null,"code":"var fetchScript = require('../../lib/fetch-script')();\n\nvar LOADER_SRC = 'https://cdn.jsdelivr.net/gh/mrdoob/three.js@r86/examples/js/loaders/GLTFLoader.js';\n\nvar loadLoader = function () {\n  var promise;\n  return function () {\n    promise = promise || fetchScript(LOADER_SRC);\n    return promise;\n  };\n}();\n/**\n * Legacy loader for glTF 1.0 models.\n * Asynchronously loads THREE.GLTFLoader from jsdelivr.\n */\n\n\nmodule.exports = AFRAME.registerComponent('gltf-model-legacy', {\n  schema: {\n    type: 'model'\n  },\n  init: function init() {\n    var _this = this;\n\n    this.model = null;\n    this.loader = null;\n    this.loaderPromise = loadLoader().then(function () {\n      _this.loader = new THREE.GLTFLoader();\n\n      _this.loader.setCrossOrigin('Anonymous');\n    });\n  },\n  update: function update() {\n    var _this2 = this;\n\n    var self = this;\n    var el = this.el;\n    var src = this.data;\n\n    if (!src) {\n      return;\n    }\n\n    this.remove();\n    this.loaderPromise.then(function () {\n      _this2.loader.load(src, function gltfLoaded(gltfModel) {\n        self.model = gltfModel.scene;\n        self.model.animations = gltfModel.animations;\n        el.setObject3D('mesh', self.model);\n        el.emit('model-loaded', {\n          format: 'gltf',\n          model: self.model\n        });\n      });\n    });\n  },\n  remove: function remove() {\n    if (!this.model) {\n      return;\n    }\n\n    this.el.removeObject3D('mesh');\n  }\n});","map":null,"metadata":{},"sourceType":"script"}