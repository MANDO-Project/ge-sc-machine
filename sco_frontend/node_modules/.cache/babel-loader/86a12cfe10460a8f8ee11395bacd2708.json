{"ast":null,"code":"export default function (x, y, z) {\n  if (isNaN(x = +x) || isNaN(y = +y) || isNaN(z = +z)) return this; // ignore invalid points\n\n  var x0 = this._x0,\n      y0 = this._y0,\n      z0 = this._z0,\n      x1 = this._x1,\n      y1 = this._y1,\n      z1 = this._z1; // If the octree has no extent, initialize them.\n  // Integer extent are necessary so that if we later double the extent,\n  // the existing octant boundaries donâ€™t change due to floating point error!\n\n  if (isNaN(x0)) {\n    x1 = (x0 = Math.floor(x)) + 1;\n    y1 = (y0 = Math.floor(y)) + 1;\n    z1 = (z0 = Math.floor(z)) + 1;\n  } // Otherwise, double repeatedly to cover.\n  else {\n    var t = x1 - x0 || 1,\n        node = this._root,\n        parent,\n        i;\n\n    while (x0 > x || x >= x1 || y0 > y || y >= y1 || z0 > z || z >= z1) {\n      i = (z < z0) << 2 | (y < y0) << 1 | x < x0;\n      parent = new Array(8), parent[i] = node, node = parent, t *= 2;\n\n      switch (i) {\n        case 0:\n          x1 = x0 + t, y1 = y0 + t, z1 = z0 + t;\n          break;\n\n        case 1:\n          x0 = x1 - t, y1 = y0 + t, z1 = z0 + t;\n          break;\n\n        case 2:\n          x1 = x0 + t, y0 = y1 - t, z1 = z0 + t;\n          break;\n\n        case 3:\n          x0 = x1 - t, y0 = y1 - t, z1 = z0 + t;\n          break;\n\n        case 4:\n          x1 = x0 + t, y1 = y0 + t, z0 = z1 - t;\n          break;\n\n        case 5:\n          x0 = x1 - t, y1 = y0 + t, z0 = z1 - t;\n          break;\n\n        case 6:\n          x1 = x0 + t, y0 = y1 - t, z0 = z1 - t;\n          break;\n\n        case 7:\n          x0 = x1 - t, y0 = y1 - t, z0 = z1 - t;\n          break;\n      }\n    }\n\n    if (this._root && this._root.length) this._root = node;\n  }\n\n  this._x0 = x0;\n  this._y0 = y0;\n  this._z0 = z0;\n  this._x1 = x1;\n  this._y1 = y1;\n  this._z1 = z1;\n  return this;\n}","map":null,"metadata":{},"sourceType":"module"}