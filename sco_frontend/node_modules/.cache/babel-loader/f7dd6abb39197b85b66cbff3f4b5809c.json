{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Admin\\\\Music\\\\MANDO\\\\ge-sc-machine\\\\sco_frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Admin\\\\Music\\\\MANDO\\\\ge-sc-machine\\\\sco_frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Admin\\\\Music\\\\MANDO\\\\ge-sc-machine\\\\sco_frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Admin\\\\Music\\\\MANDO\\\\ge-sc-machine\\\\sco_frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\Admin\\\\Music\\\\MANDO\\\\ge-sc-machine\\\\sco_frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport { EventDispatcher, Quaternion, Vector3 } from 'three';\nvar _changeEvent = {\n  type: 'change'\n};\n\nvar FlyControls = /*#__PURE__*/function (_EventDispatcher) {\n  _inherits(FlyControls, _EventDispatcher);\n\n  function FlyControls(object, domElement) {\n    var _this;\n\n    _classCallCheck(this, FlyControls);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FlyControls).call(this));\n\n    if (domElement === undefined) {\n      console.warn('THREE.FlyControls: The second parameter \"domElement\" is now mandatory.');\n      domElement = document;\n    }\n\n    _this.object = object;\n    _this.domElement = domElement; // API\n\n    _this.movementSpeed = 1.0;\n    _this.rollSpeed = 0.005;\n    _this.dragToLook = false;\n    _this.autoForward = false; // disable default target object behavior\n    // internals\n\n    var scope = _assertThisInitialized(_assertThisInitialized(_this));\n\n    var EPS = 0.000001;\n    var lastQuaternion = new Quaternion();\n    var lastPosition = new Vector3();\n    _this.tmpQuaternion = new Quaternion();\n    _this.mouseStatus = 0;\n    _this.moveState = {\n      up: 0,\n      down: 0,\n      left: 0,\n      right: 0,\n      forward: 0,\n      back: 0,\n      pitchUp: 0,\n      pitchDown: 0,\n      yawLeft: 0,\n      yawRight: 0,\n      rollLeft: 0,\n      rollRight: 0\n    };\n    _this.moveVector = new Vector3(0, 0, 0);\n    _this.rotationVector = new Vector3(0, 0, 0);\n\n    _this.keydown = function (event) {\n      if (event.altKey) {\n        return;\n      }\n\n      switch (event.code) {\n        case 'ShiftLeft':\n        case 'ShiftRight':\n          this.movementSpeedMultiplier = .1;\n          break;\n\n        case 'KeyW':\n          this.moveState.forward = 1;\n          break;\n\n        case 'KeyS':\n          this.moveState.back = 1;\n          break;\n\n        case 'KeyA':\n          this.moveState.left = 1;\n          break;\n\n        case 'KeyD':\n          this.moveState.right = 1;\n          break;\n\n        case 'KeyR':\n          this.moveState.up = 1;\n          break;\n\n        case 'KeyF':\n          this.moveState.down = 1;\n          break;\n\n        case 'ArrowUp':\n          this.moveState.pitchUp = 1;\n          break;\n\n        case 'ArrowDown':\n          this.moveState.pitchDown = 1;\n          break;\n\n        case 'ArrowLeft':\n          this.moveState.yawLeft = 1;\n          break;\n\n        case 'ArrowRight':\n          this.moveState.yawRight = 1;\n          break;\n\n        case 'KeyQ':\n          this.moveState.rollLeft = 1;\n          break;\n\n        case 'KeyE':\n          this.moveState.rollRight = 1;\n          break;\n      }\n\n      this.updateMovementVector();\n      this.updateRotationVector();\n    };\n\n    _this.keyup = function (event) {\n      switch (event.code) {\n        case 'ShiftLeft':\n        case 'ShiftRight':\n          this.movementSpeedMultiplier = 1;\n          break;\n\n        case 'KeyW':\n          this.moveState.forward = 0;\n          break;\n\n        case 'KeyS':\n          this.moveState.back = 0;\n          break;\n\n        case 'KeyA':\n          this.moveState.left = 0;\n          break;\n\n        case 'KeyD':\n          this.moveState.right = 0;\n          break;\n\n        case 'KeyR':\n          this.moveState.up = 0;\n          break;\n\n        case 'KeyF':\n          this.moveState.down = 0;\n          break;\n\n        case 'ArrowUp':\n          this.moveState.pitchUp = 0;\n          break;\n\n        case 'ArrowDown':\n          this.moveState.pitchDown = 0;\n          break;\n\n        case 'ArrowLeft':\n          this.moveState.yawLeft = 0;\n          break;\n\n        case 'ArrowRight':\n          this.moveState.yawRight = 0;\n          break;\n\n        case 'KeyQ':\n          this.moveState.rollLeft = 0;\n          break;\n\n        case 'KeyE':\n          this.moveState.rollRight = 0;\n          break;\n      }\n\n      this.updateMovementVector();\n      this.updateRotationVector();\n    };\n\n    _this.mousedown = function (event) {\n      if (this.dragToLook) {\n        this.mouseStatus++;\n      } else {\n        switch (event.button) {\n          case 0:\n            this.moveState.forward = 1;\n            break;\n\n          case 2:\n            this.moveState.back = 1;\n            break;\n        }\n\n        this.updateMovementVector();\n      }\n    };\n\n    _this.mousemove = function (event) {\n      if (!this.dragToLook || this.mouseStatus > 0) {\n        var container = this.getContainerDimensions();\n        var halfWidth = container.size[0] / 2;\n        var halfHeight = container.size[1] / 2;\n        this.moveState.yawLeft = -(event.pageX - container.offset[0] - halfWidth) / halfWidth;\n        this.moveState.pitchDown = (event.pageY - container.offset[1] - halfHeight) / halfHeight;\n        this.updateRotationVector();\n      }\n    };\n\n    _this.mouseup = function (event) {\n      if (this.dragToLook) {\n        this.mouseStatus--;\n        this.moveState.yawLeft = this.moveState.pitchDown = 0;\n      } else {\n        switch (event.button) {\n          case 0:\n            this.moveState.forward = 0;\n            break;\n\n          case 2:\n            this.moveState.back = 0;\n            break;\n        }\n\n        this.updateMovementVector();\n      }\n\n      this.updateRotationVector();\n    };\n\n    _this.update = function (delta) {\n      var moveMult = delta * scope.movementSpeed;\n      var rotMult = delta * scope.rollSpeed;\n      scope.object.translateX(scope.moveVector.x * moveMult);\n      scope.object.translateY(scope.moveVector.y * moveMult);\n      scope.object.translateZ(scope.moveVector.z * moveMult);\n      scope.tmpQuaternion.set(scope.rotationVector.x * rotMult, scope.rotationVector.y * rotMult, scope.rotationVector.z * rotMult, 1).normalize();\n      scope.object.quaternion.multiply(scope.tmpQuaternion);\n\n      if (lastPosition.distanceToSquared(scope.object.position) > EPS || 8 * (1 - lastQuaternion.dot(scope.object.quaternion)) > EPS) {\n        scope.dispatchEvent(_changeEvent);\n        lastQuaternion.copy(scope.object.quaternion);\n        lastPosition.copy(scope.object.position);\n      }\n    };\n\n    _this.updateMovementVector = function () {\n      var forward = this.moveState.forward || this.autoForward && !this.moveState.back ? 1 : 0;\n      this.moveVector.x = -this.moveState.left + this.moveState.right;\n      this.moveVector.y = -this.moveState.down + this.moveState.up;\n      this.moveVector.z = -forward + this.moveState.back; //console.log( 'move:', [ this.moveVector.x, this.moveVector.y, this.moveVector.z ] );\n    };\n\n    _this.updateRotationVector = function () {\n      this.rotationVector.x = -this.moveState.pitchDown + this.moveState.pitchUp;\n      this.rotationVector.y = -this.moveState.yawRight + this.moveState.yawLeft;\n      this.rotationVector.z = -this.moveState.rollRight + this.moveState.rollLeft; //console.log( 'rotate:', [ this.rotationVector.x, this.rotationVector.y, this.rotationVector.z ] );\n    };\n\n    _this.getContainerDimensions = function () {\n      if (this.domElement != document) {\n        return {\n          size: [this.domElement.offsetWidth, this.domElement.offsetHeight],\n          offset: [this.domElement.offsetLeft, this.domElement.offsetTop]\n        };\n      } else {\n        return {\n          size: [window.innerWidth, window.innerHeight],\n          offset: [0, 0]\n        };\n      }\n    };\n\n    _this.dispose = function () {\n      this.domElement.removeEventListener('contextmenu', contextmenu);\n      this.domElement.removeEventListener('mousedown', _mousedown);\n      this.domElement.removeEventListener('mousemove', _mousemove);\n      this.domElement.removeEventListener('mouseup', _mouseup);\n      window.removeEventListener('keydown', _keydown);\n      window.removeEventListener('keyup', _keyup);\n    };\n\n    var _mousemove = _this.mousemove.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n\n    var _mousedown = _this.mousedown.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n\n    var _mouseup = _this.mouseup.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n\n    var _keydown = _this.keydown.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n\n    var _keyup = _this.keyup.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n\n    _this.domElement.addEventListener('contextmenu', contextmenu);\n\n    _this.domElement.addEventListener('mousemove', _mousemove);\n\n    _this.domElement.addEventListener('mousedown', _mousedown);\n\n    _this.domElement.addEventListener('mouseup', _mouseup);\n\n    window.addEventListener('keydown', _keydown);\n    window.addEventListener('keyup', _keyup);\n\n    _this.updateMovementVector();\n\n    _this.updateRotationVector();\n\n    return _this;\n  }\n\n  return FlyControls;\n}(EventDispatcher);\n\nfunction contextmenu(event) {\n  event.preventDefault();\n}\n\nexport { FlyControls };","map":null,"metadata":{},"sourceType":"module"}