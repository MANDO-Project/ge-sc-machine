{"ast":null,"code":"var createPatternBuilder = require('./createPatternBuilder');\n\nvar getVariableName = require('./getVariableName');\n\nmodule.exports = generateQuadTreeFunction;\nmodule.exports.generateQuadTreeFunctionBody = generateQuadTreeFunctionBody; // These exports are for InlineTransform tool.\n// InlineTransform: getInsertStackCode\n\nmodule.exports.getInsertStackCode = getInsertStackCode; // InlineTransform: getQuadNodeCode\n\nmodule.exports.getQuadNodeCode = getQuadNodeCode; // InlineTransform: isSamePosition\n\nmodule.exports.isSamePosition = isSamePosition; // InlineTransform: getChildBodyCode\n\nmodule.exports.getChildBodyCode = getChildBodyCode; // InlineTransform: setChildBodyCode\n\nmodule.exports.setChildBodyCode = setChildBodyCode;\n\nfunction generateQuadTreeFunction(dimension) {\n  var code = generateQuadTreeFunctionBody(dimension);\n  return new Function(code)();\n}\n\nfunction generateQuadTreeFunctionBody(dimension) {\n  var pattern = createPatternBuilder(dimension);\n  var quadCount = Math.pow(2, dimension);\n  var code = \"\\n\".concat(getInsertStackCode(), \"\\n\").concat(getQuadNodeCode(dimension), \"\\n\").concat(isSamePosition(dimension), \"\\n\").concat(getChildBodyCode(dimension), \"\\n\").concat(setChildBodyCode(dimension), \"\\n\\nfunction createQuadTree(options, random) {\\n  options = options || {};\\n  options.gravity = typeof options.gravity === 'number' ? options.gravity : -1;\\n  options.theta = typeof options.theta === 'number' ? options.theta : 0.8;\\n\\n  var gravity = options.gravity;\\n  var updateQueue = [];\\n  var insertStack = new InsertStack();\\n  var theta = options.theta;\\n\\n  var nodesCache = [];\\n  var currentInCache = 0;\\n  var root = newNode();\\n\\n  return {\\n    insertBodies: insertBodies,\\n\\n    /**\\n     * Gets root node if it is present\\n     */\\n    getRoot: function() {\\n      return root;\\n    },\\n\\n    updateBodyForce: update,\\n\\n    options: function(newOptions) {\\n      if (newOptions) {\\n        if (typeof newOptions.gravity === 'number') {\\n          gravity = newOptions.gravity;\\n        }\\n        if (typeof newOptions.theta === 'number') {\\n          theta = newOptions.theta;\\n        }\\n\\n        return this;\\n      }\\n\\n      return {\\n        gravity: gravity,\\n        theta: theta\\n      };\\n    }\\n  };\\n\\n  function newNode() {\\n    // To avoid pressure on GC we reuse nodes.\\n    var node = nodesCache[currentInCache];\\n    if (node) {\\n\").concat(assignQuads('      node.'), \"\\n      node.body = null;\\n      node.mass = \").concat(pattern('node.mass_{var} = ', {\n    join: ''\n  }), \"0;\\n      \").concat(pattern('node.min_{var} = node.max_{var} = ', {\n    join: ''\n  }), \"0;\\n    } else {\\n      node = new QuadNode();\\n      nodesCache[currentInCache] = node;\\n    }\\n\\n    ++currentInCache;\\n    return node;\\n  }\\n\\n  function update(sourceBody) {\\n    var queue = updateQueue;\\n    var v;\\n    \").concat(pattern('var d{var};', {\n    indent: 4\n  }), \"\\n    var r; \\n    \").concat(pattern('var f{var} = 0;', {\n    indent: 4\n  }), \"\\n    var queueLength = 1;\\n    var shiftIdx = 0;\\n    var pushIdx = 1;\\n\\n    queue[0] = root;\\n\\n    while (queueLength) {\\n      var node = queue[shiftIdx];\\n      var body = node.body;\\n\\n      queueLength -= 1;\\n      shiftIdx += 1;\\n      var differentBody = (body !== sourceBody);\\n      if (body && differentBody) {\\n        // If the current node is a leaf node (and it is not source body),\\n        // calculate the force exerted by the current node on body, and add this\\n        // amount to body's net force.\\n        \").concat(pattern('d{var} = body.pos.{var} - sourceBody.pos.{var};', {\n    indent: 8\n  }), \"\\n        r = Math.sqrt(\").concat(pattern('d{var} * d{var}', {\n    join: ' + '\n  }), \");\\n\\n        if (r === 0) {\\n          // Poor man's protection against zero distance.\\n          \").concat(pattern('d{var} = (random.nextDouble() - 0.5) / 50;', {\n    indent: 10\n  }), \"\\n          r = Math.sqrt(\").concat(pattern('d{var} * d{var}', {\n    join: ' + '\n  }), \");\\n        }\\n\\n        // This is standard gravitation force calculation but we divide\\n        // by r^3 to save two operations when normalizing force vector.\\n        v = gravity * body.mass * sourceBody.mass / (r * r * r);\\n        \").concat(pattern('f{var} += v * d{var};', {\n    indent: 8\n  }), \"\\n      } else if (differentBody) {\\n        // Otherwise, calculate the ratio s / r,  where s is the width of the region\\n        // represented by the internal node, and r is the distance between the body\\n        // and the node's center-of-mass\\n        \").concat(pattern('d{var} = node.mass_{var} / node.mass - sourceBody.pos.{var};', {\n    indent: 8\n  }), \"\\n        r = Math.sqrt(\").concat(pattern('d{var} * d{var}', {\n    join: ' + '\n  }), \");\\n\\n        if (r === 0) {\\n          // Sorry about code duplication. I don't want to create many functions\\n          // right away. Just want to see performance first.\\n          \").concat(pattern('d{var} = (random.nextDouble() - 0.5) / 50;', {\n    indent: 10\n  }), \"\\n          r = Math.sqrt(\").concat(pattern('d{var} * d{var}', {\n    join: ' + '\n  }), \");\\n        }\\n        // If s / r < \\u03B8, treat this internal node as a single body, and calculate the\\n        // force it exerts on sourceBody, and add this amount to sourceBody's net force.\\n        if ((node.max_\").concat(getVariableName(0), \" - node.min_\").concat(getVariableName(0), \") / r < theta) {\\n          // in the if statement above we consider node's width only\\n          // because the region was made into square during tree creation.\\n          // Thus there is no difference between using width or height.\\n          v = gravity * node.mass * sourceBody.mass / (r * r * r);\\n          \").concat(pattern('f{var} += v * d{var};', {\n    indent: 10\n  }), \"\\n        } else {\\n          // Otherwise, run the procedure recursively on each of the current node's children.\\n\\n          // I intentionally unfolded this loop, to save several CPU cycles.\\n\").concat(runRecursiveOnChildren(), \"\\n        }\\n      }\\n    }\\n\\n    \").concat(pattern('sourceBody.force.{var} += f{var};', {\n    indent: 4\n  }), \"\\n  }\\n\\n  function insertBodies(bodies) {\\n    \").concat(pattern('var {var}min = Number.MAX_VALUE;', {\n    indent: 4\n  }), \"\\n    \").concat(pattern('var {var}max = Number.MIN_VALUE;', {\n    indent: 4\n  }), \"\\n    var i = bodies.length;\\n\\n    // To reduce quad tree depth we are looking for exact bounding box of all particles.\\n    while (i--) {\\n      var pos = bodies[i].pos;\\n      \").concat(pattern('if (pos.{var} < {var}min) {var}min = pos.{var};', {\n    indent: 6\n  }), \"\\n      \").concat(pattern('if (pos.{var} > {var}max) {var}max = pos.{var};', {\n    indent: 6\n  }), \"\\n    }\\n\\n    // Makes the bounds square.\\n    var maxSideLength = -Infinity;\\n    \").concat(pattern('if ({var}max - {var}min > maxSideLength) maxSideLength = {var}max - {var}min ;', {\n    indent: 4\n  }), \"\\n\\n    currentInCache = 0;\\n    root = newNode();\\n    \").concat(pattern('root.min_{var} = {var}min;', {\n    indent: 4\n  }), \"\\n    \").concat(pattern('root.max_{var} = {var}min + maxSideLength;', {\n    indent: 4\n  }), \"\\n\\n    i = bodies.length - 1;\\n    if (i >= 0) {\\n      root.body = bodies[i];\\n    }\\n    while (i--) {\\n      insert(bodies[i], root);\\n    }\\n  }\\n\\n  function insert(newBody) {\\n    insertStack.reset();\\n    insertStack.push(root, newBody);\\n\\n    while (!insertStack.isEmpty()) {\\n      var stackItem = insertStack.pop();\\n      var node = stackItem.node;\\n      var body = stackItem.body;\\n\\n      if (!node.body) {\\n        // This is internal node. Update the total mass of the node and center-of-mass.\\n        \").concat(pattern('var {var} = body.pos.{var};', {\n    indent: 8\n  }), \"\\n        node.mass += body.mass;\\n        \").concat(pattern('node.mass_{var} += body.mass * {var};', {\n    indent: 8\n  }), \"\\n\\n        // Recursively insert the body in the appropriate quadrant.\\n        // But first find the appropriate quadrant.\\n        var quadIdx = 0; // Assume we are in the 0's quad.\\n        \").concat(pattern('var min_{var} = node.min_{var};', {\n    indent: 8\n  }), \"\\n        \").concat(pattern('var max_{var} = (min_{var} + node.max_{var}) / 2;', {\n    indent: 8\n  }), \"\\n\\n\").concat(assignInsertionQuadIndex(8), \"\\n\\n        var child = getChild(node, quadIdx);\\n\\n        if (!child) {\\n          // The node is internal but this quadrant is not taken. Add\\n          // subnode to it.\\n          child = newNode();\\n          \").concat(pattern('child.min_{var} = min_{var};', {\n    indent: 10\n  }), \"\\n          \").concat(pattern('child.max_{var} = max_{var};', {\n    indent: 10\n  }), \"\\n          child.body = body;\\n\\n          setChild(node, quadIdx, child);\\n        } else {\\n          // continue searching in this quadrant.\\n          insertStack.push(child, body);\\n        }\\n      } else {\\n        // We are trying to add to the leaf node.\\n        // We have to convert current leaf into internal node\\n        // and continue adding two nodes.\\n        var oldBody = node.body;\\n        node.body = null; // internal nodes do not cary bodies\\n\\n        if (isSamePosition(oldBody.pos, body.pos)) {\\n          // Prevent infinite subdivision by bumping one node\\n          // anywhere in this quadrant\\n          var retriesCount = 3;\\n          do {\\n            var offset = random.nextDouble();\\n            \").concat(pattern('var d{var} = (node.max_{var} - node.min_{var}) * offset;', {\n    indent: 12\n  }), \"\\n\\n            \").concat(pattern('oldBody.pos.{var} = node.min_{var} + d{var};', {\n    indent: 12\n  }), \"\\n            retriesCount -= 1;\\n            // Make sure we don't bump it out of the box. If we do, next iteration should fix it\\n          } while (retriesCount > 0 && isSamePosition(oldBody.pos, body.pos));\\n\\n          if (retriesCount === 0 && isSamePosition(oldBody.pos, body.pos)) {\\n            // This is very bad, we ran out of precision.\\n            // if we do not return from the method we'll get into\\n            // infinite loop here. So we sacrifice correctness of layout, and keep the app running\\n            // Next layout iteration should get larger bounding box in the first step and fix this\\n            return;\\n          }\\n        }\\n        // Next iteration should subdivide node further.\\n        insertStack.push(node, oldBody);\\n        insertStack.push(node, body);\\n      }\\n    }\\n  }\\n}\\nreturn createQuadTree;\\n\\n\");\n  return code;\n\n  function assignInsertionQuadIndex(indentCount) {\n    var insertionCode = [];\n    var indent = Array(indentCount + 1).join(' ');\n\n    for (var i = 0; i < dimension; ++i) {\n      insertionCode.push(indent + \"if (\".concat(getVariableName(i), \" > max_\").concat(getVariableName(i), \") {\"));\n      insertionCode.push(indent + \"  quadIdx = quadIdx + \".concat(Math.pow(2, i), \";\"));\n      insertionCode.push(indent + \"  min_\".concat(getVariableName(i), \" = max_\").concat(getVariableName(i), \";\"));\n      insertionCode.push(indent + \"  max_\".concat(getVariableName(i), \" = node.max_\").concat(getVariableName(i), \";\"));\n      insertionCode.push(indent + \"}\");\n    }\n\n    return insertionCode.join('\\n'); // if (x > max_x) { // somewhere in the eastern part.\n    //   quadIdx = quadIdx + 1;\n    //   left = right;\n    //   right = node.right;\n    // }\n  }\n\n  function runRecursiveOnChildren() {\n    var indent = Array(11).join(' ');\n    var recursiveCode = [];\n\n    for (var i = 0; i < quadCount; ++i) {\n      recursiveCode.push(indent + \"if (node.quad\".concat(i, \") {\"));\n      recursiveCode.push(indent + \"  queue[pushIdx] = node.quad\".concat(i, \";\"));\n      recursiveCode.push(indent + \"  queueLength += 1;\");\n      recursiveCode.push(indent + \"  pushIdx += 1;\");\n      recursiveCode.push(indent + \"}\");\n    }\n\n    return recursiveCode.join('\\n'); // if (node.quad0) {\n    //   queue[pushIdx] = node.quad0;\n    //   queueLength += 1;\n    //   pushIdx += 1;\n    // }\n  }\n\n  function assignQuads(indent) {\n    // this.quad0 = null;\n    // this.quad1 = null;\n    // this.quad2 = null;\n    // this.quad3 = null;\n    var quads = [];\n\n    for (var i = 0; i < quadCount; ++i) {\n      quads.push(\"\".concat(indent, \"quad\").concat(i, \" = null;\"));\n    }\n\n    return quads.join('\\n');\n  }\n}\n\nfunction isSamePosition(dimension) {\n  var pattern = createPatternBuilder(dimension);\n  return \"\\n  function isSamePosition(point1, point2) {\\n    \".concat(pattern('var d{var} = Math.abs(point1.{var} - point2.{var});', {\n    indent: 2\n  }), \"\\n  \\n    return \").concat(pattern('d{var} < 1e-8', {\n    join: ' && '\n  }), \";\\n  }  \\n\");\n}\n\nfunction setChildBodyCode(dimension) {\n  var quadCount = Math.pow(2, dimension);\n  return \"\\nfunction setChild(node, idx, child) {\\n  \".concat(setChildBody(), \"\\n}\");\n\n  function setChildBody() {\n    var childBody = [];\n\n    for (var i = 0; i < quadCount; ++i) {\n      var prefix = i === 0 ? '  ' : '  else ';\n      childBody.push(\"\".concat(prefix, \"if (idx === \").concat(i, \") node.quad\").concat(i, \" = child;\"));\n    }\n\n    return childBody.join('\\n'); // if (idx === 0) node.quad0 = child;\n    // else if (idx === 1) node.quad1 = child;\n    // else if (idx === 2) node.quad2 = child;\n    // else if (idx === 3) node.quad3 = child;\n  }\n}\n\nfunction getChildBodyCode(dimension) {\n  return \"function getChild(node, idx) {\\n\".concat(getChildBody(), \"\\n  return null;\\n}\");\n\n  function getChildBody() {\n    var childBody = [];\n    var quadCount = Math.pow(2, dimension);\n\n    for (var i = 0; i < quadCount; ++i) {\n      childBody.push(\"  if (idx === \".concat(i, \") return node.quad\").concat(i, \";\"));\n    }\n\n    return childBody.join('\\n'); // if (idx === 0) return node.quad0;\n    // if (idx === 1) return node.quad1;\n    // if (idx === 2) return node.quad2;\n    // if (idx === 3) return node.quad3;\n  }\n}\n\nfunction getQuadNodeCode(dimension) {\n  var pattern = createPatternBuilder(dimension);\n  var quadCount = Math.pow(2, dimension);\n  var quadNodeCode = \"\\nfunction QuadNode() {\\n  // body stored inside this node. In quad tree only leaf nodes (by construction)\\n  // contain bodies:\\n  this.body = null;\\n\\n  // Child nodes are stored in quads. Each quad is presented by number:\\n  // 0 | 1\\n  // -----\\n  // 2 | 3\\n\".concat(assignQuads('  this.'), \"\\n\\n  // Total mass of current node\\n  this.mass = 0;\\n\\n  // Center of mass coordinates\\n  \").concat(pattern('this.mass_{var} = 0;', {\n    indent: 2\n  }), \"\\n\\n  // bounding box coordinates\\n  \").concat(pattern('this.min_{var} = 0;', {\n    indent: 2\n  }), \"\\n  \").concat(pattern('this.max_{var} = 0;', {\n    indent: 2\n  }), \"\\n}\\n\");\n  return quadNodeCode;\n\n  function assignQuads(indent) {\n    // this.quad0 = null;\n    // this.quad1 = null;\n    // this.quad2 = null;\n    // this.quad3 = null;\n    var quads = [];\n\n    for (var i = 0; i < quadCount; ++i) {\n      quads.push(\"\".concat(indent, \"quad\").concat(i, \" = null;\"));\n    }\n\n    return quads.join('\\n');\n  }\n}\n\nfunction getInsertStackCode() {\n  return \"\\n/**\\n * Our implementation of QuadTree is non-recursive to avoid GC hit\\n * This data structure represent stack of elements\\n * which we are trying to insert into quad tree.\\n */\\nfunction InsertStack () {\\n    this.stack = [];\\n    this.popIdx = 0;\\n}\\n\\nInsertStack.prototype = {\\n    isEmpty: function() {\\n        return this.popIdx === 0;\\n    },\\n    push: function (node, body) {\\n        var item = this.stack[this.popIdx];\\n        if (!item) {\\n            // we are trying to avoid memory pressure: create new element\\n            // only when absolutely necessary\\n            this.stack[this.popIdx] = new InsertStackElement(node, body);\\n        } else {\\n            item.node = node;\\n            item.body = body;\\n        }\\n        ++this.popIdx;\\n    },\\n    pop: function () {\\n        if (this.popIdx > 0) {\\n            return this.stack[--this.popIdx];\\n        }\\n    },\\n    reset: function () {\\n        this.popIdx = 0;\\n    }\\n};\\n\\nfunction InsertStackElement(node, body) {\\n    this.node = node; // QuadTree node\\n    this.body = body; // physical body which needs to be inserted to node\\n}\\n\";\n}","map":null,"metadata":{},"sourceType":"script"}