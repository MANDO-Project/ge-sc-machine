{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React from 'react';\nimport '../sigma/nodes';\n/**\n\nNodeShapes component, interface for customShapes sigma plugin.\nIt supposes that sigma graph is already in place, therefore component should not be\nmounted until graph is available. It can be used within Sigma component if graph is\npreloaded, or within loader component, like LoadJSON.\n\nNote! this Component requires \"canvas\" renderer to work.\n\nExtra node properties:\n - node.type='shape-name' - node shape renderer e.g. node.type='cross'.\n - node.borderColor - e.g. node.borderColor='#FF3333'\nDetails on shapes configuration and possibility to apply images to nodes, please refer to\n[plugin page](https://github.com/jacomyal/sigma.js/tree/master/plugins/sigma.renderers.customShapes#images).\n\nSee [plugin page](https://github.com/jacomyal/sigma.js/tree/master/plugins/sigma.renderers.customEdgeShapes)\nfor more datails on implementation.\n\n@param {string} default  set default sigma node renderer to be applied to nodes where type is not set\n\n\n@example\n```\n<Sigma renderer=\"canvas\" graph={{nodes:[\"id0\", \"id1\"], edges:[{id:\"e0\",source:\"id0\",target:\"id1\"}]}}>\n\t<NodeShapes default=\"star\"/>\n</Sigma>\n```\n\n@example\nSupported shapes\n```\ntype Sigma$Node$Shapes = \"def\" | \"pacman\" | \"star\" | \"equilateral\" | \"cross\" | \"diamond\" | \"circle\" | \"square\";\n```\n\n**/\n\nvar NodeShapes = /*#__PURE__*/function (_React$Component) {\n  _inherits(NodeShapes, _React$Component);\n\n  var _super = _createSuper(NodeShapes);\n\n  function NodeShapes(props) {\n    var _this;\n\n    _classCallCheck(this, NodeShapes);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"render\", function () {\n      return null;\n    });\n\n    if (_this.props.sigma && _this.props[\"default\"]) _this.props.sigma.settings({\n      defaultNodeType: _this.props[\"default\"]\n    });\n    return _this;\n  }\n\n  return NodeShapes;\n}(React.Component);\n\n_defineProperty(NodeShapes, \"propTypes\", {\n  \"default\": function _default() {\n    return (typeof Sigma$Node$Shapes === \"function\" ? PropTypes.instanceOf(Sigma$Node$Shapes) : PropTypes.any).apply(this, arguments);\n  },\n  sigma: function (_sigma) {\n    function sigma() {\n      return _sigma.apply(this, arguments);\n    }\n\n    sigma.toString = function () {\n      return _sigma.toString();\n    };\n\n    return sigma;\n  }(function () {\n    return (typeof sigma === \"function\" ? PropTypes.instanceOf(sigma) : PropTypes.any).apply(this, arguments);\n  })\n});\n\nexport default NodeShapes;\nimport PropTypes from \"prop-types\";","map":null,"metadata":{},"sourceType":"module"}