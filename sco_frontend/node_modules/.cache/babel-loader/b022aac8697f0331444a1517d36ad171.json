{"ast":null,"code":"require('../../lib/keyboard.polyfill');\n\nvar MAX_DELTA = 0.2,\n    PROXY_FLAG = '__keyboard-controls-proxy';\nvar KeyboardEvent = window.KeyboardEvent;\n/**\n * Keyboard Controls component.\n *\n * Stripped-down version of: https://github.com/donmccurdy/aframe-keyboard-controls\n *\n * Bind keyboard events to components, or control your entities with the WASD keys.\n *\n * Why use KeyboardEvent.code? \"This is set to a string representing the key that was pressed to\n * generate the KeyboardEvent, without taking the current keyboard layout (e.g., QWERTY vs.\n * Dvorak), locale (e.g., English vs. French), or any modifier keys into account. This is useful\n * when you care about which physical key was pressed, rather thanwhich character it corresponds\n * to. For example, if youâ€™re a writing a game, you might want a certain set of keys to move the\n * player in different directions, and that mapping should ideally be independent of keyboard\n * layout. See: https://developers.google.com/web/updates/2016/04/keyboardevent-keys-codes\n *\n * @namespace wasd-controls\n * keys the entity moves and if you release it will stop. Easing simulates friction.\n * to the entity when pressing the keys.\n * @param {bool} [enabled=true] - To completely enable or disable the controls\n */\n\nmodule.exports = AFRAME.registerComponent('keyboard-controls', {\n  schema: {\n    enabled: {\n      default: true\n    },\n    debug: {\n      default: false\n    }\n  },\n  init: function init() {\n    this.dVelocity = new THREE.Vector3();\n    this.localKeys = {};\n    this.listeners = {\n      keydown: this.onKeyDown.bind(this),\n      keyup: this.onKeyUp.bind(this),\n      blur: this.onBlur.bind(this)\n    };\n    this.attachEventListeners();\n  },\n\n  /*******************************************************************\n  * Movement\n  */\n  isVelocityActive: function isVelocityActive() {\n    return this.data.enabled && !!Object.keys(this.getKeys()).length;\n  },\n  getVelocityDelta: function getVelocityDelta() {\n    var data = this.data,\n        keys = this.getKeys();\n    this.dVelocity.set(0, 0, 0);\n\n    if (data.enabled) {\n      if (keys.KeyW || keys.ArrowUp) {\n        this.dVelocity.z -= 1;\n      }\n\n      if (keys.KeyA || keys.ArrowLeft) {\n        this.dVelocity.x -= 1;\n      }\n\n      if (keys.KeyS || keys.ArrowDown) {\n        this.dVelocity.z += 1;\n      }\n\n      if (keys.KeyD || keys.ArrowRight) {\n        this.dVelocity.x += 1;\n      }\n    }\n\n    return this.dVelocity.clone();\n  },\n\n  /*******************************************************************\n  * Events\n  */\n  play: function play() {\n    this.attachEventListeners();\n  },\n  pause: function pause() {\n    this.removeEventListeners();\n  },\n  remove: function remove() {\n    this.pause();\n  },\n  attachEventListeners: function attachEventListeners() {\n    window.addEventListener('keydown', this.listeners.keydown, false);\n    window.addEventListener('keyup', this.listeners.keyup, false);\n    window.addEventListener('blur', this.listeners.blur, false);\n  },\n  removeEventListeners: function removeEventListeners() {\n    window.removeEventListener('keydown', this.listeners.keydown);\n    window.removeEventListener('keyup', this.listeners.keyup);\n    window.removeEventListener('blur', this.listeners.blur);\n  },\n  onKeyDown: function onKeyDown(event) {\n    if (AFRAME.utils.shouldCaptureKeyEvent(event)) {\n      this.localKeys[event.code] = true;\n      this.emit(event);\n    }\n  },\n  onKeyUp: function onKeyUp(event) {\n    if (AFRAME.utils.shouldCaptureKeyEvent(event)) {\n      delete this.localKeys[event.code];\n      this.emit(event);\n    }\n  },\n  onBlur: function onBlur() {\n    for (var code in this.localKeys) {\n      if (this.localKeys.hasOwnProperty(code)) {\n        delete this.localKeys[code];\n      }\n    }\n  },\n  emit: function emit(event) {\n    // TODO - keydown only initially?\n    // TODO - where the f is the spacebar\n    // Emit original event.\n    if (PROXY_FLAG in event) {\n      // TODO - Method never triggered.\n      this.el.emit(event.type, event);\n    } // Emit convenience event, identifying key.\n\n\n    this.el.emit(event.type + ':' + event.code, new KeyboardEvent(event.type, event));\n    if (this.data.debug) console.log(event.type + ':' + event.code);\n  },\n\n  /*******************************************************************\n  * Accessors\n  */\n  isPressed: function isPressed(code) {\n    return code in this.getKeys();\n  },\n  getKeys: function getKeys() {\n    if (this.isProxied()) {\n      return this.el.sceneEl.components['proxy-controls'].getKeyboard();\n    }\n\n    return this.localKeys;\n  },\n  isProxied: function isProxied() {\n    var proxyControls = this.el.sceneEl.components['proxy-controls'];\n    return proxyControls && proxyControls.isConnected();\n  }\n});","map":null,"metadata":{},"sourceType":"script"}