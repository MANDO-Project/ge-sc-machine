{"ast":null,"code":"import Half from \"./half\";\nexport default function (x, radius) {\n  var data,\n      x0 = this._x0,\n      x1,\n      x2,\n      x3 = this._x1,\n      halves = [],\n      node = this._root,\n      q,\n      i;\n  if (node) halves.push(new Half(node, x0, x3));\n  if (radius == null) radius = Infinity;else {\n    x0 = x - radius;\n    x3 = x + radius;\n  }\n\n  while (q = halves.pop()) {\n    // Stop searching if this half can’t contain a closer node.\n    if (!(node = q.node) || (x1 = q.x0) > x3 || (x2 = q.x1) < x0) continue; // Bisect the current half.\n\n    if (node.length) {\n      var xm = (x1 + x2) / 2;\n      halves.push(new Half(node[1], xm, x2), new Half(node[0], x1, xm)); // Visit the closest half first.\n\n      if (i = +(x >= xm)) {\n        q = halves[halves.length - 1];\n        halves[halves.length - 1] = halves[halves.length - 1 - i];\n        halves[halves.length - 1 - i] = q;\n      }\n    } // Visit this point. (Visiting coincident points isn’t necessary!)\n    else {\n      var d = Math.abs(x - +this._x.call(null, node.data));\n\n      if (d < radius) {\n        radius = d;\n        x0 = x - d;\n        x3 = x + d;\n        data = node.data;\n      }\n    }\n  }\n\n  return data;\n}","map":null,"metadata":{},"sourceType":"module"}