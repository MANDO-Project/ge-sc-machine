{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React from 'react';\nimport { embedProps } from './tools';\nimport '../sigma/main';\n/**\n *\n * Sigma - React.JS flow-typed interface for Sigma js library - fastest opensource rendering engine for network graphs.\n * Sigma makes it easy to publish networks on Web pages, and allows developers to integrate network exploration in\n * rich Web applications.\n *\n * Parameter types\n * ```\n * type Sigma$Graph$Data = {\n *   nodes: [Sigma$Node],\n *   edges: [Sigma$Edge]\n * };\n *\n * type Sigma$Node = {\n *   id: string,\n *   label?: string,\n *   x?: number,\n *   y?: number,\n *   size?: number,\n *   color?: color\n * };\n *\n * type Sigma$Edge = {\n *   id: string,\n *   source: string,\n *   target: string,\n *   label?: string,\n *   color?: color\n * };\n * ```\n *\n *\n * @signature `<Sigma graph={graph} settings={settings} onClickNode={func}.../>`\n *\n * @param {CSS} style   CSS style description for main div holding graph, should be specified in React format\n * @param {Sigma$Settings} settings     js object with sigma initialization options, for full list see [sigma settings page](https://github.com/jacomyal/sigma.js/wiki/Settings)\n * @param {string} renderer     can be \"webgl\" or \"canvas\"\n * @param {Sigma$Graph$Data} graph   js object with array of nodes and edges used to initialize sigma\n * @param {Sigma$ErrorHandler} onSigmaException      set sigma callback for sigma exceptions / errors\n * @param {Sigma$EventHandler} onClickNode      set sigma callback for \"clickNode\" event (see below)\n * @param {Sigma$EventHandler} onOverNode      set sigma callback for \"overNode\" event\n * @param {Sigma$EventHandler} onOutNode      set sigma callback for \"outNode\" event\n * @param {Sigma$EventHandler} onClickEdge     set sigma callback for \"clickEdge\" event\n * @param {Sigma$EventHandler} onOverEdge      set sigma callback for \"overEdge\" event\n * @param {Sigma$EventHandler} onOutEdge      set sigma callback for \"outEdge\" event\n *\n * @example\n * Can be composed with sigma sub-components using JSX syntax\n * <Sigma renderer=\"webgl\" style={{maxWidth:\"inherit\", height:\"400px\"}}\n *        settings={{drawEdges:false}}\n *        onOverNode={e => console.log(\"Mouse over node: \" + e.data.node.label)}>\n *        graph={{nodes:[\"id0\", \"id1\"], edges:[{id:\"e0\",source:\"id0\",target:\"id1\"}]}}>\n *   <RelativeSize initialSize={8}/>\n * </Sigma>\n *\n */\n\nvar Sigma = /*#__PURE__*/function (_React$Component) {\n  _inherits(Sigma, _React$Component);\n\n  var _super = _createSuper(Sigma);\n\n  function Sigma(props) {\n    var _this;\n\n    _classCallCheck(this, Sigma);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"initRenderer\", function (container) {\n      if (container) {\n        var options = {\n          container: container\n        };\n        if (_this.props.renderer) options.type = _this.props.renderer;\n        _this.sigmaRenderer = _this.sigma.addRenderer(options);\n\n        _this.sigma.refresh();\n\n        _this.setState({\n          renderer: true\n        });\n      } else if (_this.sigmaRenderer) {\n        _this.sigma.killRenderer(_this.sigmaRenderer);\n\n        _this.sigmaRenderer = null;\n\n        _this.setState({\n          renderer: false\n        });\n      }\n    });\n\n    _this.state = {\n      renderer: false\n    };\n    var settings = _this.props.settings ? _this.props.settings : {};\n    _this.sigma = new sigma({\n      settings: settings\n    });\n    if (CustomShapes) CustomShapes.init(_this.sigma);\n    Sigma.bindHandlers(_this.props, _this.sigma);\n\n    if (_this.props.graph) {\n      try {\n        _this.sigma.graph.read(_this.props.graph);\n      } catch (e) {\n        if (_this.props.onSigmaException) _this.props.onSigmaException(e);\n      }\n    }\n\n    return _this;\n  }\n\n  _createClass(Sigma, [{\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.sigma.kill();\n      this.sigmaRenderer = null;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var children = this.state.renderer ? embedProps(this.props.children, {\n        sigma: this.sigma\n      }) : null;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        ref: this.initRenderer,\n        style: this.props.style\n      }, children);\n    }\n    /**\n    Initialize event handlers with sigma.\n    \n    Event handler function receives [Sigma Event](https://github.com/jacomyal/sigma.js/wiki/Events-API)\n    with the structure of following type:\n    ```\n    type Sigma$Event = {\n      data: {\n        node?: Neo4j$Node, //for node events is sigma node data\n        edge?: Neo4j$Edge, //for edge events is sigma edge data\n        captor: {   // information about event handler, for instance position on the page {clientX, clientY}\n          clientX: number,\n          clientY: number\n    }}}\n    \n    type Sigma$EventHandler = (node:Sigma$Event) => void\n    \n    ```\n    **/\n\n  }], [{\n    key: \"bindHandlers\",\n    value: function bindHandlers(handlers, sigma) {\n      [\"clickNode\", \"overNode\", \"outNode\", \"clickEdge\", \"overEdge\", \"outEdge\", \"clickStage\"].forEach(function (event) {\n        var handler = \"on\" + event[0].toUpperCase() + event.substr(1);\n\n        if (handlers[handler]) {\n          sigma.bind(event, handlers[handler]);\n        }\n      });\n    }\n  }]);\n\n  return Sigma;\n}(React.Component);\n\n_defineProperty(Sigma, \"defaultProps\", {\n  settings: {\n    defaultNodeColor: \"#3388AA\",\n    defaultLabelSize: 8,\n    defaultLabelColor: \"#777\",\n    labelThreshold: 12,\n    hoverFontStyle: \"text-size: 11\",\n    batchEdgesDrawing: true,\n    drawEdges: true,\n    drawEdgeLabels: false\n  },\n  style: {\n    maxWidth: \"inherit\",\n    height: \"400px\"\n  }\n});\n\n_defineProperty(Sigma, \"propTypes\", {\n  settings: function settings() {\n    return (typeof Sigma$Settings === \"function\" ? PropTypes.instanceOf(Sigma$Settings) : PropTypes.any).apply(this, arguments);\n  },\n  renderer: PropTypes.oneOf([\"webgl\", \"canvas\", \"svg\"]),\n  style: PropTypes.object,\n  children: PropTypes.any,\n  graph: function graph() {\n    return (typeof Sigma$Graph$Data === \"function\" ? PropTypes.instanceOf(Sigma$Graph$Data) : PropTypes.any).apply(this, arguments);\n  },\n  onSigmaException: PropTypes.func,\n  onClickNode: PropTypes.func,\n  onClickEdge: PropTypes.func,\n  onOverNode: PropTypes.func,\n  onOutNode: PropTypes.func,\n  onOverEdge: PropTypes.func,\n  // TODO: onOverEdge does not work?\n  onOutEdge: PropTypes.func,\n  onClickStage: PropTypes.func\n});\n\nexport default Sigma;\nimport PropTypes from \"prop-types\";","map":null,"metadata":{},"sourceType":"module"}