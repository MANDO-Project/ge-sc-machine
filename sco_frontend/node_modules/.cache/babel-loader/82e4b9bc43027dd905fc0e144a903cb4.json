{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]);\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (typeof res !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n\n  return (hint === \"string\" ? String : Number)(input);\n}\n\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n\n  return typeof key === \"symbol\" ? key : String(key);\n}\n\nvar index = function index() {\n  var list = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var keyAccessors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var multiItem = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var flattenKeys = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var keys = (keyAccessors instanceof Array ? keyAccessors.length ? keyAccessors : [undefined] : [keyAccessors]).map(function (key) {\n    return {\n      keyAccessor: key,\n      isProp: !(key instanceof Function)\n    };\n  });\n  var indexedResult = list.reduce(function (res, item) {\n    var iterObj = res;\n    var itemVal = item;\n    keys.forEach(function (_ref, idx) {\n      var keyAccessor = _ref.keyAccessor,\n          isProp = _ref.isProp;\n      var key;\n\n      if (isProp) {\n        var _itemVal = itemVal,\n            propVal = _itemVal[keyAccessor],\n            rest = _objectWithoutProperties(_itemVal, [keyAccessor].map(_toPropertyKey));\n\n        key = propVal;\n        itemVal = rest;\n      } else {\n        key = keyAccessor(itemVal, idx);\n      }\n\n      if (idx + 1 < keys.length) {\n        if (!iterObj.hasOwnProperty(key)) {\n          iterObj[key] = {};\n        }\n\n        iterObj = iterObj[key];\n      } else {\n        // Leaf key\n        if (multiItem) {\n          if (!iterObj.hasOwnProperty(key)) {\n            iterObj[key] = [];\n          }\n\n          iterObj[key].push(itemVal);\n        } else {\n          iterObj[key] = itemVal;\n        }\n      }\n    });\n    return res;\n  }, {});\n\n  if (multiItem instanceof Function) {\n    // Reduce leaf multiple values\n    (function reduce(node) {\n      var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n\n      if (level === keys.length) {\n        Object.keys(node).forEach(function (k) {\n          return node[k] = multiItem(node[k]);\n        });\n      } else {\n        Object.values(node).forEach(function (child) {\n          return reduce(child, level + 1);\n        });\n      }\n    })(indexedResult); // IIFE\n\n  }\n\n  var result = indexedResult;\n\n  if (flattenKeys) {\n    // flatten into array\n    result = [];\n\n    (function flatten(node) {\n      var accKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n      if (accKeys.length === keys.length) {\n        result.push({\n          keys: accKeys,\n          vals: node\n        });\n      } else {\n        Object.entries(node).forEach(function (_ref2) {\n          var _ref3 = _slicedToArray(_ref2, 2),\n              key = _ref3[0],\n              val = _ref3[1];\n\n          return flatten(val, [].concat(_toConsumableArray(accKeys), [key]));\n        });\n      }\n    })(indexedResult); //IIFE\n\n\n    if (keyAccessors instanceof Array && keyAccessors.length === 0 && result.length === 1) {\n      // clear keys if there's no key accessors (single result)\n      result[0].keys = [];\n    }\n  }\n\n  return result;\n};\n\nexport default index;","map":null,"metadata":{},"sourceType":"module"}