{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React from 'react';\nimport '../sigma/plugins.filter';\n/**\n\nFilter component, interface for filter sigma plugin.\nIt supposes that sigma graph is already in place, therefore component should not be\nmounted until graph is available. It can be used within Sigma component if graph is\npreloaded, or within loader component, like NeoCypher.\n\nFilter is hiding all nodes which do not apply to the provided nodesBy criteria.\n\n@param {Nodes$Filter} nodesBy   will hide nodes where filter returns false\n\ntype Nodes$Filter = (node: Sigma$Node) => boolean;\n\n\n**/\n\nvar Filter = /*#__PURE__*/function (_React$Component) {\n  _inherits(Filter, _React$Component);\n\n  var _super = _createSuper(Filter);\n\n  function Filter() {\n    var _this;\n\n    _classCallCheck(this, Filter);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"render\", function () {\n      return null;\n    });\n\n    return _this;\n  }\n\n  _createClass(Filter, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.filter = new sigma.plugins.filter(this.props.sigma);\n\n      this._apply(this.props);\n    } // TODO: will it work in composition with ForceAtlas for instance?\n    //It should hide nodes before rendering of subplugins, therefore used in componentWillUpdate.. is it right?\n\n  }, {\n    key: \"componentWillUpdate\",\n    value: function componentWillUpdate(props) {\n      if (props.nodesBy !== this.props.nodesBy || props.neighborsOf !== this.props.neighborsOf) this._apply(props);\n    } // TODO: Composition is not working yet!!\n\n  }, {\n    key: \"_apply\",\n    value: function _apply(props) {\n      this.filter.undo([\"neighborsOf\", \"nodesBy\"]);\n\n      if (props.neighborsOf) {\n        this.filter.neighborsOf(props.neighborsOf, \"neighborsOf\");\n      }\n\n      if (props.nodesBy) this.filter.nodesBy(props.nodesBy, \"nodesBy\");\n      this.filter.apply();\n      if (this.props.sigma) this.props.sigma.refresh();\n    }\n  }]);\n\n  return Filter;\n}(React.Component);\n\n_defineProperty(Filter, \"propTypes\", {\n  nodesBy: function nodesBy() {\n    return (typeof Nodes$Filter === \"function\" ? PropTypes.instanceOf(Nodes$Filter) : PropTypes.any).apply(this, arguments);\n  },\n  neighborsOf: PropTypes.string,\n  sigma: function sigma() {\n    return (typeof Sigma === \"function\" ? PropTypes.instanceOf(Sigma) : PropTypes.any).apply(this, arguments);\n  }\n});\n\nexport default Filter;\nimport PropTypes from \"prop-types\";","map":null,"metadata":{},"sourceType":"module"}