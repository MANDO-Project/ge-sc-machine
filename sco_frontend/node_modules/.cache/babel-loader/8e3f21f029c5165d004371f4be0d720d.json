{"ast":null,"code":"/*\nLanguage: OCaml\nAuthor: Mehdi Dogguy <mehdi@dogguy.org>\nContributors: Nicolas Braud-Santoni <nicolas.braud-santoni@ens-cachan.fr>, Mickael Delahaye <mickael.delahaye@gmail.com>\nDescription: OCaml language definition.\nWebsite: https://ocaml.org\nCategory: functional\n*/\nfunction ocaml(hljs) {\n  /* missing support for heredoc-like string (OCaml 4.0.2+) */\n  return {\n    name: 'OCaml',\n    aliases: ['ml'],\n    keywords: {\n      $pattern: '[a-z_]\\\\w*!?',\n      keyword: 'and as assert asr begin class constraint do done downto else end ' + 'exception external for fun function functor if in include ' + 'inherit! inherit initializer land lazy let lor lsl lsr lxor match method!|10 method ' + 'mod module mutable new object of open! open or private rec sig struct ' + 'then to try type val! val virtual when while with ' +\n      /* camlp4 */\n      'parser value',\n      built_in:\n      /* built-in types */\n      'array bool bytes char exn|5 float int int32 int64 list lazy_t|5 nativeint|5 string unit ' +\n      /* (some) types in Pervasives */\n      'in_channel out_channel ref',\n      literal: 'true false'\n    },\n    illegal: /\\/\\/|>>/,\n    contains: [{\n      className: 'literal',\n      begin: '\\\\[(\\\\|\\\\|)?\\\\]|\\\\(\\\\)',\n      relevance: 0\n    }, hljs.COMMENT('\\\\(\\\\*', '\\\\*\\\\)', {\n      contains: ['self']\n    }), {\n      /* type variable */\n      className: 'symbol',\n      begin: '\\'[A-Za-z_](?!\\')[\\\\w\\']*'\n      /* the grammar is ambiguous on how 'a'b should be interpreted but not the compiler */\n\n    }, {\n      /* polymorphic variant */\n      className: 'type',\n      begin: '`[A-Z][\\\\w\\']*'\n    }, {\n      /* module or constructor */\n      className: 'type',\n      begin: '\\\\b[A-Z][\\\\w\\']*',\n      relevance: 0\n    }, {\n      /* don't color identifiers, but safely catch all identifiers with '*/\n      begin: '[a-z_]\\\\w*\\'[\\\\w\\']*',\n      relevance: 0\n    }, hljs.inherit(hljs.APOS_STRING_MODE, {\n      className: 'string',\n      relevance: 0\n    }), hljs.inherit(hljs.QUOTE_STRING_MODE, {\n      illegal: null\n    }), {\n      className: 'number',\n      begin: '\\\\b(0[xX][a-fA-F0-9_]+[Lln]?|' + '0[oO][0-7_]+[Lln]?|' + '0[bB][01_]+[Lln]?|' + '[0-9][0-9_]*([Lln]|(\\\\.[0-9_]*)?([eE][-+]?[0-9_]+)?)?)',\n      relevance: 0\n    }, {\n      begin: /->/ // relevance booster\n\n    }]\n  };\n}\n\nmodule.exports = ocaml;","map":{"version":3,"sources":["C:/Users/Admin/Music/MANDO/ge-sc-machine/sco_frontend/node_modules/highlight.js/lib/languages/ocaml.js"],"names":["ocaml","hljs","name","aliases","keywords","$pattern","keyword","built_in","literal","illegal","contains","className","begin","relevance","COMMENT","inherit","APOS_STRING_MODE","QUOTE_STRING_MODE","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,KAAT,CAAeC,IAAf,EAAqB;AACnB;AACA,SAAO;AACLC,IAAAA,IAAI,EAAE,OADD;AAELC,IAAAA,OAAO,EAAE,CAAC,IAAD,CAFJ;AAGLC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,QAAQ,EAAE,cADF;AAERC,MAAAA,OAAO,EACL,sEACA,4DADA,GAEA,sFAFA,GAGA,wEAHA,GAIA,oDAJA;AAKA;AACA,oBATM;AAURC,MAAAA,QAAQ;AACN;AACA;AACA;AACA,kCAdM;AAeRC,MAAAA,OAAO,EACL;AAhBM,KAHL;AAqBLC,IAAAA,OAAO,EAAE,SArBJ;AAsBLC,IAAAA,QAAQ,EAAE,CACR;AACEC,MAAAA,SAAS,EAAE,SADb;AAEEC,MAAAA,KAAK,EAAE,wBAFT;AAGEC,MAAAA,SAAS,EAAE;AAHb,KADQ,EAMRZ,IAAI,CAACa,OAAL,CACE,QADF,EAEE,QAFF,EAGE;AACEJ,MAAAA,QAAQ,EAAE,CAAC,MAAD;AADZ,KAHF,CANQ,EAaR;AAAE;AACAC,MAAAA,SAAS,EAAE,QADb;AAEEC,MAAAA,KAAK,EAAE;AACP;;AAHF,KAbQ,EAkBR;AAAE;AACAD,MAAAA,SAAS,EAAE,MADb;AAEEC,MAAAA,KAAK,EAAE;AAFT,KAlBQ,EAsBR;AAAE;AACAD,MAAAA,SAAS,EAAE,MADb;AAEEC,MAAAA,KAAK,EAAE,kBAFT;AAGEC,MAAAA,SAAS,EAAE;AAHb,KAtBQ,EA2BR;AAAE;AACAD,MAAAA,KAAK,EAAE,sBADT;AACiCC,MAAAA,SAAS,EAAE;AAD5C,KA3BQ,EA8BRZ,IAAI,CAACc,OAAL,CAAad,IAAI,CAACe,gBAAlB,EAAoC;AAACL,MAAAA,SAAS,EAAE,QAAZ;AAAsBE,MAAAA,SAAS,EAAE;AAAjC,KAApC,CA9BQ,EA+BRZ,IAAI,CAACc,OAAL,CAAad,IAAI,CAACgB,iBAAlB,EAAqC;AAACR,MAAAA,OAAO,EAAE;AAAV,KAArC,CA/BQ,EAgCR;AACEE,MAAAA,SAAS,EAAE,QADb;AAEEC,MAAAA,KAAK,EACH,kCACA,qBADA,GAEA,oBAFA,GAGA,wDANJ;AAOEC,MAAAA,SAAS,EAAE;AAPb,KAhCQ,EAyCR;AACED,MAAAA,KAAK,EAAE,IADT,CACc;;AADd,KAzCQ;AAtBL,GAAP;AAoED;;AAEDM,MAAM,CAACC,OAAP,GAAiBnB,KAAjB","sourcesContent":["/*\nLanguage: OCaml\nAuthor: Mehdi Dogguy <mehdi@dogguy.org>\nContributors: Nicolas Braud-Santoni <nicolas.braud-santoni@ens-cachan.fr>, Mickael Delahaye <mickael.delahaye@gmail.com>\nDescription: OCaml language definition.\nWebsite: https://ocaml.org\nCategory: functional\n*/\n\nfunction ocaml(hljs) {\n  /* missing support for heredoc-like string (OCaml 4.0.2+) */\n  return {\n    name: 'OCaml',\n    aliases: ['ml'],\n    keywords: {\n      $pattern: '[a-z_]\\\\w*!?',\n      keyword:\n        'and as assert asr begin class constraint do done downto else end ' +\n        'exception external for fun function functor if in include ' +\n        'inherit! inherit initializer land lazy let lor lsl lsr lxor match method!|10 method ' +\n        'mod module mutable new object of open! open or private rec sig struct ' +\n        'then to try type val! val virtual when while with ' +\n        /* camlp4 */\n        'parser value',\n      built_in:\n        /* built-in types */\n        'array bool bytes char exn|5 float int int32 int64 list lazy_t|5 nativeint|5 string unit ' +\n        /* (some) types in Pervasives */\n        'in_channel out_channel ref',\n      literal:\n        'true false'\n    },\n    illegal: /\\/\\/|>>/,\n    contains: [\n      {\n        className: 'literal',\n        begin: '\\\\[(\\\\|\\\\|)?\\\\]|\\\\(\\\\)',\n        relevance: 0\n      },\n      hljs.COMMENT(\n        '\\\\(\\\\*',\n        '\\\\*\\\\)',\n        {\n          contains: ['self']\n        }\n      ),\n      { /* type variable */\n        className: 'symbol',\n        begin: '\\'[A-Za-z_](?!\\')[\\\\w\\']*'\n        /* the grammar is ambiguous on how 'a'b should be interpreted but not the compiler */\n      },\n      { /* polymorphic variant */\n        className: 'type',\n        begin: '`[A-Z][\\\\w\\']*'\n      },\n      { /* module or constructor */\n        className: 'type',\n        begin: '\\\\b[A-Z][\\\\w\\']*',\n        relevance: 0\n      },\n      { /* don't color identifiers, but safely catch all identifiers with '*/\n        begin: '[a-z_]\\\\w*\\'[\\\\w\\']*', relevance: 0\n      },\n      hljs.inherit(hljs.APOS_STRING_MODE, {className: 'string', relevance: 0}),\n      hljs.inherit(hljs.QUOTE_STRING_MODE, {illegal: null}),\n      {\n        className: 'number',\n        begin:\n          '\\\\b(0[xX][a-fA-F0-9_]+[Lln]?|' +\n          '0[oO][0-7_]+[Lln]?|' +\n          '0[bB][01_]+[Lln]?|' +\n          '[0-9][0-9_]*([Lln]|(\\\\.[0-9_]*)?([eE][-+]?[0-9_]+)?)?)',\n        relevance: 0\n      },\n      {\n        begin: /->/ // relevance booster\n      }\n    ]\n  }\n}\n\nmodule.exports = ocaml;\n"]},"metadata":{},"sourceType":"script"}