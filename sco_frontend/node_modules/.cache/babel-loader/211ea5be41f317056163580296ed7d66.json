{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _excluded = [\"language\", \"children\", \"style\", \"customStyle\", \"codeTagProps\", \"useInlineStyles\", \"showLineNumbers\", \"showInlineLineNumbers\", \"startingLineNumber\", \"lineNumberContainerStyle\", \"lineNumberStyle\", \"wrapLines\", \"wrapLongLines\", \"lineProps\", \"renderer\", \"PreTag\", \"CodeTag\", \"code\", \"astGenerator\"];\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport React from 'react';\nimport createElement from './create-element';\nimport checkForListedLanguage from './checkForListedLanguage';\nvar newLineRegex = /\\n/g;\n\nfunction getNewLines(str) {\n  return str.match(newLineRegex);\n}\n\nfunction getAllLineNumbers(_ref) {\n  var lines = _ref.lines,\n      startingLineNumber = _ref.startingLineNumber,\n      style = _ref.style;\n  return lines.map(function (_, i) {\n    var number = i + startingLineNumber;\n    return /*#__PURE__*/React.createElement(\"span\", {\n      key: \"line-\".concat(i),\n      className: \"react-syntax-highlighter-line-number\",\n      style: typeof style === 'function' ? style(number) : style\n    }, \"\".concat(number, \"\\n\"));\n  });\n}\n\nfunction AllLineNumbers(_ref2) {\n  var codeString = _ref2.codeString,\n      codeStyle = _ref2.codeStyle,\n      _ref2$containerStyle = _ref2.containerStyle,\n      containerStyle = _ref2$containerStyle === void 0 ? {\n    \"float\": 'left',\n    paddingRight: '10px'\n  } : _ref2$containerStyle,\n      _ref2$numberStyle = _ref2.numberStyle,\n      numberStyle = _ref2$numberStyle === void 0 ? {} : _ref2$numberStyle,\n      startingLineNumber = _ref2.startingLineNumber;\n  return /*#__PURE__*/React.createElement(\"code\", {\n    style: Object.assign({}, codeStyle, containerStyle)\n  }, getAllLineNumbers({\n    lines: codeString.replace(/\\n$/, '').split('\\n'),\n    style: numberStyle,\n    startingLineNumber: startingLineNumber\n  }));\n}\n\nfunction getEmWidthOfNumber(num) {\n  return \"\".concat(num.toString().length, \".25em\");\n}\n\nfunction getInlineLineNumber(lineNumber, inlineLineNumberStyle) {\n  return {\n    type: 'element',\n    tagName: 'span',\n    properties: {\n      key: \"line-number--\".concat(lineNumber),\n      className: ['comment', 'linenumber', 'react-syntax-highlighter-line-number'],\n      style: inlineLineNumberStyle\n    },\n    children: [{\n      type: 'text',\n      value: lineNumber\n    }]\n  };\n}\n\nfunction assembleLineNumberStyles(lineNumberStyle, lineNumber, largestLineNumber) {\n  // minimally necessary styling for line numbers\n  var defaultLineNumberStyle = {\n    display: 'inline-block',\n    minWidth: getEmWidthOfNumber(largestLineNumber),\n    paddingRight: '1em',\n    textAlign: 'right',\n    userSelect: 'none'\n  }; // prep custom styling\n\n  var customLineNumberStyle = typeof lineNumberStyle === 'function' ? lineNumberStyle(lineNumber) : lineNumberStyle; // combine\n\n  var assembledStyle = _objectSpread(_objectSpread({}, defaultLineNumberStyle), customLineNumberStyle);\n\n  return assembledStyle;\n}\n\nfunction createLineElement(_ref3) {\n  var children = _ref3.children,\n      lineNumber = _ref3.lineNumber,\n      lineNumberStyle = _ref3.lineNumberStyle,\n      largestLineNumber = _ref3.largestLineNumber,\n      showInlineLineNumbers = _ref3.showInlineLineNumbers,\n      _ref3$lineProps = _ref3.lineProps,\n      lineProps = _ref3$lineProps === void 0 ? {} : _ref3$lineProps,\n      _ref3$className = _ref3.className,\n      className = _ref3$className === void 0 ? [] : _ref3$className,\n      showLineNumbers = _ref3.showLineNumbers,\n      wrapLongLines = _ref3.wrapLongLines;\n  var properties = typeof lineProps === 'function' ? lineProps(lineNumber) : lineProps;\n  properties['className'] = className;\n\n  if (lineNumber && showInlineLineNumbers) {\n    var inlineLineNumberStyle = assembleLineNumberStyles(lineNumberStyle, lineNumber, largestLineNumber);\n    children.unshift(getInlineLineNumber(lineNumber, inlineLineNumberStyle));\n  }\n\n  if (wrapLongLines & showLineNumbers) {\n    properties.style = _objectSpread(_objectSpread({}, properties.style), {}, {\n      display: 'flex'\n    });\n  }\n\n  return {\n    type: 'element',\n    tagName: 'span',\n    properties: properties,\n    children: children\n  };\n}\n\nfunction flattenCodeTree(tree) {\n  var className = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var newTree = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n  for (var i = 0; i < tree.length; i++) {\n    var node = tree[i];\n\n    if (node.type === 'text') {\n      newTree.push(createLineElement({\n        children: [node],\n        className: _toConsumableArray(new Set(className))\n      }));\n    } else if (node.children) {\n      var classNames = className.concat(node.properties.className);\n      flattenCodeTree(node.children, classNames).forEach(function (i) {\n        return newTree.push(i);\n      });\n    }\n  }\n\n  return newTree;\n}\n\nfunction processLines(codeTree, wrapLines, lineProps, showLineNumbers, showInlineLineNumbers, startingLineNumber, largestLineNumber, lineNumberStyle, wrapLongLines) {\n  var _ref4;\n\n  var tree = flattenCodeTree(codeTree.value);\n  var newTree = [];\n  var lastLineBreakIndex = -1;\n  var index = 0;\n\n  function createWrappedLine(children, lineNumber) {\n    var className = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    return createLineElement({\n      children: children,\n      lineNumber: lineNumber,\n      lineNumberStyle: lineNumberStyle,\n      largestLineNumber: largestLineNumber,\n      showInlineLineNumbers: showInlineLineNumbers,\n      lineProps: lineProps,\n      className: className,\n      showLineNumbers: showLineNumbers,\n      wrapLongLines: wrapLongLines\n    });\n  }\n\n  function createUnwrappedLine(children, lineNumber) {\n    if (showLineNumbers && lineNumber && showInlineLineNumbers) {\n      var inlineLineNumberStyle = assembleLineNumberStyles(lineNumberStyle, lineNumber, largestLineNumber);\n      children.unshift(getInlineLineNumber(lineNumber, inlineLineNumberStyle));\n    }\n\n    return children;\n  }\n\n  function createLine(children, lineNumber) {\n    var className = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    return wrapLines || className.length > 0 ? createWrappedLine(children, lineNumber, className) : createUnwrappedLine(children, lineNumber);\n  }\n\n  var _loop = function _loop() {\n    var node = tree[index];\n    var value = node.children[0].value;\n    var newLines = getNewLines(value);\n\n    if (newLines) {\n      var splitValue = value.split('\\n');\n      splitValue.forEach(function (text, i) {\n        var lineNumber = showLineNumbers && newTree.length + startingLineNumber;\n        var newChild = {\n          type: 'text',\n          value: \"\".concat(text, \"\\n\")\n        }; // if it's the first line\n\n        if (i === 0) {\n          var _children = tree.slice(lastLineBreakIndex + 1, index).concat(createLineElement({\n            children: [newChild],\n            className: node.properties.className\n          }));\n\n          var _line = createLine(_children, lineNumber);\n\n          newTree.push(_line); // if it's the last line\n        } else if (i === splitValue.length - 1) {\n          var stringChild = tree[index + 1] && tree[index + 1].children && tree[index + 1].children[0];\n          var lastLineInPreviousSpan = {\n            type: 'text',\n            value: \"\".concat(text)\n          };\n\n          if (stringChild) {\n            var newElem = createLineElement({\n              children: [lastLineInPreviousSpan],\n              className: node.properties.className\n            });\n            tree.splice(index + 1, 0, newElem);\n          } else {\n            var _children2 = [lastLineInPreviousSpan];\n\n            var _line2 = createLine(_children2, lineNumber, node.properties.className);\n\n            newTree.push(_line2);\n          } // if it's neither the first nor the last line\n\n        } else {\n          var _children3 = [newChild];\n\n          var _line3 = createLine(_children3, lineNumber, node.properties.className);\n\n          newTree.push(_line3);\n        }\n      });\n      lastLineBreakIndex = index;\n    }\n\n    index++;\n  };\n\n  while (index < tree.length) {\n    _loop();\n  }\n\n  if (lastLineBreakIndex !== tree.length - 1) {\n    var children = tree.slice(lastLineBreakIndex + 1, tree.length);\n\n    if (children && children.length) {\n      var lineNumber = showLineNumbers && newTree.length + startingLineNumber;\n      var line = createLine(children, lineNumber);\n      newTree.push(line);\n    }\n  }\n\n  return wrapLines ? newTree : (_ref4 = []).concat.apply(_ref4, newTree);\n}\n\nfunction defaultRenderer(_ref5) {\n  var rows = _ref5.rows,\n      stylesheet = _ref5.stylesheet,\n      useInlineStyles = _ref5.useInlineStyles;\n  return rows.map(function (node, i) {\n    return createElement({\n      node: node,\n      stylesheet: stylesheet,\n      useInlineStyles: useInlineStyles,\n      key: \"code-segement\".concat(i)\n    });\n  });\n} // only highlight.js has the highlightAuto method\n\n\nfunction isHighlightJs(astGenerator) {\n  return astGenerator && typeof astGenerator.highlightAuto !== 'undefined';\n}\n\nfunction getCodeTree(_ref6) {\n  var astGenerator = _ref6.astGenerator,\n      language = _ref6.language,\n      code = _ref6.code,\n      defaultCodeValue = _ref6.defaultCodeValue; // figure out whether we're using lowlight/highlight or refractor/prism\n  // then attempt highlighting accordingly\n  // lowlight/highlight?\n\n  if (isHighlightJs(astGenerator)) {\n    var hasLanguage = checkForListedLanguage(astGenerator, language);\n\n    if (language === 'text') {\n      return {\n        value: defaultCodeValue,\n        language: 'text'\n      };\n    } else if (hasLanguage) {\n      return astGenerator.highlight(language, code);\n    } else {\n      return astGenerator.highlightAuto(code);\n    }\n  } // must be refractor/prism, then\n\n\n  try {\n    return language && language !== 'text' ? {\n      value: astGenerator.highlight(code, language)\n    } : {\n      value: defaultCodeValue\n    };\n  } catch (e) {\n    return {\n      value: defaultCodeValue\n    };\n  }\n}\n\nexport default function (defaultAstGenerator, defaultStyle) {\n  return function SyntaxHighlighter(_ref7) {\n    var language = _ref7.language,\n        children = _ref7.children,\n        _ref7$style = _ref7.style,\n        style = _ref7$style === void 0 ? defaultStyle : _ref7$style,\n        _ref7$customStyle = _ref7.customStyle,\n        customStyle = _ref7$customStyle === void 0 ? {} : _ref7$customStyle,\n        _ref7$codeTagProps = _ref7.codeTagProps,\n        codeTagProps = _ref7$codeTagProps === void 0 ? {\n      className: language ? \"language-\".concat(language) : undefined,\n      style: _objectSpread(_objectSpread({}, style['code[class*=\"language-\"]']), style[\"code[class*=\\\"language-\".concat(language, \"\\\"]\")])\n    } : _ref7$codeTagProps,\n        _ref7$useInlineStyles = _ref7.useInlineStyles,\n        useInlineStyles = _ref7$useInlineStyles === void 0 ? true : _ref7$useInlineStyles,\n        _ref7$showLineNumbers = _ref7.showLineNumbers,\n        showLineNumbers = _ref7$showLineNumbers === void 0 ? false : _ref7$showLineNumbers,\n        _ref7$showInlineLineN = _ref7.showInlineLineNumbers,\n        showInlineLineNumbers = _ref7$showInlineLineN === void 0 ? true : _ref7$showInlineLineN,\n        _ref7$startingLineNum = _ref7.startingLineNumber,\n        startingLineNumber = _ref7$startingLineNum === void 0 ? 1 : _ref7$startingLineNum,\n        lineNumberContainerStyle = _ref7.lineNumberContainerStyle,\n        _ref7$lineNumberStyle = _ref7.lineNumberStyle,\n        lineNumberStyle = _ref7$lineNumberStyle === void 0 ? {} : _ref7$lineNumberStyle,\n        wrapLines = _ref7.wrapLines,\n        _ref7$wrapLongLines = _ref7.wrapLongLines,\n        wrapLongLines = _ref7$wrapLongLines === void 0 ? false : _ref7$wrapLongLines,\n        _ref7$lineProps = _ref7.lineProps,\n        lineProps = _ref7$lineProps === void 0 ? {} : _ref7$lineProps,\n        renderer = _ref7.renderer,\n        _ref7$PreTag = _ref7.PreTag,\n        PreTag = _ref7$PreTag === void 0 ? 'pre' : _ref7$PreTag,\n        _ref7$CodeTag = _ref7.CodeTag,\n        CodeTag = _ref7$CodeTag === void 0 ? 'code' : _ref7$CodeTag,\n        _ref7$code = _ref7.code,\n        code = _ref7$code === void 0 ? (Array.isArray(children) ? children[0] : children) || '' : _ref7$code,\n        astGenerator = _ref7.astGenerator,\n        rest = _objectWithoutProperties(_ref7, _excluded);\n\n    astGenerator = astGenerator || defaultAstGenerator;\n    var allLineNumbers = showLineNumbers ? /*#__PURE__*/React.createElement(AllLineNumbers, {\n      containerStyle: lineNumberContainerStyle,\n      codeStyle: codeTagProps.style || {},\n      numberStyle: lineNumberStyle,\n      startingLineNumber: startingLineNumber,\n      codeString: code\n    }) : null;\n    var defaultPreStyle = style.hljs || style['pre[class*=\"language-\"]'] || {\n      backgroundColor: '#fff'\n    };\n    var generatorClassName = isHighlightJs(astGenerator) ? 'hljs' : 'prismjs';\n    var preProps = useInlineStyles ? Object.assign({}, rest, {\n      style: Object.assign({}, defaultPreStyle, customStyle)\n    }) : Object.assign({}, rest, {\n      className: rest.className ? \"\".concat(generatorClassName, \" \").concat(rest.className) : generatorClassName,\n      style: Object.assign({}, customStyle)\n    });\n\n    if (wrapLongLines) {\n      codeTagProps.style = _objectSpread(_objectSpread({}, codeTagProps.style), {}, {\n        whiteSpace: 'pre-wrap'\n      });\n    } else {\n      codeTagProps.style = _objectSpread(_objectSpread({}, codeTagProps.style), {}, {\n        whiteSpace: 'pre'\n      });\n    }\n\n    if (!astGenerator) {\n      return /*#__PURE__*/React.createElement(PreTag, preProps, allLineNumbers, /*#__PURE__*/React.createElement(CodeTag, codeTagProps, code));\n    }\n    /*\n     * Some custom renderers rely on individual row elements so we need to turn wrapLines on\n     * if renderer is provided and wrapLines is undefined.\n     */\n\n\n    if (wrapLines === undefined && renderer || wrapLongLines) wrapLines = true;\n    renderer = renderer || defaultRenderer;\n    var defaultCodeValue = [{\n      type: 'text',\n      value: code\n    }];\n    var codeTree = getCodeTree({\n      astGenerator: astGenerator,\n      language: language,\n      code: code,\n      defaultCodeValue: defaultCodeValue\n    });\n\n    if (codeTree.language === null) {\n      codeTree.value = defaultCodeValue;\n    } // determine largest line number so that we can force minWidth on all linenumber elements\n\n\n    var largestLineNumber = codeTree.value.length + startingLineNumber;\n    var rows = processLines(codeTree, wrapLines, lineProps, showLineNumbers, showInlineLineNumbers, startingLineNumber, largestLineNumber, lineNumberStyle, wrapLongLines);\n    return /*#__PURE__*/React.createElement(PreTag, preProps, /*#__PURE__*/React.createElement(CodeTag, codeTagProps, !showInlineLineNumbers && allLineNumbers, renderer({\n      rows: rows,\n      stylesheet: style,\n      useInlineStyles: useInlineStyles\n    })));\n  };\n}","map":{"version":3,"sources":["C:/Users/Admin/Music/MANDO/ge-sc-machine/sco_frontend/node_modules/react-syntax-highlighter/dist/esm/highlight.js"],"names":["_objectWithoutProperties","_toConsumableArray","_defineProperty","_excluded","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","React","createElement","checkForListedLanguage","newLineRegex","getNewLines","str","match","getAllLineNumbers","_ref","lines","startingLineNumber","style","map","_","number","concat","className","AllLineNumbers","_ref2","codeString","codeStyle","_ref2$containerStyle","containerStyle","paddingRight","_ref2$numberStyle","numberStyle","assign","replace","split","getEmWidthOfNumber","num","toString","getInlineLineNumber","lineNumber","inlineLineNumberStyle","type","tagName","properties","children","value","assembleLineNumberStyles","lineNumberStyle","largestLineNumber","defaultLineNumberStyle","display","minWidth","textAlign","userSelect","customLineNumberStyle","assembledStyle","createLineElement","_ref3","showInlineLineNumbers","_ref3$lineProps","lineProps","_ref3$className","showLineNumbers","wrapLongLines","unshift","flattenCodeTree","tree","undefined","newTree","node","Set","classNames","processLines","codeTree","wrapLines","_ref4","lastLineBreakIndex","index","createWrappedLine","createUnwrappedLine","createLine","_loop","newLines","splitValue","text","newChild","_children","slice","_line","stringChild","lastLineInPreviousSpan","newElem","splice","_children2","_line2","_children3","_line3","line","defaultRenderer","_ref5","rows","stylesheet","useInlineStyles","isHighlightJs","astGenerator","highlightAuto","getCodeTree","_ref6","language","code","defaultCodeValue","hasLanguage","highlight","e","defaultAstGenerator","defaultStyle","SyntaxHighlighter","_ref7","_ref7$style","_ref7$customStyle","customStyle","_ref7$codeTagProps","codeTagProps","_ref7$useInlineStyles","_ref7$showLineNumbers","_ref7$showInlineLineN","_ref7$startingLineNum","lineNumberContainerStyle","_ref7$lineNumberStyle","_ref7$wrapLongLines","_ref7$lineProps","renderer","_ref7$PreTag","PreTag","_ref7$CodeTag","CodeTag","_ref7$code","Array","isArray","rest","allLineNumbers","defaultPreStyle","hljs","backgroundColor","generatorClassName","preProps","whiteSpace"],"mappings":"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","sourcesContent":["import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _excluded = [\"language\", \"children\", \"style\", \"customStyle\", \"codeTagProps\", \"useInlineStyles\", \"showLineNumbers\", \"showInlineLineNumbers\", \"startingLineNumber\", \"lineNumberContainerStyle\", \"lineNumberStyle\", \"wrapLines\", \"wrapLongLines\", \"lineProps\", \"renderer\", \"PreTag\", \"CodeTag\", \"code\", \"astGenerator\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React from 'react';\nimport createElement from './create-element';\nimport checkForListedLanguage from './checkForListedLanguage';\nvar newLineRegex = /\\n/g;\n\nfunction getNewLines(str) {\n  return str.match(newLineRegex);\n}\n\nfunction getAllLineNumbers(_ref) {\n  var lines = _ref.lines,\n      startingLineNumber = _ref.startingLineNumber,\n      style = _ref.style;\n  return lines.map(function (_, i) {\n    var number = i + startingLineNumber;\n    return /*#__PURE__*/React.createElement(\"span\", {\n      key: \"line-\".concat(i),\n      className: \"react-syntax-highlighter-line-number\",\n      style: typeof style === 'function' ? style(number) : style\n    }, \"\".concat(number, \"\\n\"));\n  });\n}\n\nfunction AllLineNumbers(_ref2) {\n  var codeString = _ref2.codeString,\n      codeStyle = _ref2.codeStyle,\n      _ref2$containerStyle = _ref2.containerStyle,\n      containerStyle = _ref2$containerStyle === void 0 ? {\n    \"float\": 'left',\n    paddingRight: '10px'\n  } : _ref2$containerStyle,\n      _ref2$numberStyle = _ref2.numberStyle,\n      numberStyle = _ref2$numberStyle === void 0 ? {} : _ref2$numberStyle,\n      startingLineNumber = _ref2.startingLineNumber;\n  return /*#__PURE__*/React.createElement(\"code\", {\n    style: Object.assign({}, codeStyle, containerStyle)\n  }, getAllLineNumbers({\n    lines: codeString.replace(/\\n$/, '').split('\\n'),\n    style: numberStyle,\n    startingLineNumber: startingLineNumber\n  }));\n}\n\nfunction getEmWidthOfNumber(num) {\n  return \"\".concat(num.toString().length, \".25em\");\n}\n\nfunction getInlineLineNumber(lineNumber, inlineLineNumberStyle) {\n  return {\n    type: 'element',\n    tagName: 'span',\n    properties: {\n      key: \"line-number--\".concat(lineNumber),\n      className: ['comment', 'linenumber', 'react-syntax-highlighter-line-number'],\n      style: inlineLineNumberStyle\n    },\n    children: [{\n      type: 'text',\n      value: lineNumber\n    }]\n  };\n}\n\nfunction assembleLineNumberStyles(lineNumberStyle, lineNumber, largestLineNumber) {\n  // minimally necessary styling for line numbers\n  var defaultLineNumberStyle = {\n    display: 'inline-block',\n    minWidth: getEmWidthOfNumber(largestLineNumber),\n    paddingRight: '1em',\n    textAlign: 'right',\n    userSelect: 'none'\n  }; // prep custom styling\n\n  var customLineNumberStyle = typeof lineNumberStyle === 'function' ? lineNumberStyle(lineNumber) : lineNumberStyle; // combine\n\n  var assembledStyle = _objectSpread(_objectSpread({}, defaultLineNumberStyle), customLineNumberStyle);\n\n  return assembledStyle;\n}\n\nfunction createLineElement(_ref3) {\n  var children = _ref3.children,\n      lineNumber = _ref3.lineNumber,\n      lineNumberStyle = _ref3.lineNumberStyle,\n      largestLineNumber = _ref3.largestLineNumber,\n      showInlineLineNumbers = _ref3.showInlineLineNumbers,\n      _ref3$lineProps = _ref3.lineProps,\n      lineProps = _ref3$lineProps === void 0 ? {} : _ref3$lineProps,\n      _ref3$className = _ref3.className,\n      className = _ref3$className === void 0 ? [] : _ref3$className,\n      showLineNumbers = _ref3.showLineNumbers,\n      wrapLongLines = _ref3.wrapLongLines;\n  var properties = typeof lineProps === 'function' ? lineProps(lineNumber) : lineProps;\n  properties['className'] = className;\n\n  if (lineNumber && showInlineLineNumbers) {\n    var inlineLineNumberStyle = assembleLineNumberStyles(lineNumberStyle, lineNumber, largestLineNumber);\n    children.unshift(getInlineLineNumber(lineNumber, inlineLineNumberStyle));\n  }\n\n  if (wrapLongLines & showLineNumbers) {\n    properties.style = _objectSpread(_objectSpread({}, properties.style), {}, {\n      display: 'flex'\n    });\n  }\n\n  return {\n    type: 'element',\n    tagName: 'span',\n    properties: properties,\n    children: children\n  };\n}\n\nfunction flattenCodeTree(tree) {\n  var className = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var newTree = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n  for (var i = 0; i < tree.length; i++) {\n    var node = tree[i];\n\n    if (node.type === 'text') {\n      newTree.push(createLineElement({\n        children: [node],\n        className: _toConsumableArray(new Set(className))\n      }));\n    } else if (node.children) {\n      var classNames = className.concat(node.properties.className);\n      flattenCodeTree(node.children, classNames).forEach(function (i) {\n        return newTree.push(i);\n      });\n    }\n  }\n\n  return newTree;\n}\n\nfunction processLines(codeTree, wrapLines, lineProps, showLineNumbers, showInlineLineNumbers, startingLineNumber, largestLineNumber, lineNumberStyle, wrapLongLines) {\n  var _ref4;\n\n  var tree = flattenCodeTree(codeTree.value);\n  var newTree = [];\n  var lastLineBreakIndex = -1;\n  var index = 0;\n\n  function createWrappedLine(children, lineNumber) {\n    var className = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    return createLineElement({\n      children: children,\n      lineNumber: lineNumber,\n      lineNumberStyle: lineNumberStyle,\n      largestLineNumber: largestLineNumber,\n      showInlineLineNumbers: showInlineLineNumbers,\n      lineProps: lineProps,\n      className: className,\n      showLineNumbers: showLineNumbers,\n      wrapLongLines: wrapLongLines\n    });\n  }\n\n  function createUnwrappedLine(children, lineNumber) {\n    if (showLineNumbers && lineNumber && showInlineLineNumbers) {\n      var inlineLineNumberStyle = assembleLineNumberStyles(lineNumberStyle, lineNumber, largestLineNumber);\n      children.unshift(getInlineLineNumber(lineNumber, inlineLineNumberStyle));\n    }\n\n    return children;\n  }\n\n  function createLine(children, lineNumber) {\n    var className = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    return wrapLines || className.length > 0 ? createWrappedLine(children, lineNumber, className) : createUnwrappedLine(children, lineNumber);\n  }\n\n  var _loop = function _loop() {\n    var node = tree[index];\n    var value = node.children[0].value;\n    var newLines = getNewLines(value);\n\n    if (newLines) {\n      var splitValue = value.split('\\n');\n      splitValue.forEach(function (text, i) {\n        var lineNumber = showLineNumbers && newTree.length + startingLineNumber;\n        var newChild = {\n          type: 'text',\n          value: \"\".concat(text, \"\\n\")\n        }; // if it's the first line\n\n        if (i === 0) {\n          var _children = tree.slice(lastLineBreakIndex + 1, index).concat(createLineElement({\n            children: [newChild],\n            className: node.properties.className\n          }));\n\n          var _line = createLine(_children, lineNumber);\n\n          newTree.push(_line); // if it's the last line\n        } else if (i === splitValue.length - 1) {\n          var stringChild = tree[index + 1] && tree[index + 1].children && tree[index + 1].children[0];\n          var lastLineInPreviousSpan = {\n            type: 'text',\n            value: \"\".concat(text)\n          };\n\n          if (stringChild) {\n            var newElem = createLineElement({\n              children: [lastLineInPreviousSpan],\n              className: node.properties.className\n            });\n            tree.splice(index + 1, 0, newElem);\n          } else {\n            var _children2 = [lastLineInPreviousSpan];\n\n            var _line2 = createLine(_children2, lineNumber, node.properties.className);\n\n            newTree.push(_line2);\n          } // if it's neither the first nor the last line\n\n        } else {\n          var _children3 = [newChild];\n\n          var _line3 = createLine(_children3, lineNumber, node.properties.className);\n\n          newTree.push(_line3);\n        }\n      });\n      lastLineBreakIndex = index;\n    }\n\n    index++;\n  };\n\n  while (index < tree.length) {\n    _loop();\n  }\n\n  if (lastLineBreakIndex !== tree.length - 1) {\n    var children = tree.slice(lastLineBreakIndex + 1, tree.length);\n\n    if (children && children.length) {\n      var lineNumber = showLineNumbers && newTree.length + startingLineNumber;\n      var line = createLine(children, lineNumber);\n      newTree.push(line);\n    }\n  }\n\n  return wrapLines ? newTree : (_ref4 = []).concat.apply(_ref4, newTree);\n}\n\nfunction defaultRenderer(_ref5) {\n  var rows = _ref5.rows,\n      stylesheet = _ref5.stylesheet,\n      useInlineStyles = _ref5.useInlineStyles;\n  return rows.map(function (node, i) {\n    return createElement({\n      node: node,\n      stylesheet: stylesheet,\n      useInlineStyles: useInlineStyles,\n      key: \"code-segement\".concat(i)\n    });\n  });\n} // only highlight.js has the highlightAuto method\n\n\nfunction isHighlightJs(astGenerator) {\n  return astGenerator && typeof astGenerator.highlightAuto !== 'undefined';\n}\n\nfunction getCodeTree(_ref6) {\n  var astGenerator = _ref6.astGenerator,\n      language = _ref6.language,\n      code = _ref6.code,\n      defaultCodeValue = _ref6.defaultCodeValue;\n\n  // figure out whether we're using lowlight/highlight or refractor/prism\n  // then attempt highlighting accordingly\n  // lowlight/highlight?\n  if (isHighlightJs(astGenerator)) {\n    var hasLanguage = checkForListedLanguage(astGenerator, language);\n\n    if (language === 'text') {\n      return {\n        value: defaultCodeValue,\n        language: 'text'\n      };\n    } else if (hasLanguage) {\n      return astGenerator.highlight(language, code);\n    } else {\n      return astGenerator.highlightAuto(code);\n    }\n  } // must be refractor/prism, then\n\n\n  try {\n    return language && language !== 'text' ? {\n      value: astGenerator.highlight(code, language)\n    } : {\n      value: defaultCodeValue\n    };\n  } catch (e) {\n    return {\n      value: defaultCodeValue\n    };\n  }\n}\n\nexport default function (defaultAstGenerator, defaultStyle) {\n  return function SyntaxHighlighter(_ref7) {\n    var language = _ref7.language,\n        children = _ref7.children,\n        _ref7$style = _ref7.style,\n        style = _ref7$style === void 0 ? defaultStyle : _ref7$style,\n        _ref7$customStyle = _ref7.customStyle,\n        customStyle = _ref7$customStyle === void 0 ? {} : _ref7$customStyle,\n        _ref7$codeTagProps = _ref7.codeTagProps,\n        codeTagProps = _ref7$codeTagProps === void 0 ? {\n      className: language ? \"language-\".concat(language) : undefined,\n      style: _objectSpread(_objectSpread({}, style['code[class*=\"language-\"]']), style[\"code[class*=\\\"language-\".concat(language, \"\\\"]\")])\n    } : _ref7$codeTagProps,\n        _ref7$useInlineStyles = _ref7.useInlineStyles,\n        useInlineStyles = _ref7$useInlineStyles === void 0 ? true : _ref7$useInlineStyles,\n        _ref7$showLineNumbers = _ref7.showLineNumbers,\n        showLineNumbers = _ref7$showLineNumbers === void 0 ? false : _ref7$showLineNumbers,\n        _ref7$showInlineLineN = _ref7.showInlineLineNumbers,\n        showInlineLineNumbers = _ref7$showInlineLineN === void 0 ? true : _ref7$showInlineLineN,\n        _ref7$startingLineNum = _ref7.startingLineNumber,\n        startingLineNumber = _ref7$startingLineNum === void 0 ? 1 : _ref7$startingLineNum,\n        lineNumberContainerStyle = _ref7.lineNumberContainerStyle,\n        _ref7$lineNumberStyle = _ref7.lineNumberStyle,\n        lineNumberStyle = _ref7$lineNumberStyle === void 0 ? {} : _ref7$lineNumberStyle,\n        wrapLines = _ref7.wrapLines,\n        _ref7$wrapLongLines = _ref7.wrapLongLines,\n        wrapLongLines = _ref7$wrapLongLines === void 0 ? false : _ref7$wrapLongLines,\n        _ref7$lineProps = _ref7.lineProps,\n        lineProps = _ref7$lineProps === void 0 ? {} : _ref7$lineProps,\n        renderer = _ref7.renderer,\n        _ref7$PreTag = _ref7.PreTag,\n        PreTag = _ref7$PreTag === void 0 ? 'pre' : _ref7$PreTag,\n        _ref7$CodeTag = _ref7.CodeTag,\n        CodeTag = _ref7$CodeTag === void 0 ? 'code' : _ref7$CodeTag,\n        _ref7$code = _ref7.code,\n        code = _ref7$code === void 0 ? (Array.isArray(children) ? children[0] : children) || '' : _ref7$code,\n        astGenerator = _ref7.astGenerator,\n        rest = _objectWithoutProperties(_ref7, _excluded);\n\n    astGenerator = astGenerator || defaultAstGenerator;\n    var allLineNumbers = showLineNumbers ? /*#__PURE__*/React.createElement(AllLineNumbers, {\n      containerStyle: lineNumberContainerStyle,\n      codeStyle: codeTagProps.style || {},\n      numberStyle: lineNumberStyle,\n      startingLineNumber: startingLineNumber,\n      codeString: code\n    }) : null;\n    var defaultPreStyle = style.hljs || style['pre[class*=\"language-\"]'] || {\n      backgroundColor: '#fff'\n    };\n    var generatorClassName = isHighlightJs(astGenerator) ? 'hljs' : 'prismjs';\n    var preProps = useInlineStyles ? Object.assign({}, rest, {\n      style: Object.assign({}, defaultPreStyle, customStyle)\n    }) : Object.assign({}, rest, {\n      className: rest.className ? \"\".concat(generatorClassName, \" \").concat(rest.className) : generatorClassName,\n      style: Object.assign({}, customStyle)\n    });\n\n    if (wrapLongLines) {\n      codeTagProps.style = _objectSpread(_objectSpread({}, codeTagProps.style), {}, {\n        whiteSpace: 'pre-wrap'\n      });\n    } else {\n      codeTagProps.style = _objectSpread(_objectSpread({}, codeTagProps.style), {}, {\n        whiteSpace: 'pre'\n      });\n    }\n\n    if (!astGenerator) {\n      return /*#__PURE__*/React.createElement(PreTag, preProps, allLineNumbers, /*#__PURE__*/React.createElement(CodeTag, codeTagProps, code));\n    }\n    /*\n     * Some custom renderers rely on individual row elements so we need to turn wrapLines on\n     * if renderer is provided and wrapLines is undefined.\n     */\n\n\n    if (wrapLines === undefined && renderer || wrapLongLines) wrapLines = true;\n    renderer = renderer || defaultRenderer;\n    var defaultCodeValue = [{\n      type: 'text',\n      value: code\n    }];\n    var codeTree = getCodeTree({\n      astGenerator: astGenerator,\n      language: language,\n      code: code,\n      defaultCodeValue: defaultCodeValue\n    });\n\n    if (codeTree.language === null) {\n      codeTree.value = defaultCodeValue;\n    } // determine largest line number so that we can force minWidth on all linenumber elements\n\n\n    var largestLineNumber = codeTree.value.length + startingLineNumber;\n    var rows = processLines(codeTree, wrapLines, lineProps, showLineNumbers, showInlineLineNumbers, startingLineNumber, largestLineNumber, lineNumberStyle, wrapLongLines);\n    return /*#__PURE__*/React.createElement(PreTag, preProps, /*#__PURE__*/React.createElement(CodeTag, codeTagProps, !showInlineLineNumbers && allLineNumbers, renderer({\n      rows: rows,\n      stylesheet: style,\n      useInlineStyles: useInlineStyles\n    })));\n  };\n}"]},"metadata":{},"sourceType":"module"}