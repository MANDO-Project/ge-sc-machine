{"ast":null,"code":"/*\n Language: Zephir\n Description: Zephir, an open source, high-level language designed to ease the creation and maintainability of extensions for PHP with a focus on type and memory safety.\n Author: Oleg Efimov <efimovov@gmail.com>\n Website: https://zephir-lang.com/en\n Audit: 2020\n */\n\n/** @type LanguageFn */\nfunction zephir(hljs) {\n  const STRING = {\n    className: 'string',\n    contains: [hljs.BACKSLASH_ESCAPE],\n    variants: [hljs.inherit(hljs.APOS_STRING_MODE, {\n      illegal: null\n    }), hljs.inherit(hljs.QUOTE_STRING_MODE, {\n      illegal: null\n    })]\n  };\n  const TITLE_MODE = hljs.UNDERSCORE_TITLE_MODE;\n  const NUMBER = {\n    variants: [hljs.BINARY_NUMBER_MODE, hljs.C_NUMBER_MODE]\n  };\n  const KEYWORDS = // classes and objects\n  'namespace class interface use extends ' + 'function return ' + 'abstract final public protected private static deprecated ' + // error handling\n  'throw try catch Exception ' + // keyword-ish things their website does NOT seem to highlight (in their own snippets)\n  // 'typeof fetch in ' +\n  // operators/helpers\n  'echo empty isset instanceof unset ' + // assignment/variables\n  'let var new const self ' + // control\n  'require ' + 'if else elseif switch case default ' + 'do while loop for continue break ' + 'likely unlikely ' + // magic constants\n  // https://github.com/phalcon/zephir/blob/master/Library/Expression/Constants.php\n  '__LINE__ __FILE__ __DIR__ __FUNCTION__ __CLASS__ __TRAIT__ __METHOD__ __NAMESPACE__ ' + // types - https://docs.zephir-lang.com/0.12/en/types\n  'array boolean float double integer object resource string ' + 'char long unsigned bool int uint ulong uchar ' + // built-ins\n  'true false null undefined';\n  return {\n    name: 'Zephir',\n    aliases: ['zep'],\n    keywords: KEYWORDS,\n    contains: [hljs.C_LINE_COMMENT_MODE, hljs.COMMENT(/\\/\\*/, /\\*\\//, {\n      contains: [{\n        className: 'doctag',\n        begin: /@[A-Za-z]+/\n      }]\n    }), {\n      className: 'string',\n      begin: /<<<['\"]?\\w+['\"]?$/,\n      end: /^\\w+;/,\n      contains: [hljs.BACKSLASH_ESCAPE]\n    }, {\n      // swallow composed identifiers to avoid parsing them as keywords\n      begin: /(::|->)+[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*/\n    }, {\n      className: 'function',\n      beginKeywords: 'function fn',\n      end: /[;{]/,\n      excludeEnd: true,\n      illegal: /\\$|\\[|%/,\n      contains: [TITLE_MODE, {\n        className: 'params',\n        begin: /\\(/,\n        end: /\\)/,\n        keywords: KEYWORDS,\n        contains: ['self', hljs.C_BLOCK_COMMENT_MODE, STRING, NUMBER]\n      }]\n    }, {\n      className: 'class',\n      beginKeywords: 'class interface',\n      end: /\\{/,\n      excludeEnd: true,\n      illegal: /[:($\"]/,\n      contains: [{\n        beginKeywords: 'extends implements'\n      }, TITLE_MODE]\n    }, {\n      beginKeywords: 'namespace',\n      end: /;/,\n      illegal: /[.']/,\n      contains: [TITLE_MODE]\n    }, {\n      beginKeywords: 'use',\n      end: /;/,\n      contains: [TITLE_MODE]\n    }, {\n      begin: /=>/ // No markup, just a relevance booster\n\n    }, STRING, NUMBER]\n  };\n}\n\nmodule.exports = zephir;","map":{"version":3,"sources":["C:/Users/Admin/Music/MANDO/ge-sc-machine/sco_frontend/node_modules/highlight.js/lib/languages/zephir.js"],"names":["zephir","hljs","STRING","className","contains","BACKSLASH_ESCAPE","variants","inherit","APOS_STRING_MODE","illegal","QUOTE_STRING_MODE","TITLE_MODE","UNDERSCORE_TITLE_MODE","NUMBER","BINARY_NUMBER_MODE","C_NUMBER_MODE","KEYWORDS","name","aliases","keywords","C_LINE_COMMENT_MODE","COMMENT","begin","end","beginKeywords","excludeEnd","C_BLOCK_COMMENT_MODE","module","exports"],"mappings":"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","sourcesContent":["/*\n Language: Zephir\n Description: Zephir, an open source, high-level language designed to ease the creation and maintainability of extensions for PHP with a focus on type and memory safety.\n Author: Oleg Efimov <efimovov@gmail.com>\n Website: https://zephir-lang.com/en\n Audit: 2020\n */\n\n/** @type LanguageFn */\nfunction zephir(hljs) {\n  const STRING = {\n    className: 'string',\n    contains: [ hljs.BACKSLASH_ESCAPE ],\n    variants: [\n      hljs.inherit(hljs.APOS_STRING_MODE, {\n        illegal: null\n      }),\n      hljs.inherit(hljs.QUOTE_STRING_MODE, {\n        illegal: null\n      })\n    ]\n  };\n  const TITLE_MODE = hljs.UNDERSCORE_TITLE_MODE;\n  const NUMBER = {\n    variants: [\n      hljs.BINARY_NUMBER_MODE,\n      hljs.C_NUMBER_MODE\n    ]\n  };\n  const KEYWORDS =\n    // classes and objects\n    'namespace class interface use extends ' +\n    'function return ' +\n    'abstract final public protected private static deprecated ' +\n    // error handling\n    'throw try catch Exception ' +\n    // keyword-ish things their website does NOT seem to highlight (in their own snippets)\n    // 'typeof fetch in ' +\n    // operators/helpers\n    'echo empty isset instanceof unset ' +\n    // assignment/variables\n    'let var new const self ' +\n    // control\n    'require ' +\n    'if else elseif switch case default ' +\n    'do while loop for continue break ' +\n    'likely unlikely ' +\n    // magic constants\n    // https://github.com/phalcon/zephir/blob/master/Library/Expression/Constants.php\n    '__LINE__ __FILE__ __DIR__ __FUNCTION__ __CLASS__ __TRAIT__ __METHOD__ __NAMESPACE__ ' +\n    // types - https://docs.zephir-lang.com/0.12/en/types\n    'array boolean float double integer object resource string ' +\n    'char long unsigned bool int uint ulong uchar ' +\n    // built-ins\n    'true false null undefined';\n\n  return {\n    name: 'Zephir',\n    aliases: [ 'zep' ],\n    keywords: KEYWORDS,\n    contains: [\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.COMMENT(\n        /\\/\\*/,\n        /\\*\\//,\n        {\n          contains: [\n            {\n              className: 'doctag',\n              begin: /@[A-Za-z]+/\n            }\n          ]\n        }\n      ),\n      {\n        className: 'string',\n        begin: /<<<['\"]?\\w+['\"]?$/,\n        end: /^\\w+;/,\n        contains: [ hljs.BACKSLASH_ESCAPE ]\n      },\n      {\n        // swallow composed identifiers to avoid parsing them as keywords\n        begin: /(::|->)+[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*/\n      },\n      {\n        className: 'function',\n        beginKeywords: 'function fn',\n        end: /[;{]/,\n        excludeEnd: true,\n        illegal: /\\$|\\[|%/,\n        contains: [\n          TITLE_MODE,\n          {\n            className: 'params',\n            begin: /\\(/,\n            end: /\\)/,\n            keywords: KEYWORDS,\n            contains: [\n              'self',\n              hljs.C_BLOCK_COMMENT_MODE,\n              STRING,\n              NUMBER\n            ]\n          }\n        ]\n      },\n      {\n        className: 'class',\n        beginKeywords: 'class interface',\n        end: /\\{/,\n        excludeEnd: true,\n        illegal: /[:($\"]/,\n        contains: [\n          {\n            beginKeywords: 'extends implements'\n          },\n          TITLE_MODE\n        ]\n      },\n      {\n        beginKeywords: 'namespace',\n        end: /;/,\n        illegal: /[.']/,\n        contains: [ TITLE_MODE ]\n      },\n      {\n        beginKeywords: 'use',\n        end: /;/,\n        contains: [ TITLE_MODE ]\n      },\n      {\n        begin: /=>/ // No markup, just a relevance booster\n      },\n      STRING,\n      NUMBER\n    ]\n  };\n}\n\nmodule.exports = zephir;\n"]},"metadata":{},"sourceType":"script"}