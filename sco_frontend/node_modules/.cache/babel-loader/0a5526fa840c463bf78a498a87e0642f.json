{"ast":null,"code":"/*\nLanguage: Smalltalk\nDescription: Smalltalk is an object-oriented, dynamically typed reflective programming language.\nAuthor: Vladimir Gubarkov <xonixx@gmail.com>\nWebsite: https://en.wikipedia.org/wiki/Smalltalk\n*/\nfunction smalltalk(hljs) {\n  const VAR_IDENT_RE = '[a-z][a-zA-Z0-9_]*';\n  const CHAR = {\n    className: 'string',\n    begin: '\\\\$.{1}'\n  };\n  const SYMBOL = {\n    className: 'symbol',\n    begin: '#' + hljs.UNDERSCORE_IDENT_RE\n  };\n  return {\n    name: 'Smalltalk',\n    aliases: ['st'],\n    keywords: 'self super nil true false thisContext',\n    // only 6\n    contains: [hljs.COMMENT('\"', '\"'), hljs.APOS_STRING_MODE, {\n      className: 'type',\n      begin: '\\\\b[A-Z][A-Za-z0-9_]*',\n      relevance: 0\n    }, {\n      begin: VAR_IDENT_RE + ':',\n      relevance: 0\n    }, hljs.C_NUMBER_MODE, SYMBOL, CHAR, {\n      // This looks more complicated than needed to avoid combinatorial\n      // explosion under V8. It effectively means `| var1 var2 ... |` with\n      // whitespace adjacent to `|` being optional.\n      begin: '\\\\|[ ]*' + VAR_IDENT_RE + '([ ]+' + VAR_IDENT_RE + ')*[ ]*\\\\|',\n      returnBegin: true,\n      end: /\\|/,\n      illegal: /\\S/,\n      contains: [{\n        begin: '(\\\\|[ ]*)?' + VAR_IDENT_RE\n      }]\n    }, {\n      begin: '#\\\\(',\n      end: '\\\\)',\n      contains: [hljs.APOS_STRING_MODE, CHAR, hljs.C_NUMBER_MODE, SYMBOL]\n    }]\n  };\n}\n\nmodule.exports = smalltalk;","map":{"version":3,"sources":["C:/Users/Admin/Music/MANDO/ge-sc-machine/sco_frontend/node_modules/highlight.js/lib/languages/smalltalk.js"],"names":["smalltalk","hljs","VAR_IDENT_RE","CHAR","className","begin","SYMBOL","UNDERSCORE_IDENT_RE","name","aliases","keywords","contains","COMMENT","APOS_STRING_MODE","relevance","C_NUMBER_MODE","returnBegin","end","illegal","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,SAAT,CAAmBC,IAAnB,EAAyB;AACvB,QAAMC,YAAY,GAAG,oBAArB;AACA,QAAMC,IAAI,GAAG;AACXC,IAAAA,SAAS,EAAE,QADA;AAEXC,IAAAA,KAAK,EAAE;AAFI,GAAb;AAIA,QAAMC,MAAM,GAAG;AACbF,IAAAA,SAAS,EAAE,QADE;AAEbC,IAAAA,KAAK,EAAE,MAAMJ,IAAI,CAACM;AAFL,GAAf;AAIA,SAAO;AACLC,IAAAA,IAAI,EAAE,WADD;AAELC,IAAAA,OAAO,EAAE,CAAE,IAAF,CAFJ;AAGLC,IAAAA,QAAQ,EAAE,uCAHL;AAG8C;AACnDC,IAAAA,QAAQ,EAAE,CACRV,IAAI,CAACW,OAAL,CAAa,GAAb,EAAkB,GAAlB,CADQ,EAERX,IAAI,CAACY,gBAFG,EAGR;AACET,MAAAA,SAAS,EAAE,MADb;AAEEC,MAAAA,KAAK,EAAE,uBAFT;AAGES,MAAAA,SAAS,EAAE;AAHb,KAHQ,EAQR;AACET,MAAAA,KAAK,EAAEH,YAAY,GAAG,GADxB;AAEEY,MAAAA,SAAS,EAAE;AAFb,KARQ,EAYRb,IAAI,CAACc,aAZG,EAaRT,MAbQ,EAcRH,IAdQ,EAeR;AACE;AACA;AACA;AACAE,MAAAA,KAAK,EAAE,YAAYH,YAAZ,GAA2B,OAA3B,GAAqCA,YAArC,GAAoD,WAJ7D;AAKEc,MAAAA,WAAW,EAAE,IALf;AAMEC,MAAAA,GAAG,EAAE,IANP;AAOEC,MAAAA,OAAO,EAAE,IAPX;AAQEP,MAAAA,QAAQ,EAAE,CAAE;AACVN,QAAAA,KAAK,EAAE,eAAeH;AADZ,OAAF;AARZ,KAfQ,EA2BR;AACEG,MAAAA,KAAK,EAAE,MADT;AAEEY,MAAAA,GAAG,EAAE,KAFP;AAGEN,MAAAA,QAAQ,EAAE,CACRV,IAAI,CAACY,gBADG,EAERV,IAFQ,EAGRF,IAAI,CAACc,aAHG,EAIRT,MAJQ;AAHZ,KA3BQ;AAJL,GAAP;AA2CD;;AAEDa,MAAM,CAACC,OAAP,GAAiBpB,SAAjB","sourcesContent":["/*\nLanguage: Smalltalk\nDescription: Smalltalk is an object-oriented, dynamically typed reflective programming language.\nAuthor: Vladimir Gubarkov <xonixx@gmail.com>\nWebsite: https://en.wikipedia.org/wiki/Smalltalk\n*/\n\nfunction smalltalk(hljs) {\n  const VAR_IDENT_RE = '[a-z][a-zA-Z0-9_]*';\n  const CHAR = {\n    className: 'string',\n    begin: '\\\\$.{1}'\n  };\n  const SYMBOL = {\n    className: 'symbol',\n    begin: '#' + hljs.UNDERSCORE_IDENT_RE\n  };\n  return {\n    name: 'Smalltalk',\n    aliases: [ 'st' ],\n    keywords: 'self super nil true false thisContext', // only 6\n    contains: [\n      hljs.COMMENT('\"', '\"'),\n      hljs.APOS_STRING_MODE,\n      {\n        className: 'type',\n        begin: '\\\\b[A-Z][A-Za-z0-9_]*',\n        relevance: 0\n      },\n      {\n        begin: VAR_IDENT_RE + ':',\n        relevance: 0\n      },\n      hljs.C_NUMBER_MODE,\n      SYMBOL,\n      CHAR,\n      {\n        // This looks more complicated than needed to avoid combinatorial\n        // explosion under V8. It effectively means `| var1 var2 ... |` with\n        // whitespace adjacent to `|` being optional.\n        begin: '\\\\|[ ]*' + VAR_IDENT_RE + '([ ]+' + VAR_IDENT_RE + ')*[ ]*\\\\|',\n        returnBegin: true,\n        end: /\\|/,\n        illegal: /\\S/,\n        contains: [ {\n          begin: '(\\\\|[ ]*)?' + VAR_IDENT_RE\n        } ]\n      },\n      {\n        begin: '#\\\\(',\n        end: '\\\\)',\n        contains: [\n          hljs.APOS_STRING_MODE,\n          CHAR,\n          hljs.C_NUMBER_MODE,\n          SYMBOL\n        ]\n      }\n    ]\n  };\n}\n\nmodule.exports = smalltalk;\n"]},"metadata":{},"sourceType":"script"}