{"ast":null,"code":"/*\nLanguage: Julia\nDescription: Julia is a high-level, high-performance, dynamic programming language.\nAuthor: Kenta Sato <bicycle1885@gmail.com>\nContributors: Alex Arslan <ararslan@comcast.net>, Fredrik Ekre <ekrefredrik@gmail.com>\nWebsite: https://julialang.org\n*/\nfunction julia(hljs) {\n  // Since there are numerous special names in Julia, it is too much trouble\n  // to maintain them by hand. Hence these names (i.e. keywords, literals and\n  // built-ins) are automatically generated from Julia 1.5.2 itself through\n  // the following scripts for each.\n  // ref: https://docs.julialang.org/en/v1/manual/variables/#Allowed-Variable-Names\n  var VARIABLE_NAME_RE = '[A-Za-z_\\\\u00A1-\\\\uFFFF][A-Za-z_0-9\\\\u00A1-\\\\uFFFF]*'; // # keyword generator, multi-word keywords handled manually below (Julia 1.5.2)\n  // import REPL.REPLCompletions\n  // res = String[\"in\", \"isa\", \"where\"]\n  // for kw in collect(x.keyword for x in REPLCompletions.complete_keyword(\"\"))\n  //     if !(contains(kw, \" \") || kw == \"struct\")\n  //         push!(res, kw)\n  //     end\n  // end\n  // sort!(unique!(res))\n  // foreach(x -> println(\"\\'\", x, \"\\',\"), res)\n\n  var KEYWORD_LIST = ['baremodule', 'begin', 'break', 'catch', 'ccall', 'const', 'continue', 'do', 'else', 'elseif', 'end', 'export', 'false', 'finally', 'for', 'function', 'global', 'if', 'import', 'in', 'isa', 'let', 'local', 'macro', 'module', 'quote', 'return', 'true', 'try', 'using', 'where', 'while']; // # literal generator (Julia 1.5.2)\n  // import REPL.REPLCompletions\n  // res = String[\"true\", \"false\"]\n  // for compl in filter!(x -> isa(x, REPLCompletions.ModuleCompletion) && (x.parent === Base || x.parent === Core),\n  //                     REPLCompletions.completions(\"\", 0)[1])\n  //     try\n  //         v = eval(Symbol(compl.mod))\n  //         if !(v isa Function || v isa Type || v isa TypeVar || v isa Module || v isa Colon)\n  //             push!(res, compl.mod)\n  //         end\n  //     catch e\n  //     end\n  // end\n  // sort!(unique!(res))\n  // foreach(x -> println(\"\\'\", x, \"\\',\"), res)\n\n  var LITERAL_LIST = ['ARGS', 'C_NULL', 'DEPOT_PATH', 'ENDIAN_BOM', 'ENV', 'Inf', 'Inf16', 'Inf32', 'Inf64', 'InsertionSort', 'LOAD_PATH', 'MergeSort', 'NaN', 'NaN16', 'NaN32', 'NaN64', 'PROGRAM_FILE', 'QuickSort', 'RoundDown', 'RoundFromZero', 'RoundNearest', 'RoundNearestTiesAway', 'RoundNearestTiesUp', 'RoundToZero', 'RoundUp', 'VERSION|0', 'devnull', 'false', 'im', 'missing', 'nothing', 'pi', 'stderr', 'stdin', 'stdout', 'true', 'undef', 'π', 'ℯ']; // # built_in generator (Julia 1.5.2)\n  // import REPL.REPLCompletions\n  // res = String[]\n  // for compl in filter!(x -> isa(x, REPLCompletions.ModuleCompletion) && (x.parent === Base || x.parent === Core),\n  //                     REPLCompletions.completions(\"\", 0)[1])\n  //     try\n  //         v = eval(Symbol(compl.mod))\n  //         if (v isa Type || v isa TypeVar) && (compl.mod != \"=>\")\n  //             push!(res, compl.mod)\n  //         end\n  //     catch e\n  //     end\n  // end\n  // sort!(unique!(res))\n  // foreach(x -> println(\"\\'\", x, \"\\',\"), res)\n\n  var BUILT_IN_LIST = ['AbstractArray', 'AbstractChannel', 'AbstractChar', 'AbstractDict', 'AbstractDisplay', 'AbstractFloat', 'AbstractIrrational', 'AbstractMatrix', 'AbstractRange', 'AbstractSet', 'AbstractString', 'AbstractUnitRange', 'AbstractVecOrMat', 'AbstractVector', 'Any', 'ArgumentError', 'Array', 'AssertionError', 'BigFloat', 'BigInt', 'BitArray', 'BitMatrix', 'BitSet', 'BitVector', 'Bool', 'BoundsError', 'CapturedException', 'CartesianIndex', 'CartesianIndices', 'Cchar', 'Cdouble', 'Cfloat', 'Channel', 'Char', 'Cint', 'Cintmax_t', 'Clong', 'Clonglong', 'Cmd', 'Colon', 'Complex', 'ComplexF16', 'ComplexF32', 'ComplexF64', 'CompositeException', 'Condition', 'Cptrdiff_t', 'Cshort', 'Csize_t', 'Cssize_t', 'Cstring', 'Cuchar', 'Cuint', 'Cuintmax_t', 'Culong', 'Culonglong', 'Cushort', 'Cvoid', 'Cwchar_t', 'Cwstring', 'DataType', 'DenseArray', 'DenseMatrix', 'DenseVecOrMat', 'DenseVector', 'Dict', 'DimensionMismatch', 'Dims', 'DivideError', 'DomainError', 'EOFError', 'Enum', 'ErrorException', 'Exception', 'ExponentialBackOff', 'Expr', 'Float16', 'Float32', 'Float64', 'Function', 'GlobalRef', 'HTML', 'IO', 'IOBuffer', 'IOContext', 'IOStream', 'IdDict', 'IndexCartesian', 'IndexLinear', 'IndexStyle', 'InexactError', 'InitError', 'Int', 'Int128', 'Int16', 'Int32', 'Int64', 'Int8', 'Integer', 'InterruptException', 'InvalidStateException', 'Irrational', 'KeyError', 'LinRange', 'LineNumberNode', 'LinearIndices', 'LoadError', 'MIME', 'Matrix', 'Method', 'MethodError', 'Missing', 'MissingException', 'Module', 'NTuple', 'NamedTuple', 'Nothing', 'Number', 'OrdinalRange', 'OutOfMemoryError', 'OverflowError', 'Pair', 'PartialQuickSort', 'PermutedDimsArray', 'Pipe', 'ProcessFailedException', 'Ptr', 'QuoteNode', 'Rational', 'RawFD', 'ReadOnlyMemoryError', 'Real', 'ReentrantLock', 'Ref', 'Regex', 'RegexMatch', 'RoundingMode', 'SegmentationFault', 'Set', 'Signed', 'Some', 'StackOverflowError', 'StepRange', 'StepRangeLen', 'StridedArray', 'StridedMatrix', 'StridedVecOrMat', 'StridedVector', 'String', 'StringIndexError', 'SubArray', 'SubString', 'SubstitutionString', 'Symbol', 'SystemError', 'Task', 'TaskFailedException', 'Text', 'TextDisplay', 'Timer', 'Tuple', 'Type', 'TypeError', 'TypeVar', 'UInt', 'UInt128', 'UInt16', 'UInt32', 'UInt64', 'UInt8', 'UndefInitializer', 'UndefKeywordError', 'UndefRefError', 'UndefVarError', 'Union', 'UnionAll', 'UnitRange', 'Unsigned', 'Val', 'Vararg', 'VecElement', 'VecOrMat', 'Vector', 'VersionNumber', 'WeakKeyDict', 'WeakRef'];\n  var KEYWORDS = {\n    $pattern: VARIABLE_NAME_RE,\n    keyword: KEYWORD_LIST,\n    literal: LITERAL_LIST,\n    built_in: BUILT_IN_LIST\n  }; // placeholder for recursive self-reference\n\n  var DEFAULT = {\n    keywords: KEYWORDS,\n    illegal: /<\\//\n  }; // ref: https://docs.julialang.org/en/v1/manual/integers-and-floating-point-numbers/\n\n  var NUMBER = {\n    className: 'number',\n    // supported numeric literals:\n    //  * binary literal (e.g. 0x10)\n    //  * octal literal (e.g. 0o76543210)\n    //  * hexadecimal literal (e.g. 0xfedcba876543210)\n    //  * hexadecimal floating point literal (e.g. 0x1p0, 0x1.2p2)\n    //  * decimal literal (e.g. 9876543210, 100_000_000)\n    //  * floating pointe literal (e.g. 1.2, 1.2f, .2, 1., 1.2e10, 1.2e-10)\n    begin: /(\\b0x[\\d_]*(\\.[\\d_]*)?|0x\\.\\d[\\d_]*)p[-+]?\\d+|\\b0[box][a-fA-F0-9][a-fA-F0-9_]*|(\\b\\d[\\d_]*(\\.[\\d_]*)?|\\.\\d[\\d_]*)([eEfF][-+]?\\d+)?/,\n    relevance: 0\n  };\n  var CHAR = {\n    className: 'string',\n    begin: /'(.|\\\\[xXuU][a-zA-Z0-9]+)'/\n  };\n  var INTERPOLATION = {\n    className: 'subst',\n    begin: /\\$\\(/,\n    end: /\\)/,\n    keywords: KEYWORDS\n  };\n  var INTERPOLATED_VARIABLE = {\n    className: 'variable',\n    begin: '\\\\$' + VARIABLE_NAME_RE\n  }; // TODO: neatly escape normal code in string literal\n\n  var STRING = {\n    className: 'string',\n    contains: [hljs.BACKSLASH_ESCAPE, INTERPOLATION, INTERPOLATED_VARIABLE],\n    variants: [{\n      begin: /\\w*\"\"\"/,\n      end: /\"\"\"\\w*/,\n      relevance: 10\n    }, {\n      begin: /\\w*\"/,\n      end: /\"\\w*/\n    }]\n  };\n  var COMMAND = {\n    className: 'string',\n    contains: [hljs.BACKSLASH_ESCAPE, INTERPOLATION, INTERPOLATED_VARIABLE],\n    begin: '`',\n    end: '`'\n  };\n  var MACROCALL = {\n    className: 'meta',\n    begin: '@' + VARIABLE_NAME_RE\n  };\n  var COMMENT = {\n    className: 'comment',\n    variants: [{\n      begin: '#=',\n      end: '=#',\n      relevance: 10\n    }, {\n      begin: '#',\n      end: '$'\n    }]\n  };\n  DEFAULT.name = 'Julia';\n  DEFAULT.contains = [NUMBER, CHAR, STRING, COMMAND, MACROCALL, COMMENT, hljs.HASH_COMMENT_MODE, {\n    className: 'keyword',\n    begin: '\\\\b(((abstract|primitive)\\\\s+)type|(mutable\\\\s+)?struct)\\\\b'\n  }, {\n    begin: /<:/\n  } // relevance booster\n  ];\n  INTERPOLATION.contains = DEFAULT.contains;\n  return DEFAULT;\n}\n\nmodule.exports = julia;","map":{"version":3,"sources":["C:/Users/Admin/Music/MANDO/ge-sc-machine/sco_frontend/node_modules/highlight.js/lib/languages/julia.js"],"names":["julia","hljs","VARIABLE_NAME_RE","KEYWORD_LIST","LITERAL_LIST","BUILT_IN_LIST","KEYWORDS","$pattern","keyword","literal","built_in","DEFAULT","keywords","illegal","NUMBER","className","begin","relevance","CHAR","INTERPOLATION","end","INTERPOLATED_VARIABLE","STRING","contains","BACKSLASH_ESCAPE","variants","COMMAND","MACROCALL","COMMENT","name","HASH_COMMENT_MODE","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,KAAT,CAAeC,IAAf,EAAqB;AACnB;AACA;AACA;AACA;AAEA;AACA,MAAIC,gBAAgB,GAAG,sDAAvB,CAPmB,CASnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAIC,YAAY,GAAG,CACjB,YADiB,EAEjB,OAFiB,EAGjB,OAHiB,EAIjB,OAJiB,EAKjB,OALiB,EAMjB,OANiB,EAOjB,UAPiB,EAQjB,IARiB,EASjB,MATiB,EAUjB,QAViB,EAWjB,KAXiB,EAYjB,QAZiB,EAajB,OAbiB,EAcjB,SAdiB,EAejB,KAfiB,EAgBjB,UAhBiB,EAiBjB,QAjBiB,EAkBjB,IAlBiB,EAmBjB,QAnBiB,EAoBjB,IApBiB,EAqBjB,KArBiB,EAsBjB,KAtBiB,EAuBjB,OAvBiB,EAwBjB,OAxBiB,EAyBjB,QAzBiB,EA0BjB,OA1BiB,EA2BjB,QA3BiB,EA4BjB,MA5BiB,EA6BjB,KA7BiB,EA8BjB,OA9BiB,EA+BjB,OA/BiB,EAgCjB,OAhCiB,CAAnB,CAnBmB,CAsDnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAIC,YAAY,GAAG,CACjB,MADiB,EAEjB,QAFiB,EAGjB,YAHiB,EAIjB,YAJiB,EAKjB,KALiB,EAMjB,KANiB,EAOjB,OAPiB,EAQjB,OARiB,EASjB,OATiB,EAUjB,eAViB,EAWjB,WAXiB,EAYjB,WAZiB,EAajB,KAbiB,EAcjB,OAdiB,EAejB,OAfiB,EAgBjB,OAhBiB,EAiBjB,cAjBiB,EAkBjB,WAlBiB,EAmBjB,WAnBiB,EAoBjB,eApBiB,EAqBjB,cArBiB,EAsBjB,sBAtBiB,EAuBjB,oBAvBiB,EAwBjB,aAxBiB,EAyBjB,SAzBiB,EA0BjB,WA1BiB,EA2BjB,SA3BiB,EA4BjB,OA5BiB,EA6BjB,IA7BiB,EA8BjB,SA9BiB,EA+BjB,SA/BiB,EAgCjB,IAhCiB,EAiCjB,QAjCiB,EAkCjB,OAlCiB,EAmCjB,QAnCiB,EAoCjB,MApCiB,EAqCjB,OArCiB,EAsCjB,GAtCiB,EAuCjB,GAvCiB,CAAnB,CArEmB,CA+GnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAIC,aAAa,GAAG,CAClB,eADkB,EAElB,iBAFkB,EAGlB,cAHkB,EAIlB,cAJkB,EAKlB,iBALkB,EAMlB,eANkB,EAOlB,oBAPkB,EAQlB,gBARkB,EASlB,eATkB,EAUlB,aAVkB,EAWlB,gBAXkB,EAYlB,mBAZkB,EAalB,kBAbkB,EAclB,gBAdkB,EAelB,KAfkB,EAgBlB,eAhBkB,EAiBlB,OAjBkB,EAkBlB,gBAlBkB,EAmBlB,UAnBkB,EAoBlB,QApBkB,EAqBlB,UArBkB,EAsBlB,WAtBkB,EAuBlB,QAvBkB,EAwBlB,WAxBkB,EAyBlB,MAzBkB,EA0BlB,aA1BkB,EA2BlB,mBA3BkB,EA4BlB,gBA5BkB,EA6BlB,kBA7BkB,EA8BlB,OA9BkB,EA+BlB,SA/BkB,EAgClB,QAhCkB,EAiClB,SAjCkB,EAkClB,MAlCkB,EAmClB,MAnCkB,EAoClB,WApCkB,EAqClB,OArCkB,EAsClB,WAtCkB,EAuClB,KAvCkB,EAwClB,OAxCkB,EAyClB,SAzCkB,EA0ClB,YA1CkB,EA2ClB,YA3CkB,EA4ClB,YA5CkB,EA6ClB,oBA7CkB,EA8ClB,WA9CkB,EA+ClB,YA/CkB,EAgDlB,QAhDkB,EAiDlB,SAjDkB,EAkDlB,UAlDkB,EAmDlB,SAnDkB,EAoDlB,QApDkB,EAqDlB,OArDkB,EAsDlB,YAtDkB,EAuDlB,QAvDkB,EAwDlB,YAxDkB,EAyDlB,SAzDkB,EA0DlB,OA1DkB,EA2DlB,UA3DkB,EA4DlB,UA5DkB,EA6DlB,UA7DkB,EA8DlB,YA9DkB,EA+DlB,aA/DkB,EAgElB,eAhEkB,EAiElB,aAjEkB,EAkElB,MAlEkB,EAmElB,mBAnEkB,EAoElB,MApEkB,EAqElB,aArEkB,EAsElB,aAtEkB,EAuElB,UAvEkB,EAwElB,MAxEkB,EAyElB,gBAzEkB,EA0ElB,WA1EkB,EA2ElB,oBA3EkB,EA4ElB,MA5EkB,EA6ElB,SA7EkB,EA8ElB,SA9EkB,EA+ElB,SA/EkB,EAgFlB,UAhFkB,EAiFlB,WAjFkB,EAkFlB,MAlFkB,EAmFlB,IAnFkB,EAoFlB,UApFkB,EAqFlB,WArFkB,EAsFlB,UAtFkB,EAuFlB,QAvFkB,EAwFlB,gBAxFkB,EAyFlB,aAzFkB,EA0FlB,YA1FkB,EA2FlB,cA3FkB,EA4FlB,WA5FkB,EA6FlB,KA7FkB,EA8FlB,QA9FkB,EA+FlB,OA/FkB,EAgGlB,OAhGkB,EAiGlB,OAjGkB,EAkGlB,MAlGkB,EAmGlB,SAnGkB,EAoGlB,oBApGkB,EAqGlB,uBArGkB,EAsGlB,YAtGkB,EAuGlB,UAvGkB,EAwGlB,UAxGkB,EAyGlB,gBAzGkB,EA0GlB,eA1GkB,EA2GlB,WA3GkB,EA4GlB,MA5GkB,EA6GlB,QA7GkB,EA8GlB,QA9GkB,EA+GlB,aA/GkB,EAgHlB,SAhHkB,EAiHlB,kBAjHkB,EAkHlB,QAlHkB,EAmHlB,QAnHkB,EAoHlB,YApHkB,EAqHlB,SArHkB,EAsHlB,QAtHkB,EAuHlB,cAvHkB,EAwHlB,kBAxHkB,EAyHlB,eAzHkB,EA0HlB,MA1HkB,EA2HlB,kBA3HkB,EA4HlB,mBA5HkB,EA6HlB,MA7HkB,EA8HlB,wBA9HkB,EA+HlB,KA/HkB,EAgIlB,WAhIkB,EAiIlB,UAjIkB,EAkIlB,OAlIkB,EAmIlB,qBAnIkB,EAoIlB,MApIkB,EAqIlB,eArIkB,EAsIlB,KAtIkB,EAuIlB,OAvIkB,EAwIlB,YAxIkB,EAyIlB,cAzIkB,EA0IlB,mBA1IkB,EA2IlB,KA3IkB,EA4IlB,QA5IkB,EA6IlB,MA7IkB,EA8IlB,oBA9IkB,EA+IlB,WA/IkB,EAgJlB,cAhJkB,EAiJlB,cAjJkB,EAkJlB,eAlJkB,EAmJlB,iBAnJkB,EAoJlB,eApJkB,EAqJlB,QArJkB,EAsJlB,kBAtJkB,EAuJlB,UAvJkB,EAwJlB,WAxJkB,EAyJlB,oBAzJkB,EA0JlB,QA1JkB,EA2JlB,aA3JkB,EA4JlB,MA5JkB,EA6JlB,qBA7JkB,EA8JlB,MA9JkB,EA+JlB,aA/JkB,EAgKlB,OAhKkB,EAiKlB,OAjKkB,EAkKlB,MAlKkB,EAmKlB,WAnKkB,EAoKlB,SApKkB,EAqKlB,MArKkB,EAsKlB,SAtKkB,EAuKlB,QAvKkB,EAwKlB,QAxKkB,EAyKlB,QAzKkB,EA0KlB,OA1KkB,EA2KlB,kBA3KkB,EA4KlB,mBA5KkB,EA6KlB,eA7KkB,EA8KlB,eA9KkB,EA+KlB,OA/KkB,EAgLlB,UAhLkB,EAiLlB,WAjLkB,EAkLlB,UAlLkB,EAmLlB,KAnLkB,EAoLlB,QApLkB,EAqLlB,YArLkB,EAsLlB,UAtLkB,EAuLlB,QAvLkB,EAwLlB,eAxLkB,EAyLlB,aAzLkB,EA0LlB,SA1LkB,CAApB;AA6LA,MAAIC,QAAQ,GAAG;AACbC,IAAAA,QAAQ,EAAEL,gBADG;AAEbM,IAAAA,OAAO,EAAEL,YAFI;AAGbM,IAAAA,OAAO,EAAEL,YAHI;AAIbM,IAAAA,QAAQ,EAAEL;AAJG,GAAf,CA3TmB,CAkUnB;;AACA,MAAIM,OAAO,GAAG;AACZC,IAAAA,QAAQ,EAAEN,QADE;AACQO,IAAAA,OAAO,EAAE;AADjB,GAAd,CAnUmB,CAuUnB;;AACA,MAAIC,MAAM,GAAG;AACXC,IAAAA,SAAS,EAAE,QADA;AAEX;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,IAAAA,KAAK,EAAE,oIATI;AAUXC,IAAAA,SAAS,EAAE;AAVA,GAAb;AAaA,MAAIC,IAAI,GAAG;AACTH,IAAAA,SAAS,EAAE,QADF;AAETC,IAAAA,KAAK,EAAE;AAFE,GAAX;AAKA,MAAIG,aAAa,GAAG;AAClBJ,IAAAA,SAAS,EAAE,OADO;AAElBC,IAAAA,KAAK,EAAE,MAFW;AAEHI,IAAAA,GAAG,EAAE,IAFF;AAGlBR,IAAAA,QAAQ,EAAEN;AAHQ,GAApB;AAMA,MAAIe,qBAAqB,GAAG;AAC1BN,IAAAA,SAAS,EAAE,UADe;AAE1BC,IAAAA,KAAK,EAAE,QAAQd;AAFW,GAA5B,CAhWmB,CAqWnB;;AACA,MAAIoB,MAAM,GAAG;AACXP,IAAAA,SAAS,EAAE,QADA;AAEXQ,IAAAA,QAAQ,EAAE,CAACtB,IAAI,CAACuB,gBAAN,EAAwBL,aAAxB,EAAuCE,qBAAvC,CAFC;AAGXI,IAAAA,QAAQ,EAAE,CACR;AAAET,MAAAA,KAAK,EAAE,QAAT;AAAmBI,MAAAA,GAAG,EAAE,QAAxB;AAAkCH,MAAAA,SAAS,EAAE;AAA7C,KADQ,EAER;AAAED,MAAAA,KAAK,EAAE,MAAT;AAAiBI,MAAAA,GAAG,EAAE;AAAtB,KAFQ;AAHC,GAAb;AASA,MAAIM,OAAO,GAAG;AACZX,IAAAA,SAAS,EAAE,QADC;AAEZQ,IAAAA,QAAQ,EAAE,CAACtB,IAAI,CAACuB,gBAAN,EAAwBL,aAAxB,EAAuCE,qBAAvC,CAFE;AAGZL,IAAAA,KAAK,EAAE,GAHK;AAGAI,IAAAA,GAAG,EAAE;AAHL,GAAd;AAMA,MAAIO,SAAS,GAAG;AACdZ,IAAAA,SAAS,EAAE,MADG;AAEdC,IAAAA,KAAK,EAAE,MAAMd;AAFC,GAAhB;AAKA,MAAI0B,OAAO,GAAG;AACZb,IAAAA,SAAS,EAAE,SADC;AAEZU,IAAAA,QAAQ,EAAE,CACR;AAAET,MAAAA,KAAK,EAAE,IAAT;AAAeI,MAAAA,GAAG,EAAE,IAApB;AAA0BH,MAAAA,SAAS,EAAE;AAArC,KADQ,EAER;AAAED,MAAAA,KAAK,EAAE,GAAT;AAAcI,MAAAA,GAAG,EAAE;AAAnB,KAFQ;AAFE,GAAd;AAQAT,EAAAA,OAAO,CAACkB,IAAR,GAAe,OAAf;AACAlB,EAAAA,OAAO,CAACY,QAAR,GAAmB,CACjBT,MADiB,EAEjBI,IAFiB,EAGjBI,MAHiB,EAIjBI,OAJiB,EAKjBC,SALiB,EAMjBC,OANiB,EAOjB3B,IAAI,CAAC6B,iBAPY,EAQjB;AACEf,IAAAA,SAAS,EAAE,SADb;AAEEC,IAAAA,KAAK,EACH;AAHJ,GARiB,EAajB;AAACA,IAAAA,KAAK,EAAE;AAAR,GAbiB,CAaF;AAbE,GAAnB;AAeAG,EAAAA,aAAa,CAACI,QAAd,GAAyBZ,OAAO,CAACY,QAAjC;AAEA,SAAOZ,OAAP;AACD;;AAEDoB,MAAM,CAACC,OAAP,GAAiBhC,KAAjB","sourcesContent":["/*\nLanguage: Julia\nDescription: Julia is a high-level, high-performance, dynamic programming language.\nAuthor: Kenta Sato <bicycle1885@gmail.com>\nContributors: Alex Arslan <ararslan@comcast.net>, Fredrik Ekre <ekrefredrik@gmail.com>\nWebsite: https://julialang.org\n*/\n\nfunction julia(hljs) {\n  // Since there are numerous special names in Julia, it is too much trouble\n  // to maintain them by hand. Hence these names (i.e. keywords, literals and\n  // built-ins) are automatically generated from Julia 1.5.2 itself through\n  // the following scripts for each.\n\n  // ref: https://docs.julialang.org/en/v1/manual/variables/#Allowed-Variable-Names\n  var VARIABLE_NAME_RE = '[A-Za-z_\\\\u00A1-\\\\uFFFF][A-Za-z_0-9\\\\u00A1-\\\\uFFFF]*';\n\n  // # keyword generator, multi-word keywords handled manually below (Julia 1.5.2)\n  // import REPL.REPLCompletions\n  // res = String[\"in\", \"isa\", \"where\"]\n  // for kw in collect(x.keyword for x in REPLCompletions.complete_keyword(\"\"))\n  //     if !(contains(kw, \" \") || kw == \"struct\")\n  //         push!(res, kw)\n  //     end\n  // end\n  // sort!(unique!(res))\n  // foreach(x -> println(\"\\'\", x, \"\\',\"), res)\n  var KEYWORD_LIST = [\n    'baremodule',\n    'begin',\n    'break',\n    'catch',\n    'ccall',\n    'const',\n    'continue',\n    'do',\n    'else',\n    'elseif',\n    'end',\n    'export',\n    'false',\n    'finally',\n    'for',\n    'function',\n    'global',\n    'if',\n    'import',\n    'in',\n    'isa',\n    'let',\n    'local',\n    'macro',\n    'module',\n    'quote',\n    'return',\n    'true',\n    'try',\n    'using',\n    'where',\n    'while',\n  ];\n\n  // # literal generator (Julia 1.5.2)\n  // import REPL.REPLCompletions\n  // res = String[\"true\", \"false\"]\n  // for compl in filter!(x -> isa(x, REPLCompletions.ModuleCompletion) && (x.parent === Base || x.parent === Core),\n  //                     REPLCompletions.completions(\"\", 0)[1])\n  //     try\n  //         v = eval(Symbol(compl.mod))\n  //         if !(v isa Function || v isa Type || v isa TypeVar || v isa Module || v isa Colon)\n  //             push!(res, compl.mod)\n  //         end\n  //     catch e\n  //     end\n  // end\n  // sort!(unique!(res))\n  // foreach(x -> println(\"\\'\", x, \"\\',\"), res)\n  var LITERAL_LIST = [\n    'ARGS',\n    'C_NULL',\n    'DEPOT_PATH',\n    'ENDIAN_BOM',\n    'ENV',\n    'Inf',\n    'Inf16',\n    'Inf32',\n    'Inf64',\n    'InsertionSort',\n    'LOAD_PATH',\n    'MergeSort',\n    'NaN',\n    'NaN16',\n    'NaN32',\n    'NaN64',\n    'PROGRAM_FILE',\n    'QuickSort',\n    'RoundDown',\n    'RoundFromZero',\n    'RoundNearest',\n    'RoundNearestTiesAway',\n    'RoundNearestTiesUp',\n    'RoundToZero',\n    'RoundUp',\n    'VERSION|0',\n    'devnull',\n    'false',\n    'im',\n    'missing',\n    'nothing',\n    'pi',\n    'stderr',\n    'stdin',\n    'stdout',\n    'true',\n    'undef',\n    'π',\n    'ℯ',\n  ];\n\n  // # built_in generator (Julia 1.5.2)\n  // import REPL.REPLCompletions\n  // res = String[]\n  // for compl in filter!(x -> isa(x, REPLCompletions.ModuleCompletion) && (x.parent === Base || x.parent === Core),\n  //                     REPLCompletions.completions(\"\", 0)[1])\n  //     try\n  //         v = eval(Symbol(compl.mod))\n  //         if (v isa Type || v isa TypeVar) && (compl.mod != \"=>\")\n  //             push!(res, compl.mod)\n  //         end\n  //     catch e\n  //     end\n  // end\n  // sort!(unique!(res))\n  // foreach(x -> println(\"\\'\", x, \"\\',\"), res)\n  var BUILT_IN_LIST = [\n    'AbstractArray',\n    'AbstractChannel',\n    'AbstractChar',\n    'AbstractDict',\n    'AbstractDisplay',\n    'AbstractFloat',\n    'AbstractIrrational',\n    'AbstractMatrix',\n    'AbstractRange',\n    'AbstractSet',\n    'AbstractString',\n    'AbstractUnitRange',\n    'AbstractVecOrMat',\n    'AbstractVector',\n    'Any',\n    'ArgumentError',\n    'Array',\n    'AssertionError',\n    'BigFloat',\n    'BigInt',\n    'BitArray',\n    'BitMatrix',\n    'BitSet',\n    'BitVector',\n    'Bool',\n    'BoundsError',\n    'CapturedException',\n    'CartesianIndex',\n    'CartesianIndices',\n    'Cchar',\n    'Cdouble',\n    'Cfloat',\n    'Channel',\n    'Char',\n    'Cint',\n    'Cintmax_t',\n    'Clong',\n    'Clonglong',\n    'Cmd',\n    'Colon',\n    'Complex',\n    'ComplexF16',\n    'ComplexF32',\n    'ComplexF64',\n    'CompositeException',\n    'Condition',\n    'Cptrdiff_t',\n    'Cshort',\n    'Csize_t',\n    'Cssize_t',\n    'Cstring',\n    'Cuchar',\n    'Cuint',\n    'Cuintmax_t',\n    'Culong',\n    'Culonglong',\n    'Cushort',\n    'Cvoid',\n    'Cwchar_t',\n    'Cwstring',\n    'DataType',\n    'DenseArray',\n    'DenseMatrix',\n    'DenseVecOrMat',\n    'DenseVector',\n    'Dict',\n    'DimensionMismatch',\n    'Dims',\n    'DivideError',\n    'DomainError',\n    'EOFError',\n    'Enum',\n    'ErrorException',\n    'Exception',\n    'ExponentialBackOff',\n    'Expr',\n    'Float16',\n    'Float32',\n    'Float64',\n    'Function',\n    'GlobalRef',\n    'HTML',\n    'IO',\n    'IOBuffer',\n    'IOContext',\n    'IOStream',\n    'IdDict',\n    'IndexCartesian',\n    'IndexLinear',\n    'IndexStyle',\n    'InexactError',\n    'InitError',\n    'Int',\n    'Int128',\n    'Int16',\n    'Int32',\n    'Int64',\n    'Int8',\n    'Integer',\n    'InterruptException',\n    'InvalidStateException',\n    'Irrational',\n    'KeyError',\n    'LinRange',\n    'LineNumberNode',\n    'LinearIndices',\n    'LoadError',\n    'MIME',\n    'Matrix',\n    'Method',\n    'MethodError',\n    'Missing',\n    'MissingException',\n    'Module',\n    'NTuple',\n    'NamedTuple',\n    'Nothing',\n    'Number',\n    'OrdinalRange',\n    'OutOfMemoryError',\n    'OverflowError',\n    'Pair',\n    'PartialQuickSort',\n    'PermutedDimsArray',\n    'Pipe',\n    'ProcessFailedException',\n    'Ptr',\n    'QuoteNode',\n    'Rational',\n    'RawFD',\n    'ReadOnlyMemoryError',\n    'Real',\n    'ReentrantLock',\n    'Ref',\n    'Regex',\n    'RegexMatch',\n    'RoundingMode',\n    'SegmentationFault',\n    'Set',\n    'Signed',\n    'Some',\n    'StackOverflowError',\n    'StepRange',\n    'StepRangeLen',\n    'StridedArray',\n    'StridedMatrix',\n    'StridedVecOrMat',\n    'StridedVector',\n    'String',\n    'StringIndexError',\n    'SubArray',\n    'SubString',\n    'SubstitutionString',\n    'Symbol',\n    'SystemError',\n    'Task',\n    'TaskFailedException',\n    'Text',\n    'TextDisplay',\n    'Timer',\n    'Tuple',\n    'Type',\n    'TypeError',\n    'TypeVar',\n    'UInt',\n    'UInt128',\n    'UInt16',\n    'UInt32',\n    'UInt64',\n    'UInt8',\n    'UndefInitializer',\n    'UndefKeywordError',\n    'UndefRefError',\n    'UndefVarError',\n    'Union',\n    'UnionAll',\n    'UnitRange',\n    'Unsigned',\n    'Val',\n    'Vararg',\n    'VecElement',\n    'VecOrMat',\n    'Vector',\n    'VersionNumber',\n    'WeakKeyDict',\n    'WeakRef',\n  ];\n\n  var KEYWORDS = {\n    $pattern: VARIABLE_NAME_RE,\n    keyword: KEYWORD_LIST,\n    literal: LITERAL_LIST,\n    built_in: BUILT_IN_LIST,\n  };\n\n  // placeholder for recursive self-reference\n  var DEFAULT = {\n    keywords: KEYWORDS, illegal: /<\\//\n  };\n\n  // ref: https://docs.julialang.org/en/v1/manual/integers-and-floating-point-numbers/\n  var NUMBER = {\n    className: 'number',\n    // supported numeric literals:\n    //  * binary literal (e.g. 0x10)\n    //  * octal literal (e.g. 0o76543210)\n    //  * hexadecimal literal (e.g. 0xfedcba876543210)\n    //  * hexadecimal floating point literal (e.g. 0x1p0, 0x1.2p2)\n    //  * decimal literal (e.g. 9876543210, 100_000_000)\n    //  * floating pointe literal (e.g. 1.2, 1.2f, .2, 1., 1.2e10, 1.2e-10)\n    begin: /(\\b0x[\\d_]*(\\.[\\d_]*)?|0x\\.\\d[\\d_]*)p[-+]?\\d+|\\b0[box][a-fA-F0-9][a-fA-F0-9_]*|(\\b\\d[\\d_]*(\\.[\\d_]*)?|\\.\\d[\\d_]*)([eEfF][-+]?\\d+)?/,\n    relevance: 0\n  };\n\n  var CHAR = {\n    className: 'string',\n    begin: /'(.|\\\\[xXuU][a-zA-Z0-9]+)'/\n  };\n\n  var INTERPOLATION = {\n    className: 'subst',\n    begin: /\\$\\(/, end: /\\)/,\n    keywords: KEYWORDS\n  };\n\n  var INTERPOLATED_VARIABLE = {\n    className: 'variable',\n    begin: '\\\\$' + VARIABLE_NAME_RE\n  };\n\n  // TODO: neatly escape normal code in string literal\n  var STRING = {\n    className: 'string',\n    contains: [hljs.BACKSLASH_ESCAPE, INTERPOLATION, INTERPOLATED_VARIABLE],\n    variants: [\n      { begin: /\\w*\"\"\"/, end: /\"\"\"\\w*/, relevance: 10 },\n      { begin: /\\w*\"/, end: /\"\\w*/ }\n    ]\n  };\n\n  var COMMAND = {\n    className: 'string',\n    contains: [hljs.BACKSLASH_ESCAPE, INTERPOLATION, INTERPOLATED_VARIABLE],\n    begin: '`', end: '`'\n  };\n\n  var MACROCALL = {\n    className: 'meta',\n    begin: '@' + VARIABLE_NAME_RE\n  };\n\n  var COMMENT = {\n    className: 'comment',\n    variants: [\n      { begin: '#=', end: '=#', relevance: 10 },\n      { begin: '#', end: '$' }\n    ]\n  };\n\n  DEFAULT.name = 'Julia';\n  DEFAULT.contains = [\n    NUMBER,\n    CHAR,\n    STRING,\n    COMMAND,\n    MACROCALL,\n    COMMENT,\n    hljs.HASH_COMMENT_MODE,\n    {\n      className: 'keyword',\n      begin:\n        '\\\\b(((abstract|primitive)\\\\s+)type|(mutable\\\\s+)?struct)\\\\b'\n    },\n    {begin: /<:/}  // relevance booster\n  ];\n  INTERPOLATION.contains = DEFAULT.contains;\n\n  return DEFAULT;\n}\n\nmodule.exports = julia;\n"]},"metadata":{},"sourceType":"script"}