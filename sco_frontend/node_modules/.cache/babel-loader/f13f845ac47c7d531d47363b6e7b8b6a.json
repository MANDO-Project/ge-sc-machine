{"ast":null,"code":"var createPatternBuilder = require('./createPatternBuilder');\n\nmodule.exports = generateCreateBodyFunction;\nmodule.exports.generateCreateBodyFunctionBody = generateCreateBodyFunctionBody; // InlineTransform: getVectorCode\n\nmodule.exports.getVectorCode = getVectorCode; // InlineTransform: getBodyCode\n\nmodule.exports.getBodyCode = getBodyCode; // InlineTransformExport: module.exports = function() { return Body; }\n\nfunction generateCreateBodyFunction(dimension, debugSetters) {\n  var code = generateCreateBodyFunctionBody(dimension, debugSetters);\n\n  var _Function = new Function(code)(),\n      Body = _Function.Body;\n\n  return Body;\n}\n\nfunction generateCreateBodyFunctionBody(dimension, debugSetters) {\n  var code = \"\\n\".concat(getVectorCode(dimension, debugSetters), \"\\n\").concat(getBodyCode(dimension, debugSetters), \"\\nreturn {Body: Body, Vector: Vector};\\n\");\n  return code;\n}\n\nfunction getBodyCode(dimension) {\n  var pattern = createPatternBuilder(dimension);\n  var variableList = pattern('{var}', {\n    join: ', '\n  });\n  return \"\\nfunction Body(\".concat(variableList, \") {\\n  this.isPinned = false;\\n  this.pos = new Vector(\").concat(variableList, \");\\n  this.force = new Vector();\\n  this.velocity = new Vector();\\n  this.mass = 1;\\n\\n  this.springCount = 0;\\n  this.springLength = 0;\\n}\\n\\nBody.prototype.reset = function() {\\n  this.force.reset();\\n  this.springCount = 0;\\n  this.springLength = 0;\\n}\\n\\nBody.prototype.setPosition = function (\").concat(variableList, \") {\\n  \").concat(pattern('this.pos.{var} = {var} || 0;', {\n    indent: 2\n  }), \"\\n};\");\n}\n\nfunction getVectorCode(dimension, debugSetters) {\n  var pattern = createPatternBuilder(dimension);\n  var setters = '';\n\n  if (debugSetters) {\n    setters = \"\".concat(pattern(\"\\n\\\n   var v{var};\\n\\\nObject.defineProperty(this, '{var}', {\\n\\\n  set: function(v) { \\n\\\n    if (!Number.isFinite(v)) throw new Error('Cannot set non-numbers to {var}');\\n\\\n    v{var} = v; \\n\\\n  },\\n\\\n  get: function() { return v{var}; }\\n\\\n});\"));\n  }\n\n  var variableList = pattern('{var}', {\n    join: ', '\n  });\n  return \"function Vector(\".concat(variableList, \") {\\n  \").concat(setters, \"\\n    if (typeof arguments[0] === 'object') {\\n      // could be another vector\\n      let v = arguments[0];\\n      \").concat(pattern('if (!Number.isFinite(v.{var})) throw new Error(\"Expected value is not a finite number at Vector constructor ({var})\");', {\n    indent: 4\n  }), \"\\n      \").concat(pattern('this.{var} = v.{var};', {\n    indent: 4\n  }), \"\\n    } else {\\n      \").concat(pattern('this.{var} = typeof {var} === \"number\" ? {var} : 0;', {\n    indent: 4\n  }), \"\\n    }\\n  }\\n  \\n  Vector.prototype.reset = function () {\\n    \").concat(pattern('this.{var} = ', {\n    join: ''\n  }), \"0;\\n  };\");\n}","map":null,"metadata":{},"sourceType":"script"}