{"ast":null,"code":"module.exports = createLayout;\nmodule.exports.simulator = require('./lib/createPhysicsSimulator');\n\nvar eventify = require('ngraph.events');\n/**\n * Creates force based layout for a given graph.\n *\n * @param {ngraph.graph} graph which needs to be laid out\n * @param {object} physicsSettings if you need custom settings\n * for physics simulator you can pass your own settings here. If it's not passed\n * a default one will be created.\n */\n\n\nfunction createLayout(graph, physicsSettings) {\n  if (!graph) {\n    throw new Error('Graph structure cannot be undefined');\n  }\n\n  var createSimulator = physicsSettings && physicsSettings.createSimulator || require('./lib/createPhysicsSimulator');\n\n  var physicsSimulator = createSimulator(physicsSettings);\n  if (Array.isArray(physicsSettings)) throw new Error('Physics settings is expected to be an object');\n  var nodeMass = graph.version > 19 ? defaultSetNodeMass : defaultArrayNodeMass;\n\n  if (physicsSettings && typeof physicsSettings.nodeMass === 'function') {\n    nodeMass = physicsSettings.nodeMass;\n  }\n\n  var nodeBodies = new Map();\n  var springs = {};\n  var bodiesCount = 0;\n  var springTransform = physicsSimulator.settings.springTransform || noop; // Initialize physics with what we have in the graph:\n\n  initPhysics();\n  listenToEvents();\n  var wasStable = false;\n  var api = {\n    /**\n     * Performs one step of iterative layout algorithm\n     *\n     * @returns {boolean} true if the system should be considered stable; False otherwise.\n     * The system is stable if no further call to `step()` can improve the layout.\n     */\n    step: function step() {\n      if (bodiesCount === 0) {\n        updateStableStatus(true);\n        return true;\n      }\n\n      var lastMove = physicsSimulator.step(); // Save the movement in case if someone wants to query it in the step\n      // callback.\n\n      api.lastMove = lastMove; // Allow listeners to perform low-level actions after nodes are updated.\n\n      api.fire('step');\n      var ratio = lastMove / bodiesCount;\n      var isStableNow = ratio <= 0.01; // TODO: The number is somewhat arbitrary...\n\n      updateStableStatus(isStableNow);\n      return isStableNow;\n    },\n\n    /**\n     * For a given `nodeId` returns position\n     */\n    getNodePosition: function getNodePosition(nodeId) {\n      return getInitializedBody(nodeId).pos;\n    },\n\n    /**\n     * Sets position of a node to a given coordinates\n     * @param {string} nodeId node identifier\n     * @param {number} x position of a node\n     * @param {number} y position of a node\n     * @param {number=} z position of node (only if applicable to body)\n     */\n    setNodePosition: function setNodePosition(nodeId) {\n      var body = getInitializedBody(nodeId);\n      body.setPosition.apply(body, Array.prototype.slice.call(arguments, 1));\n    },\n\n    /**\n     * @returns {Object} Link position by link id\n     * @returns {Object.from} {x, y} coordinates of link start\n     * @returns {Object.to} {x, y} coordinates of link end\n     */\n    getLinkPosition: function getLinkPosition(linkId) {\n      var spring = springs[linkId];\n\n      if (spring) {\n        return {\n          from: spring.from.pos,\n          to: spring.to.pos\n        };\n      }\n    },\n\n    /**\n     * @returns {Object} area required to fit in the graph. Object contains\n     * `x1`, `y1` - top left coordinates\n     * `x2`, `y2` - bottom right coordinates\n     */\n    getGraphRect: function getGraphRect() {\n      return physicsSimulator.getBBox();\n    },\n\n    /**\n     * Iterates over each body in the layout simulator and performs a callback(body, nodeId)\n     */\n    forEachBody: forEachBody,\n\n    /*\n     * Requests layout algorithm to pin/unpin node to its current position\n     * Pinned nodes should not be affected by layout algorithm and always\n     * remain at their position\n     */\n    pinNode: function pinNode(node, isPinned) {\n      var body = getInitializedBody(node.id);\n      body.isPinned = !!isPinned;\n    },\n\n    /**\n     * Checks whether given graph's node is currently pinned\n     */\n    isNodePinned: function isNodePinned(node) {\n      return getInitializedBody(node.id).isPinned;\n    },\n\n    /**\n     * Request to release all resources\n     */\n    dispose: function dispose() {\n      graph.off('changed', onGraphChanged);\n      api.fire('disposed');\n    },\n\n    /**\n     * Gets physical body for a given node id. If node is not found undefined\n     * value is returned.\n     */\n    getBody: getBody,\n\n    /**\n     * Gets spring for a given edge.\n     *\n     * @param {string} linkId link identifer. If two arguments are passed then\n     * this argument is treated as formNodeId\n     * @param {string=} toId when defined this parameter denotes head of the link\n     * and first argument is treated as tail of the link (fromId)\n     */\n    getSpring: getSpring,\n\n    /**\n     * Returns length of cumulative force vector. The closer this to zero - the more stable the system is\n     */\n    getForceVectorLength: getForceVectorLength,\n\n    /**\n     * [Read only] Gets current physics simulator\n     */\n    simulator: physicsSimulator,\n\n    /**\n     * Gets the graph that was used for layout\n     */\n    graph: graph,\n\n    /**\n     * Gets amount of movement performed during last step operation\n     */\n    lastMove: 0\n  };\n  eventify(api);\n  return api;\n\n  function updateStableStatus(isStableNow) {\n    if (wasStable !== isStableNow) {\n      wasStable = isStableNow;\n      onStableChanged(isStableNow);\n    }\n  }\n\n  function forEachBody(cb) {\n    nodeBodies.forEach(cb);\n  }\n\n  function getForceVectorLength() {\n    var fx = 0,\n        fy = 0;\n    forEachBody(function (body) {\n      fx += Math.abs(body.force.x);\n      fy += Math.abs(body.force.y);\n    });\n    return Math.sqrt(fx * fx + fy * fy);\n  }\n\n  function getSpring(fromId, toId) {\n    var linkId;\n\n    if (toId === undefined) {\n      if (typeof fromId !== 'object') {\n        // assume fromId as a linkId:\n        linkId = fromId;\n      } else {\n        // assume fromId to be a link object:\n        linkId = fromId.id;\n      }\n    } else {\n      // toId is defined, should grab link:\n      var link = graph.hasLink(fromId, toId);\n      if (!link) return;\n      linkId = link.id;\n    }\n\n    return springs[linkId];\n  }\n\n  function getBody(nodeId) {\n    return nodeBodies.get(nodeId);\n  }\n\n  function listenToEvents() {\n    graph.on('changed', onGraphChanged);\n  }\n\n  function onStableChanged(isStable) {\n    api.fire('stable', isStable);\n  }\n\n  function onGraphChanged(changes) {\n    for (var i = 0; i < changes.length; ++i) {\n      var change = changes[i];\n\n      if (change.changeType === 'add') {\n        if (change.node) {\n          initBody(change.node.id);\n        }\n\n        if (change.link) {\n          initLink(change.link);\n        }\n      } else if (change.changeType === 'remove') {\n        if (change.node) {\n          releaseNode(change.node);\n        }\n\n        if (change.link) {\n          releaseLink(change.link);\n        }\n      }\n    }\n\n    bodiesCount = graph.getNodesCount();\n  }\n\n  function initPhysics() {\n    bodiesCount = 0;\n    graph.forEachNode(function (node) {\n      initBody(node.id);\n      bodiesCount += 1;\n    });\n    graph.forEachLink(initLink);\n  }\n\n  function initBody(nodeId) {\n    var body = nodeBodies.get(nodeId);\n\n    if (!body) {\n      var node = graph.getNode(nodeId);\n\n      if (!node) {\n        throw new Error('initBody() was called with unknown node id');\n      }\n\n      var pos = node.position;\n\n      if (!pos) {\n        var neighbors = getNeighborBodies(node);\n        pos = physicsSimulator.getBestNewBodyPosition(neighbors);\n      }\n\n      body = physicsSimulator.addBodyAt(pos);\n      body.id = nodeId;\n      nodeBodies.set(nodeId, body);\n      updateBodyMass(nodeId);\n\n      if (isNodeOriginallyPinned(node)) {\n        body.isPinned = true;\n      }\n    }\n  }\n\n  function releaseNode(node) {\n    var nodeId = node.id;\n    var body = nodeBodies.get(nodeId);\n\n    if (body) {\n      nodeBodies.delete(nodeId);\n      physicsSimulator.removeBody(body);\n    }\n  }\n\n  function initLink(link) {\n    updateBodyMass(link.fromId);\n    updateBodyMass(link.toId);\n    var fromBody = nodeBodies.get(link.fromId),\n        toBody = nodeBodies.get(link.toId),\n        spring = physicsSimulator.addSpring(fromBody, toBody, link.length);\n    springTransform(link, spring);\n    springs[link.id] = spring;\n  }\n\n  function releaseLink(link) {\n    var spring = springs[link.id];\n\n    if (spring) {\n      var from = graph.getNode(link.fromId),\n          to = graph.getNode(link.toId);\n      if (from) updateBodyMass(from.id);\n      if (to) updateBodyMass(to.id);\n      delete springs[link.id];\n      physicsSimulator.removeSpring(spring);\n    }\n  }\n\n  function getNeighborBodies(node) {\n    // TODO: Could probably be done better on memory\n    var neighbors = [];\n\n    if (!node.links) {\n      return neighbors;\n    }\n\n    var maxNeighbors = Math.min(node.links.length, 2);\n\n    for (var i = 0; i < maxNeighbors; ++i) {\n      var link = node.links[i];\n      var otherBody = link.fromId !== node.id ? nodeBodies.get(link.fromId) : nodeBodies.get(link.toId);\n\n      if (otherBody && otherBody.pos) {\n        neighbors.push(otherBody);\n      }\n    }\n\n    return neighbors;\n  }\n\n  function updateBodyMass(nodeId) {\n    var body = nodeBodies.get(nodeId);\n    body.mass = nodeMass(nodeId);\n\n    if (Number.isNaN(body.mass)) {\n      throw new Error('Node mass should be a number');\n    }\n  }\n  /**\n   * Checks whether graph node has in its settings pinned attribute,\n   * which means layout algorithm cannot move it. Node can be marked\n   * as pinned, if it has \"isPinned\" attribute, or when node.data has it.\n   *\n   * @param {Object} node a graph node to check\n   * @return {Boolean} true if node should be treated as pinned; false otherwise.\n   */\n\n\n  function isNodeOriginallyPinned(node) {\n    return node && (node.isPinned || node.data && node.data.isPinned);\n  }\n\n  function getInitializedBody(nodeId) {\n    var body = nodeBodies.get(nodeId);\n\n    if (!body) {\n      initBody(nodeId);\n      body = nodeBodies.get(nodeId);\n    }\n\n    return body;\n  }\n  /**\n   * Calculates mass of a body, which corresponds to node with given id.\n   *\n   * @param {String|Number} nodeId identifier of a node, for which body mass needs to be calculated\n   * @returns {Number} recommended mass of the body;\n   */\n\n\n  function defaultArrayNodeMass(nodeId) {\n    // This function is for older versions of ngraph.graph.\n    var links = graph.getLinks(nodeId);\n    if (!links) return 1;\n    return 1 + links.length / 3.0;\n  }\n\n  function defaultSetNodeMass(nodeId) {\n    var links = graph.getLinks(nodeId);\n    if (!links) return 1;\n    return 1 + links.size / 3.0;\n  }\n}\n\nfunction noop() {}","map":null,"metadata":{},"sourceType":"script"}