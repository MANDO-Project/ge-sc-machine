{"ast":null,"code":"module.exports = generateBoundsFunction;\nmodule.exports.generateFunctionBody = generateBoundsFunctionBody;\n\nvar createPatternBuilder = require('./createPatternBuilder');\n\nfunction generateBoundsFunction(dimension) {\n  var code = generateBoundsFunctionBody(dimension);\n  return new Function('bodies', 'settings', 'random', code);\n}\n\nfunction generateBoundsFunctionBody(dimension) {\n  var pattern = createPatternBuilder(dimension);\n  var code = \"\\n  var boundingBox = {\\n    \".concat(pattern('min_{var}: 0, max_{var}: 0,', {\n    indent: 4\n  }), \"\\n  };\\n\\n  return {\\n    box: boundingBox,\\n\\n    update: updateBoundingBox,\\n\\n    reset: resetBoundingBox,\\n\\n    getBestNewPosition: function (neighbors) {\\n      var \").concat(pattern('base_{var} = 0', {\n    join: ', '\n  }), \";\\n\\n      if (neighbors.length) {\\n        for (var i = 0; i < neighbors.length; ++i) {\\n          let neighborPos = neighbors[i].pos;\\n          \").concat(pattern('base_{var} += neighborPos.{var};', {\n    indent: 10\n  }), \"\\n        }\\n\\n        \").concat(pattern('base_{var} /= neighbors.length;', {\n    indent: 8\n  }), \"\\n      } else {\\n        \").concat(pattern('base_{var} = (boundingBox.min_{var} + boundingBox.max_{var}) / 2;', {\n    indent: 8\n  }), \"\\n      }\\n\\n      var springLength = settings.springLength;\\n      return {\\n        \").concat(pattern('{var}: base_{var} + (random.nextDouble() - 0.5) * springLength,', {\n    indent: 8\n  }), \"\\n      };\\n    }\\n  };\\n\\n  function updateBoundingBox() {\\n    var i = bodies.length;\\n    if (i === 0) return; // No bodies - no borders.\\n\\n    \").concat(pattern('var max_{var} = -Infinity;', {\n    indent: 4\n  }), \"\\n    \").concat(pattern('var min_{var} = Infinity;', {\n    indent: 4\n  }), \"\\n\\n    while(i--) {\\n      // this is O(n), it could be done faster with quadtree, if we check the root node bounds\\n      var bodyPos = bodies[i].pos;\\n      \").concat(pattern('if (bodyPos.{var} < min_{var}) min_{var} = bodyPos.{var};', {\n    indent: 6\n  }), \"\\n      \").concat(pattern('if (bodyPos.{var} > max_{var}) max_{var} = bodyPos.{var};', {\n    indent: 6\n  }), \"\\n    }\\n\\n    \").concat(pattern('boundingBox.min_{var} = min_{var};', {\n    indent: 4\n  }), \"\\n    \").concat(pattern('boundingBox.max_{var} = max_{var};', {\n    indent: 4\n  }), \"\\n  }\\n\\n  function resetBoundingBox() {\\n    \").concat(pattern('boundingBox.min_{var} = boundingBox.max_{var} = 0;', {\n    indent: 4\n  }), \"\\n  }\\n\");\n  return code;\n}","map":null,"metadata":{},"sourceType":"script"}