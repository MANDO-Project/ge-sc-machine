{"ast":null,"code":"/**\n * Based on aframe/examples/showcase/tracked-controls.\n *\n * Implement bounding sphere collision detection for entities with a mesh.\n * Sets the specified state on the intersected entities.\n *\n * @property {string} objects - Selector of the entities to test for collision.\n * @property {string} state - State to set on collided entities.\n *\n */\nmodule.exports = AFRAME.registerComponent('sphere-collider', {\n  schema: {\n    objects: {\n      default: ''\n    },\n    state: {\n      default: 'collided'\n    },\n    radius: {\n      default: 0.05\n    },\n    watch: {\n      default: true\n    }\n  },\n  init: function init() {\n    /** @type {MutationObserver} */\n    this.observer = null;\n    /** @type {Array<Element>} Elements to watch for collisions. */\n\n    this.els = [];\n    /** @type {Array<Element>} Elements currently in collision state. */\n\n    this.collisions = [];\n    this.handleHit = this.handleHit.bind(this);\n    this.handleHitEnd = this.handleHitEnd.bind(this);\n  },\n  remove: function remove() {\n    this.pause();\n  },\n  play: function play() {\n    var sceneEl = this.el.sceneEl;\n\n    if (this.data.watch) {\n      this.observer = new MutationObserver(this.update.bind(this, null));\n      this.observer.observe(sceneEl, {\n        childList: true,\n        subtree: true\n      });\n    }\n  },\n  pause: function pause() {\n    if (this.observer) {\n      this.observer.disconnect();\n      this.observer = null;\n    }\n  },\n\n  /**\n   * Update list of entities to test for collision.\n   */\n  update: function update() {\n    var data = this.data;\n    var objectEls; // Push entities into list of els to intersect.\n\n    if (data.objects) {\n      objectEls = this.el.sceneEl.querySelectorAll(data.objects);\n    } else {\n      // If objects not defined, intersect with everything.\n      objectEls = this.el.sceneEl.children;\n    } // Convert from NodeList to Array\n\n\n    this.els = Array.prototype.slice.call(objectEls);\n  },\n  tick: function () {\n    var position = new THREE.Vector3(),\n        meshPosition = new THREE.Vector3(),\n        colliderScale = new THREE.Vector3(),\n        size = new THREE.Vector3(),\n        box = new THREE.Box3(),\n        distanceMap = new Map();\n    return function () {\n      var el = this.el,\n          data = this.data,\n          mesh = el.getObject3D('mesh'),\n          collisions = [];\n      var colliderRadius;\n\n      if (!mesh) {\n        return;\n      }\n\n      distanceMap.clear();\n      el.object3D.getWorldPosition(position);\n      el.object3D.getWorldScale(colliderScale);\n      colliderRadius = data.radius * scaleFactor(colliderScale); // Update collision list.\n\n      this.els.forEach(intersect); // Emit events and add collision states, in order of distance.\n\n      collisions.sort(function (a, b) {\n        return distanceMap.get(a) > distanceMap.get(b) ? 1 : -1;\n      }).forEach(this.handleHit); // Remove collision state from current element.\n\n      if (collisions.length === 0) {\n        el.emit('hit', {\n          el: null\n        });\n      } // Remove collision state from other elements.\n\n\n      this.collisions.filter(function (el) {\n        return !distanceMap.has(el);\n      }).forEach(this.handleHitEnd); // Store new collisions\n\n      this.collisions = collisions; // Bounding sphere collision detection\n\n      function intersect(el) {\n        var radius, mesh, distance, extent;\n\n        if (!el.isEntity) {\n          return;\n        }\n\n        mesh = el.getObject3D('mesh');\n\n        if (!mesh) {\n          return;\n        }\n\n        box.setFromObject(mesh).getSize(size);\n        extent = Math.max(size.x, size.y, size.z) / 2;\n        radius = Math.sqrt(2 * extent * extent);\n        box.getCenter(meshPosition);\n\n        if (!radius) {\n          return;\n        }\n\n        distance = position.distanceTo(meshPosition);\n\n        if (distance < radius + colliderRadius) {\n          collisions.push(el);\n          distanceMap.set(el, distance);\n        }\n      } // use max of scale factors to maintain bounding sphere collision\n\n\n      function scaleFactor(scaleVec) {\n        return Math.max.apply(null, scaleVec.toArray());\n      }\n    };\n  }(),\n  handleHit: function handleHit(targetEl) {\n    targetEl.emit('hit');\n    targetEl.addState(this.data.state);\n    this.el.emit('hit', {\n      el: targetEl\n    });\n  },\n  handleHitEnd: function handleHitEnd(targetEl) {\n    targetEl.emit('hitend');\n    targetEl.removeState(this.data.state);\n    this.el.emit('hitend', {\n      el: targetEl\n    });\n  }\n});","map":null,"metadata":{},"sourceType":"script"}