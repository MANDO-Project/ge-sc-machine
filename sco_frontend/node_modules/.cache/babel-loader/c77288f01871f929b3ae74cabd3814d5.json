{"ast":null,"code":"var ACCEL_G = -9.8,\n    // m/s^2\nEASING = -15; // m/s^2\n\n/**\n * Jump ability.\n */\n\nmodule.exports = AFRAME.registerComponent('jump-ability', {\n  dependencies: ['velocity'],\n\n  /* Schema\n  ——————————————————————————————————————————————*/\n  schema: {\n    on: {\n      default: 'keydown:Space gamepadbuttondown:0'\n    },\n    playerHeight: {\n      default: 1.764\n    },\n    maxJumps: {\n      default: 1\n    },\n    distance: {\n      default: 5\n    },\n    debug: {\n      default: false\n    }\n  },\n  init: function init() {\n    this.velocity = 0;\n    this.numJumps = 0;\n    var beginJump = this.beginJump.bind(this),\n        events = this.data.on.split(' ');\n    this.bindings = {};\n\n    for (var i = 0; i < events.length; i++) {\n      this.bindings[events[i]] = beginJump;\n      this.el.addEventListener(events[i], beginJump);\n    }\n\n    this.bindings.collide = this.onCollide.bind(this);\n    this.el.addEventListener('collide', this.bindings.collide);\n  },\n  remove: function remove() {\n    for (var event in this.bindings) {\n      if (this.bindings.hasOwnProperty(event)) {\n        this.el.removeEventListener(event, this.bindings[event]);\n        delete this.bindings[event];\n      }\n    }\n\n    this.el.removeEventListener('collide', this.bindings.collide);\n    delete this.bindings.collide;\n  },\n  beginJump: function beginJump() {\n    if (this.numJumps < this.data.maxJumps) {\n      var data = this.data,\n          initialVelocity = Math.sqrt(-2 * data.distance * (ACCEL_G + EASING)),\n          v = this.el.getAttribute('velocity');\n      this.el.setAttribute('velocity', {\n        x: v.x,\n        y: initialVelocity,\n        z: v.z\n      });\n      this.numJumps++;\n      this.el.emit('jumpstart');\n    }\n  },\n  onCollide: function onCollide() {\n    if (this.numJumps > 0) this.el.emit('jumpend');\n    this.numJumps = 0;\n  }\n});","map":null,"metadata":{},"sourceType":"script"}