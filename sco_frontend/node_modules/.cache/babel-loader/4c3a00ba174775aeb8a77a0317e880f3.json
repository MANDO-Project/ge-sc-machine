{"ast":null,"code":"/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n  return re.source;\n}\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\n\n\nfunction concat() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  const joined = args.map(x => source(x)).join(\"\");\n  return joined;\n}\n/*\nLanguage: LLVM IR\nAuthor: Michael Rodler <contact@f0rki.at>\nDescription: language used as intermediate representation in the LLVM compiler framework\nWebsite: https://llvm.org/docs/LangRef.html\nCategory: assembler\nAudit: 2020\n*/\n\n/** @type LanguageFn */\n\n\nfunction llvm(hljs) {\n  const IDENT_RE = /([-a-zA-Z$._][\\w$.-]*)/;\n  const TYPE = {\n    className: 'type',\n    begin: /\\bi\\d+(?=\\s|\\b)/\n  };\n  const OPERATOR = {\n    className: 'operator',\n    relevance: 0,\n    begin: /=/\n  };\n  const PUNCTUATION = {\n    className: 'punctuation',\n    relevance: 0,\n    begin: /,/\n  };\n  const NUMBER = {\n    className: 'number',\n    variants: [{\n      begin: /0[xX][a-fA-F0-9]+/\n    }, {\n      begin: /-?\\d+(?:[.]\\d+)?(?:[eE][-+]?\\d+(?:[.]\\d+)?)?/\n    }],\n    relevance: 0\n  };\n  const LABEL = {\n    className: 'symbol',\n    variants: [{\n      begin: /^\\s*[a-z]+:/\n    } // labels\n    ],\n    relevance: 0\n  };\n  const VARIABLE = {\n    className: 'variable',\n    variants: [{\n      begin: concat(/%/, IDENT_RE)\n    }, {\n      begin: /%\\d+/\n    }, {\n      begin: /#\\d+/\n    }]\n  };\n  const FUNCTION = {\n    className: 'title',\n    variants: [{\n      begin: concat(/@/, IDENT_RE)\n    }, {\n      begin: /@\\d+/\n    }, {\n      begin: concat(/!/, IDENT_RE)\n    }, {\n      begin: concat(/!\\d+/, IDENT_RE)\n    }, // https://llvm.org/docs/LangRef.html#namedmetadatastructure\n    // obviously a single digit can also be used in this fashion\n    {\n      begin: /!\\d+/\n    }]\n  };\n  return {\n    name: 'LLVM IR',\n    // TODO: split into different categories of keywords\n    keywords: 'begin end true false declare define global ' + 'constant private linker_private internal ' + 'available_externally linkonce linkonce_odr weak ' + 'weak_odr appending dllimport dllexport common ' + 'default hidden protected extern_weak external ' + 'thread_local zeroinitializer undef null to tail ' + 'target triple datalayout volatile nuw nsw nnan ' + 'ninf nsz arcp fast exact inbounds align ' + 'addrspace section alias module asm sideeffect ' + 'gc dbg linker_private_weak attributes blockaddress ' + 'initialexec localdynamic localexec prefix unnamed_addr ' + 'ccc fastcc coldcc x86_stdcallcc x86_fastcallcc ' + 'arm_apcscc arm_aapcscc arm_aapcs_vfpcc ptx_device ' + 'ptx_kernel intel_ocl_bicc msp430_intrcc spir_func ' + 'spir_kernel x86_64_sysvcc x86_64_win64cc x86_thiscallcc ' + 'cc c signext zeroext inreg sret nounwind ' + 'noreturn noalias nocapture byval nest readnone ' + 'readonly inlinehint noinline alwaysinline optsize ssp ' + 'sspreq noredzone noimplicitfloat naked builtin cold ' + 'nobuiltin noduplicate nonlazybind optnone returns_twice ' + 'sanitize_address sanitize_memory sanitize_thread sspstrong ' + 'uwtable returned type opaque eq ne slt sgt ' + 'sle sge ult ugt ule uge oeq one olt ogt ' + 'ole oge ord uno ueq une x acq_rel acquire ' + 'alignstack atomic catch cleanup filter inteldialect ' + 'max min monotonic nand personality release seq_cst ' + 'singlethread umax umin unordered xchg add fadd ' + 'sub fsub mul fmul udiv sdiv fdiv urem srem ' + 'frem shl lshr ashr and or xor icmp fcmp ' + 'phi call trunc zext sext fptrunc fpext uitofp ' + 'sitofp fptoui fptosi inttoptr ptrtoint bitcast ' + 'addrspacecast select va_arg ret br switch invoke ' + 'unwind unreachable indirectbr landingpad resume ' + 'malloc alloca free load store getelementptr ' + 'extractelement insertelement shufflevector getresult ' + 'extractvalue insertvalue atomicrmw cmpxchg fence ' + 'argmemonly double',\n    contains: [TYPE, // this matches \"empty comments\"...\n    // ...because it's far more likely this is a statement terminator in\n    // another language than an actual comment\n    hljs.COMMENT(/;\\s*$/, null, {\n      relevance: 0\n    }), hljs.COMMENT(/;/, /$/), hljs.QUOTE_STRING_MODE, {\n      className: 'string',\n      variants: [// Double-quoted string\n      {\n        begin: /\"/,\n        end: /[^\\\\]\"/\n      }]\n    }, FUNCTION, PUNCTUATION, OPERATOR, VARIABLE, LABEL, NUMBER]\n  };\n}\n\nmodule.exports = llvm;","map":{"version":3,"sources":["C:/Users/Admin/Music/MANDO/ge-sc-machine/sco_frontend/node_modules/highlight.js/lib/languages/llvm.js"],"names":["source","re","concat","args","joined","map","x","join","llvm","hljs","IDENT_RE","TYPE","className","begin","OPERATOR","relevance","PUNCTUATION","NUMBER","variants","LABEL","VARIABLE","FUNCTION","name","keywords","contains","COMMENT","QUOTE_STRING_MODE","end","module","exports"],"mappings":"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","sourcesContent":["/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n\n  return re.source;\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map((x) => source(x)).join(\"\");\n  return joined;\n}\n\n/*\nLanguage: LLVM IR\nAuthor: Michael Rodler <contact@f0rki.at>\nDescription: language used as intermediate representation in the LLVM compiler framework\nWebsite: https://llvm.org/docs/LangRef.html\nCategory: assembler\nAudit: 2020\n*/\n\n/** @type LanguageFn */\nfunction llvm(hljs) {\n  const IDENT_RE = /([-a-zA-Z$._][\\w$.-]*)/;\n  const TYPE = {\n    className: 'type',\n    begin: /\\bi\\d+(?=\\s|\\b)/\n  };\n  const OPERATOR = {\n    className: 'operator',\n    relevance: 0,\n    begin: /=/\n  };\n  const PUNCTUATION = {\n    className: 'punctuation',\n    relevance: 0,\n    begin: /,/\n  };\n  const NUMBER = {\n    className: 'number',\n    variants: [\n        { begin: /0[xX][a-fA-F0-9]+/ },\n        { begin: /-?\\d+(?:[.]\\d+)?(?:[eE][-+]?\\d+(?:[.]\\d+)?)?/ }\n    ],\n    relevance: 0\n  };\n  const LABEL = {\n    className: 'symbol',\n    variants: [\n        { begin: /^\\s*[a-z]+:/ }, // labels\n    ],\n    relevance: 0\n  };\n  const VARIABLE = {\n    className: 'variable',\n    variants: [\n      { begin: concat(/%/, IDENT_RE) },\n      { begin: /%\\d+/ },\n      { begin: /#\\d+/ },\n    ]\n  };\n  const FUNCTION = {\n    className: 'title',\n    variants: [\n      { begin: concat(/@/, IDENT_RE) },\n      { begin: /@\\d+/ },\n      { begin: concat(/!/, IDENT_RE) },\n      { begin: concat(/!\\d+/, IDENT_RE) },\n      // https://llvm.org/docs/LangRef.html#namedmetadatastructure\n      // obviously a single digit can also be used in this fashion\n      { begin: /!\\d+/ }\n    ]\n  };\n\n  return {\n    name: 'LLVM IR',\n    // TODO: split into different categories of keywords\n    keywords:\n      'begin end true false declare define global ' +\n      'constant private linker_private internal ' +\n      'available_externally linkonce linkonce_odr weak ' +\n      'weak_odr appending dllimport dllexport common ' +\n      'default hidden protected extern_weak external ' +\n      'thread_local zeroinitializer undef null to tail ' +\n      'target triple datalayout volatile nuw nsw nnan ' +\n      'ninf nsz arcp fast exact inbounds align ' +\n      'addrspace section alias module asm sideeffect ' +\n      'gc dbg linker_private_weak attributes blockaddress ' +\n      'initialexec localdynamic localexec prefix unnamed_addr ' +\n      'ccc fastcc coldcc x86_stdcallcc x86_fastcallcc ' +\n      'arm_apcscc arm_aapcscc arm_aapcs_vfpcc ptx_device ' +\n      'ptx_kernel intel_ocl_bicc msp430_intrcc spir_func ' +\n      'spir_kernel x86_64_sysvcc x86_64_win64cc x86_thiscallcc ' +\n      'cc c signext zeroext inreg sret nounwind ' +\n      'noreturn noalias nocapture byval nest readnone ' +\n      'readonly inlinehint noinline alwaysinline optsize ssp ' +\n      'sspreq noredzone noimplicitfloat naked builtin cold ' +\n      'nobuiltin noduplicate nonlazybind optnone returns_twice ' +\n      'sanitize_address sanitize_memory sanitize_thread sspstrong ' +\n      'uwtable returned type opaque eq ne slt sgt ' +\n      'sle sge ult ugt ule uge oeq one olt ogt ' +\n      'ole oge ord uno ueq une x acq_rel acquire ' +\n      'alignstack atomic catch cleanup filter inteldialect ' +\n      'max min monotonic nand personality release seq_cst ' +\n      'singlethread umax umin unordered xchg add fadd ' +\n      'sub fsub mul fmul udiv sdiv fdiv urem srem ' +\n      'frem shl lshr ashr and or xor icmp fcmp ' +\n      'phi call trunc zext sext fptrunc fpext uitofp ' +\n      'sitofp fptoui fptosi inttoptr ptrtoint bitcast ' +\n      'addrspacecast select va_arg ret br switch invoke ' +\n      'unwind unreachable indirectbr landingpad resume ' +\n      'malloc alloca free load store getelementptr ' +\n      'extractelement insertelement shufflevector getresult ' +\n      'extractvalue insertvalue atomicrmw cmpxchg fence ' +\n      'argmemonly double',\n    contains: [\n      TYPE,\n      // this matches \"empty comments\"...\n      // ...because it's far more likely this is a statement terminator in\n      // another language than an actual comment\n      hljs.COMMENT(/;\\s*$/, null, { relevance: 0 }),\n      hljs.COMMENT(/;/, /$/),\n      hljs.QUOTE_STRING_MODE,\n      {\n        className: 'string',\n        variants: [\n          // Double-quoted string\n          { begin: /\"/, end: /[^\\\\]\"/ },\n        ]\n      },\n      FUNCTION,\n      PUNCTUATION,\n      OPERATOR,\n      VARIABLE,\n      LABEL,\n      NUMBER\n    ]\n  };\n}\n\nmodule.exports = llvm;\n"]},"metadata":{},"sourceType":"script"}