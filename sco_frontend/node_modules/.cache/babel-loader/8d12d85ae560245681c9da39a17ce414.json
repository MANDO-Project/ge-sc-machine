{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Admin\\\\Music\\\\MANDO\\\\ge-sc-machine\\\\sco_frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Admin\\\\Music\\\\MANDO\\\\ge-sc-machine\\\\sco_frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Admin\\\\Music\\\\MANDO\\\\ge-sc-machine\\\\sco_frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Admin\\\\Music\\\\MANDO\\\\ge-sc-machine\\\\sco_frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\Admin\\\\Music\\\\MANDO\\\\ge-sc-machine\\\\sco_frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport { EventDispatcher, Matrix4, Plane, Raycaster, Vector2, Vector3 } from 'three';\n\nvar _plane = new Plane();\n\nvar _raycaster = new Raycaster();\n\nvar _pointer = new Vector2();\n\nvar _offset = new Vector3();\n\nvar _intersection = new Vector3();\n\nvar _worldPosition = new Vector3();\n\nvar _inverseMatrix = new Matrix4();\n\nvar DragControls = /*#__PURE__*/function (_EventDispatcher) {\n  _inherits(DragControls, _EventDispatcher);\n\n  function DragControls(_objects, _camera, _domElement) {\n    var _this;\n\n    _classCallCheck(this, DragControls);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DragControls).call(this));\n    _domElement.style.touchAction = 'none'; // disable touch scroll\n\n    var _selected = null,\n        _hovered = null;\n    var _intersections = []; //\n\n    var scope = _assertThisInitialized(_assertThisInitialized(_this));\n\n    function activate() {\n      _domElement.addEventListener('pointermove', onPointerMove);\n\n      _domElement.addEventListener('pointerdown', onPointerDown);\n\n      _domElement.addEventListener('pointerup', onPointerCancel);\n\n      _domElement.addEventListener('pointerleave', onPointerCancel);\n    }\n\n    function deactivate() {\n      _domElement.removeEventListener('pointermove', onPointerMove);\n\n      _domElement.removeEventListener('pointerdown', onPointerDown);\n\n      _domElement.removeEventListener('pointerup', onPointerCancel);\n\n      _domElement.removeEventListener('pointerleave', onPointerCancel);\n\n      _domElement.style.cursor = '';\n    }\n\n    function dispose() {\n      deactivate();\n    }\n\n    function getObjects() {\n      return _objects;\n    }\n\n    function getRaycaster() {\n      return _raycaster;\n    }\n\n    function onPointerMove(event) {\n      if (scope.enabled === false) return;\n      updatePointer(event);\n\n      _raycaster.setFromCamera(_pointer, _camera);\n\n      if (_selected) {\n        if (_raycaster.ray.intersectPlane(_plane, _intersection)) {\n          _selected.position.copy(_intersection.sub(_offset).applyMatrix4(_inverseMatrix));\n        }\n\n        scope.dispatchEvent({\n          type: 'drag',\n          object: _selected\n        });\n        return;\n      } // hover support\n\n\n      if (event.pointerType === 'mouse' || event.pointerType === 'pen') {\n        _intersections.length = 0;\n\n        _raycaster.setFromCamera(_pointer, _camera);\n\n        _raycaster.intersectObjects(_objects, true, _intersections);\n\n        if (_intersections.length > 0) {\n          var object = _intersections[0].object;\n\n          _plane.setFromNormalAndCoplanarPoint(_camera.getWorldDirection(_plane.normal), _worldPosition.setFromMatrixPosition(object.matrixWorld));\n\n          if (_hovered !== object && _hovered !== null) {\n            scope.dispatchEvent({\n              type: 'hoveroff',\n              object: _hovered\n            });\n            _domElement.style.cursor = 'auto';\n            _hovered = null;\n          }\n\n          if (_hovered !== object) {\n            scope.dispatchEvent({\n              type: 'hoveron',\n              object: object\n            });\n            _domElement.style.cursor = 'pointer';\n            _hovered = object;\n          }\n        } else {\n          if (_hovered !== null) {\n            scope.dispatchEvent({\n              type: 'hoveroff',\n              object: _hovered\n            });\n            _domElement.style.cursor = 'auto';\n            _hovered = null;\n          }\n        }\n      }\n    }\n\n    function onPointerDown(event) {\n      if (scope.enabled === false) return;\n      updatePointer(event);\n      _intersections.length = 0;\n\n      _raycaster.setFromCamera(_pointer, _camera);\n\n      _raycaster.intersectObjects(_objects, true, _intersections);\n\n      if (_intersections.length > 0) {\n        _selected = scope.transformGroup === true ? _objects[0] : _intersections[0].object;\n\n        _plane.setFromNormalAndCoplanarPoint(_camera.getWorldDirection(_plane.normal), _worldPosition.setFromMatrixPosition(_selected.matrixWorld));\n\n        if (_raycaster.ray.intersectPlane(_plane, _intersection)) {\n          _inverseMatrix.copy(_selected.parent.matrixWorld).invert();\n\n          _offset.copy(_intersection).sub(_worldPosition.setFromMatrixPosition(_selected.matrixWorld));\n        }\n\n        _domElement.style.cursor = 'move';\n        scope.dispatchEvent({\n          type: 'dragstart',\n          object: _selected\n        });\n      }\n    }\n\n    function onPointerCancel() {\n      if (scope.enabled === false) return;\n\n      if (_selected) {\n        scope.dispatchEvent({\n          type: 'dragend',\n          object: _selected\n        });\n        _selected = null;\n      }\n\n      _domElement.style.cursor = _hovered ? 'pointer' : 'auto';\n    }\n\n    function updatePointer(event) {\n      var rect = _domElement.getBoundingClientRect();\n\n      _pointer.x = (event.clientX - rect.left) / rect.width * 2 - 1;\n      _pointer.y = -(event.clientY - rect.top) / rect.height * 2 + 1;\n    }\n\n    activate(); // API\n\n    _this.enabled = true;\n    _this.transformGroup = false;\n    _this.activate = activate;\n    _this.deactivate = deactivate;\n    _this.dispose = dispose;\n    _this.getObjects = getObjects;\n    _this.getRaycaster = getRaycaster;\n    return _this;\n  }\n\n  return DragControls;\n}(EventDispatcher);\n\nexport { DragControls };","map":null,"metadata":{},"sourceType":"module"}