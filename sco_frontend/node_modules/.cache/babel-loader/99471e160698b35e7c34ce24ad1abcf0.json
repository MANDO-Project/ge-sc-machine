{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React from 'react';\nimport '../sigma/sigma.plugins.dragNodes';\n/**\n *\n * DragNodes component, exposing the dragNodes plugin.\n *\n * When this plugin is active, individual nodes can be dragged around on\n * the canvas. The plugin fires various events during dragging and dropping.\n *\n * This plugin is not compatible with the WebGL renderer.\n *\n * @param {Sigma$EventHandler} onStartdrag      provide callback for \"startdrag\" event, fired at the beginning of the drag.\n * @param {Sigma$EventHandler} onDrag      provide callback for \"drag\" event, fired while the node is dragged.\n * @param {Sigma$EventHandler} onDrop      provide callback for \"drop\" event, fired at the end of the drag if the node has been dragged.\n * @param {Sigma$EventHandler} onDragend      provide callback for \"dragend\" event, fired at the end of the drag.\n *\n**/\n\nvar DragNodes = /*#__PURE__*/function (_React$Component) {\n  _inherits(DragNodes, _React$Component);\n\n  var _super = _createSuper(DragNodes);\n\n  function DragNodes(props) {\n    var _this;\n\n    _classCallCheck(this, DragNodes);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"render\", function () {\n      return null;\n    });\n\n    if (_this.props.sigma) {\n      var dragListener = sigma.plugins.dragNodes(_this.props.sigma, _this.props.sigma.renderers[0]);\n      DragNodes.bindHandlers(props, dragListener);\n    }\n\n    return _this;\n  }\n\n  _createClass(DragNodes, null, [{\n    key: \"bindHandlers\",\n    value: function bindHandlers(handlers, dragListener) {\n      // Adapted from Sigma component\n      [\"startdrag\", \"drag\", \"drop\", \"dragend\"].forEach(function (event) {\n        var handler = \"on\" + event[0].toUpperCase() + event.substr(1);\n\n        if (handlers[handler]) {\n          dragListener.bind(event, handlers[handler]);\n        }\n      });\n    }\n  }]);\n\n  return DragNodes;\n}(React.Component);\n\n_defineProperty(DragNodes, \"propTypes\", {\n  sigma: function (_sigma) {\n    function sigma() {\n      return _sigma.apply(this, arguments);\n    }\n\n    sigma.toString = function () {\n      return _sigma.toString();\n    };\n\n    return sigma;\n  }(function () {\n    return (typeof sigma === \"function\" ? PropTypes.instanceOf(sigma) : PropTypes.any).apply(this, arguments);\n  }),\n  onStartdrag: PropTypes.func,\n  onDrag: PropTypes.func,\n  onDrop: PropTypes.func,\n  onDragend: PropTypes.func\n});\n\nexport default DragNodes;\nimport PropTypes from \"prop-types\";","map":null,"metadata":{},"sourceType":"module"}