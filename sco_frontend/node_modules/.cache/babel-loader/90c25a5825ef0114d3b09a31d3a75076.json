{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\Admin\\\\Music\\\\MANDO\\\\ge-sc-machine\\\\sco_frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\Admin\\\\Music\\\\MANDO\\\\ge-sc-machine\\\\sco_frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Admin\\\\Music\\\\MANDO\\\\ge-sc-machine\\\\sco_frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport { utils } from \"./utils.js\";\n/**\n * Poly Bezier\n * @param {[type]} curves [description]\n */\n\nvar PolyBezier = /*#__PURE__*/function () {\n  function PolyBezier(curves) {\n    _classCallCheck(this, PolyBezier);\n\n    this.curves = [];\n    this._3d = false;\n\n    if (!!curves) {\n      this.curves = curves;\n      this._3d = this.curves[0]._3d;\n    }\n  }\n\n  _createClass(PolyBezier, [{\n    key: \"valueOf\",\n    value: function valueOf() {\n      return this.toString();\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"[\" + this.curves.map(function (curve) {\n        return utils.pointsToString(curve.points);\n      }).join(\", \") + \"]\";\n    }\n  }, {\n    key: \"addCurve\",\n    value: function addCurve(curve) {\n      this.curves.push(curve);\n      this._3d = this._3d || curve._3d;\n    }\n  }, {\n    key: \"length\",\n    value: function length() {\n      return this.curves.map(function (v) {\n        return v.length();\n      }).reduce(function (a, b) {\n        return a + b;\n      });\n    }\n  }, {\n    key: \"curve\",\n    value: function curve(idx) {\n      return this.curves[idx];\n    }\n  }, {\n    key: \"bbox\",\n    value: function bbox() {\n      var c = this.curves;\n      var bbox = c[0].bbox();\n\n      for (var i = 1; i < c.length; i++) {\n        utils.expandbox(bbox, c[i].bbox());\n      }\n\n      return bbox;\n    }\n  }, {\n    key: \"offset\",\n    value: function offset(d) {\n      var offset = [];\n      this.curves.forEach(function (v) {\n        offset.push.apply(offset, _toConsumableArray(v.offset(d)));\n      });\n      return new PolyBezier(offset);\n    }\n  }]);\n\n  return PolyBezier;\n}();\n\nexport { PolyBezier };","map":null,"metadata":{},"sourceType":"module"}