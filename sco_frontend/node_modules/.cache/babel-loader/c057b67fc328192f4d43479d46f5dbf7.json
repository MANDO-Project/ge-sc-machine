{"ast":null,"code":"import React, { forwardRef, useRef, useState, useEffect, useMemo, useLayoutEffect, useCallback, useImperativeHandle } from 'react';\nimport { omit } from 'jerrypick';\nimport fromEntries from 'fromentries';\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr && (typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]);\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction index(kapsuleComponent, comboParam) {\n  var _ref = _typeof(comboParam) === 'object' ? comboParam : {\n    // support old schema for backwards compatibility\n    wrapperElementType: comboParam,\n    methodNames: (arguments.length <= 2 ? undefined : arguments[2]) || undefined,\n    initPropNames: (arguments.length <= 3 ? undefined : arguments[3]) || undefined\n  },\n      _ref$wrapperElementTy = _ref.wrapperElementType,\n      wrapperElementType = _ref$wrapperElementTy === void 0 ? 'div' : _ref$wrapperElementTy,\n      _ref$nodeMapper = _ref.nodeMapper,\n      nodeMapper = _ref$nodeMapper === void 0 ? function (node) {\n    return node;\n  } : _ref$nodeMapper,\n      _ref$methodNames = _ref.methodNames,\n      methodNames = _ref$methodNames === void 0 ? [] : _ref$methodNames,\n      _ref$initPropNames = _ref.initPropNames,\n      initPropNames = _ref$initPropNames === void 0 ? [] : _ref$initPropNames;\n\n  return /*#__PURE__*/forwardRef(function (props, ref) {\n    var domEl = useRef();\n\n    var _useState = useState({}),\n        _useState2 = _slicedToArray(_useState, 2),\n        prevProps = _useState2[0],\n        setPrevProps = _useState2[1];\n\n    useEffect(function () {\n      return setPrevProps(props);\n    }); // remember previous props\n    // instantiate the inner kapsule component with the defined initPropNames\n\n    var comp = useMemo(function () {\n      var configOptions = fromEntries(initPropNames.filter(function (p) {\n        return props.hasOwnProperty(p);\n      }).map(function (prop) {\n        return [prop, props[prop]];\n      }));\n      return kapsuleComponent(configOptions);\n    }, []);\n    useLayoutEffect(function () {\n      comp(nodeMapper(domEl.current)); // mount kapsule synchronously on this element ref, optionally mapped into an object that the kapsule understands\n    }, []);\n    useEffect(function () {\n      // invoke destructor on unmount, if it exists\n      return comp._destructor instanceof Function ? comp._destructor : undefined;\n    }, []); // Call a component method\n\n    var _call = useCallback(function (method) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return comp[method] instanceof Function ? comp[method].apply(comp, args) : undefined;\n    } // method not found\n    , [comp]); // propagate component props that have changed\n\n\n    var dynamicProps = omit(props, [].concat(_toConsumableArray(methodNames), _toConsumableArray(initPropNames))); // initPropNames or methodNames should not be called\n\n    Object.keys(dynamicProps).filter(function (p) {\n      return prevProps[p] !== props[p];\n    }).forEach(function (p) {\n      return _call(p, props[p]);\n    }); // bind external methods to parent ref\n\n    useImperativeHandle(ref, function () {\n      return fromEntries(methodNames.map(function (method) {\n        return [method, function () {\n          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n            args[_key2] = arguments[_key2];\n          }\n\n          return _call.apply(void 0, [method].concat(args));\n        }];\n      }));\n    });\n    return /*#__PURE__*/React.createElement(wrapperElementType, {\n      ref: domEl\n    });\n  });\n}\n\nexport default index;","map":null,"metadata":{},"sourceType":"module"}