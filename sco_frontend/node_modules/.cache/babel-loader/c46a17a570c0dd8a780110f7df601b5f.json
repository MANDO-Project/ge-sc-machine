{"ast":null,"code":"var EPS = 0.1;\nmodule.exports = AFRAME.registerComponent('checkpoint-controls', {\n  schema: {\n    enabled: {\n      default: true\n    },\n    mode: {\n      default: 'teleport',\n      oneOf: ['teleport', 'animate']\n    },\n    animateSpeed: {\n      default: 3.0\n    }\n  },\n  init: function init() {\n    this.active = true;\n    this.checkpoint = null;\n    this.isNavMeshConstrained = false;\n    this.offset = new THREE.Vector3();\n    this.position = new THREE.Vector3();\n    this.targetPosition = new THREE.Vector3();\n  },\n  play: function play() {\n    this.active = true;\n  },\n  pause: function pause() {\n    this.active = false;\n  },\n  setCheckpoint: function setCheckpoint(checkpoint) {\n    var el = this.el;\n    if (!this.active) return;\n    if (this.checkpoint === checkpoint) return;\n\n    if (this.checkpoint) {\n      el.emit('navigation-end', {\n        checkpoint: this.checkpoint\n      });\n    }\n\n    this.checkpoint = checkpoint;\n    this.sync(); // Ignore new checkpoint if we're already there.\n\n    if (this.position.distanceTo(this.targetPosition) < EPS) {\n      this.checkpoint = null;\n      return;\n    }\n\n    el.emit('navigation-start', {\n      checkpoint: checkpoint\n    });\n\n    if (this.data.mode === 'teleport') {\n      this.el.setAttribute('position', this.targetPosition);\n      this.checkpoint = null;\n      el.emit('navigation-end', {\n        checkpoint: checkpoint\n      });\n      el.components['movement-controls'].updateNavLocation();\n    }\n  },\n  isVelocityActive: function isVelocityActive() {\n    return !!(this.active && this.checkpoint);\n  },\n  getVelocity: function getVelocity() {\n    if (!this.active) return;\n    var data = this.data;\n    var offset = this.offset;\n    var position = this.position;\n    var targetPosition = this.targetPosition;\n    var checkpoint = this.checkpoint;\n    this.sync();\n\n    if (position.distanceTo(targetPosition) < EPS) {\n      this.checkpoint = null;\n      this.el.emit('navigation-end', {\n        checkpoint: checkpoint\n      });\n      return offset.set(0, 0, 0);\n    }\n\n    offset.setLength(data.animateSpeed);\n    return offset;\n  },\n  sync: function sync() {\n    var offset = this.offset;\n    var position = this.position;\n    var targetPosition = this.targetPosition;\n    position.copy(this.el.getAttribute('position'));\n    this.checkpoint.object3D.getWorldPosition(targetPosition);\n    targetPosition.add(this.checkpoint.components.checkpoint.getOffset());\n    offset.copy(targetPosition).sub(position);\n  }\n});","map":null,"metadata":{},"sourceType":"script"}