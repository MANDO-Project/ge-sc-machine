{"ast":null,"code":"import 'aframe';\nimport 'aframe-extras';\nimport 'aframe-forcegraph-component';\nimport Kapsule from 'kapsule';\nimport accessorFn from 'accessor-fn';\nimport { parseToRgb, opacify } from 'polished';\n\nfunction styleInject(css, ref) {\n  if (ref === void 0) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') {\n    return;\n  }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar css_248z = \".graph-nav-info {\\n  position: absolute;\\n  bottom: 5px;\\n  width: 100%;\\n  text-align: center;\\n  color: slategrey;\\n  opacity: 0.7;\\n  font-size: 10px;\\n  font-family: Sans-serif;\\n  z-index: 1000;\\n}\";\nstyleInject(css_248z);\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nvar _3dForceGraphVr = Kapsule({\n  props: {\n    width: {\n      \"default\": window.innerWidth,\n      triggerUpdate: false,\n      onChange: function onChange(width, state) {\n        if (state.container) state.container.style.width = \"\".concat(width, \"px\");\n      }\n    },\n    height: {\n      \"default\": window.innerHeight,\n      triggerUpdate: false,\n      onChange: function onChange(height, state) {\n        if (state.container) state.container.style.height = \"\".concat(height, \"px\");\n      }\n    },\n    jsonUrl: {},\n    graphData: {\n      \"default\": {\n        nodes: [],\n        links: []\n      }\n    },\n    numDimensions: {\n      \"default\": 3\n    },\n    dagMode: {},\n    dagLevelDistance: {},\n    dagNodeFilter: {\n      \"default\": function _default() {\n        return true;\n      }\n    },\n    onDagError: {\n      \"default\": undefined\n    },\n    backgroundColor: {\n      \"default\": '#002'\n    },\n    showNavInfo: {\n      \"default\": true\n    },\n    nodeRelSize: {\n      \"default\": 4\n    },\n    // volume per val unit\n    nodeId: {\n      \"default\": 'id'\n    },\n    nodeLabel: {\n      \"default\": 'name'\n    },\n    nodeDesc: {\n      \"default\": 'desc'\n    },\n    onNodeHover: {},\n    onNodeClick: {},\n    nodeVal: {\n      \"default\": 'val'\n    },\n    nodeResolution: {\n      \"default\": 8\n    },\n    // how many slice segments in the sphere's circumference\n    nodeVisibility: {\n      \"default\": true\n    },\n    nodeColor: {\n      \"default\": 'color'\n    },\n    nodeAutoColorBy: {},\n    nodeOpacity: {\n      \"default\": 0.75\n    },\n    nodeThreeObject: {},\n    nodeThreeObjectExtend: {\n      \"default\": false\n    },\n    linkSource: {\n      \"default\": 'source'\n    },\n    linkTarget: {\n      \"default\": 'target'\n    },\n    linkLabel: {\n      \"default\": 'name'\n    },\n    linkDesc: {\n      \"default\": 'desc'\n    },\n    onLinkHover: {},\n    onLinkClick: {},\n    linkVisibility: {\n      \"default\": true\n    },\n    linkColor: {\n      \"default\": 'color'\n    },\n    linkAutoColorBy: {},\n    linkOpacity: {\n      \"default\": 0.2\n    },\n    linkWidth: {\n      \"default\": 0\n    },\n    linkResolution: {\n      \"default\": 6\n    },\n    // how many radial segments in each line cylinder's geometry\n    linkCurvature: {\n      \"default\": 0\n    },\n    linkCurveRotation: {\n      \"default\": 0\n    },\n    linkMaterial: {},\n    linkThreeObject: {},\n    linkThreeObjectExtend: {\n      \"default\": false\n    },\n    linkPositionUpdate: {},\n    linkDirectionalArrowLength: {\n      \"default\": 0\n    },\n    linkDirectionalArrowColor: {},\n    linkDirectionalArrowRelPos: {\n      \"default\": 0.5\n    },\n    // value between 0<>1 indicating the relative pos along the (exposed) line\n    linkDirectionalArrowResolution: {\n      \"default\": 8\n    },\n    // how many slice segments in the arrow's conic circumference\n    linkDirectionalParticles: {\n      \"default\": 0\n    },\n    // animate photons travelling in the link direction\n    linkDirectionalParticleSpeed: {\n      \"default\": 0.01\n    },\n    // in link length ratio per frame\n    linkDirectionalParticleWidth: {\n      \"default\": 0.5\n    },\n    linkDirectionalParticleColor: {},\n    linkDirectionalParticleResolution: {\n      \"default\": 4\n    },\n    // how many slice segments in the particle sphere's circumference\n    forceEngine: {\n      \"default\": 'd3'\n    },\n    // d3 or ngraph\n    d3AlphaMin: {\n      \"default\": 0\n    },\n    d3AlphaDecay: {\n      \"default\": 0.0228\n    },\n    d3VelocityDecay: {\n      \"default\": 0.4\n    },\n    ngraphPhysics: {},\n    warmupTicks: {\n      \"default\": 0\n    },\n    // how many times to tick the force engine at init before starting to render\n    cooldownTicks: {},\n    cooldownTime: {\n      \"default\": 15000\n    },\n    // ms\n    onEngineTick: {},\n    onEngineStop: {}\n  },\n  methods: _objectSpread2(_objectSpread2({}, Object.assign.apply(Object, [{}].concat(_toConsumableArray(['getGraphBbox', 'emitParticle', 'd3Force', 'd3ReheatSimulation', 'refresh'].map(function (method) {\n    return _defineProperty({}, method, function (state) {\n      var aframeComp = state.forcegraph.components.forcegraph;\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      var returnVal = aframeComp[method].apply(aframeComp, args);\n      return returnVal === aframeComp ? this // chain based on this object, not the inner aframe component\n      : returnVal;\n    });\n  }))))), {}, {\n    _destructor: function _destructor() {\n      this.graphData({\n        nodes: [],\n        links: []\n      });\n    }\n  }),\n  init: function init(domNode, state) {\n    // Wipe DOM\n    domNode.innerHTML = '';\n    state.container = document.createElement('div');\n    domNode.appendChild(state.container);\n    state.container.style.position = 'relative';\n    state.container.style.width = \"\".concat(state.width, \"px\");\n    state.container.style.height = \"\".concat(state.height, \"px\"); // Add nav info section\n\n    state.container.appendChild(state.navInfo = document.createElement('div'));\n    state.navInfo.className = 'graph-nav-info';\n    state.navInfo.textContent = 'Mouse drag: look, gamepad/arrow/wasd keys: move'; // Create scene\n\n    var scene = document.createElement('a-scene');\n    scene.setAttribute('embedded', ''); //scene.setAttribute('stats', null);\n\n    scene.appendChild(state.sky = document.createElement('a-sky'));\n    state.sky.setAttribute('radius', 3000); // Add camera\n\n    var cameraG;\n    scene.appendChild(cameraG = document.createElement('a-entity'));\n    cameraG.setAttribute('position', '0 0 300');\n    cameraG.setAttribute('movement-controls', 'fly: true; speed: 7');\n    var camera;\n    cameraG.appendChild(camera = document.createElement('a-entity'));\n    camera.setAttribute('camera', '');\n    camera.setAttribute('position', '0 0 0');\n    camera.setAttribute('look-controls', 'reverseMouseDrag: false; pointerLockEnabled: false'); // display cursor in middle of screen\n    // let cursor;\n    // camera.appendChild(cursor = document.createElement('a-cursor'));\n    // cursor.setAttribute('color', 'lavender');\n    // cursor.setAttribute('opacity', 0.5);\n    // cursor.setAttribute('raycaster', 'objects: ----none----'); // disable cursor raycaster\n    // Setup tooltip\n\n    var tooltipEl;\n    camera.appendChild(tooltipEl = document.createElement('a-text'));\n    tooltipEl.setAttribute('position', '0 -0.3 -1');\n    tooltipEl.setAttribute('width', 2);\n    tooltipEl.setAttribute('align', 'center');\n    tooltipEl.setAttribute('color', 'lavender');\n    tooltipEl.setAttribute('value', ''); // Setup sub-tooltip\n\n    var subTooltipEl;\n    camera.appendChild(subTooltipEl = document.createElement('a-text'));\n    subTooltipEl.setAttribute('position', '0 -0.4 -1');\n    subTooltipEl.setAttribute('width', 1.3);\n    subTooltipEl.setAttribute('align', 'center');\n    subTooltipEl.setAttribute('color', 'lavender');\n    subTooltipEl.setAttribute('value', ''); // Setup mouse cursor and laser raycasting controls\n\n    state.raycasterEls = [];\n    var mouseCursor;\n    scene.appendChild(mouseCursor = document.createElement('a-entity'));\n    mouseCursor.setAttribute('cursor', 'rayOrigin: mouse; mouseCursorStylesEnabled: true');\n    mouseCursor.setAttribute('raycaster', 'objects: [forcegraph]; interval: 100');\n    state.raycasterEls.push(mouseCursor);\n    ['left', 'right'].forEach(function (hand) {\n      var laser;\n      cameraG.appendChild(laser = document.createElement('a-entity'));\n      laser.setAttribute('laser-controls', \"hand: \".concat(hand));\n      laser.setAttribute('raycaster', 'objects: [forcegraph]; interval: 100; lineColor: steelblue; lineOpacity: 0.85');\n      state.raycasterEls.push(laser);\n    }); // Add forcegraph entity\n\n    scene.appendChild(state.forcegraph = document.createElement('a-entity'));\n    state.forcegraph.setAttribute('forcegraph', null); // attach scene\n\n    state.container.appendChild(scene); // update tooltips\n\n    state.forcegraph.setAttribute('forcegraph', Object.assign.apply(Object, _toConsumableArray(['node', 'link'].map(function (t) {\n      var cct = {\n        node: 'Node',\n        link: 'Link'\n      }[t]; // camel-case version\n\n      return _defineProperty({}, \"on\".concat(cct, \"Hover\"), function onHover(obj, prevObj) {\n        var label = obj ? accessorFn(state[\"\".concat(t, \"Label\")])(obj) || '' : '';\n        var subLabel = obj ? accessorFn(state[\"\".concat(t, \"Desc\")])(obj) || '' : '';\n        tooltipEl.setAttribute('value', label);\n        subTooltipEl.setAttribute('value', subLabel);\n        state[\"on\".concat(cct, \"Hover\")] && state[\"on\".concat(cct, \"Hover\")](obj, prevObj);\n      });\n    }))));\n  },\n  update: function update(state, changedProps) {\n    if (changedProps.hasOwnProperty('backgroundColor')) {\n      var alpha = parseToRgb(state.backgroundColor).alpha;\n      if (alpha === undefined) alpha = 1;\n      state.sky.setAttribute('color', opacify(1, state.backgroundColor));\n      state.sky.setAttribute('opacity', alpha);\n    }\n\n    changedProps.hasOwnProperty('showNavInfo') && (state.navInfo.style.display = state.showNavInfo ? null : 'none'); // deactivate raycasting against the forcegraph if no interaction props are set\n\n    var isInteractive = ['onNodeHover', 'onLinkHover', 'onNodeClick', 'onLinkClick'].some(function (p) {\n      return state[p];\n    }) || ['nodeLabel', 'linkLabel'].some(function (p) {\n      return state[p] !== 'name';\n    }) || ['nodeDesc', 'linkDesc'].some(function (p) {\n      return state[p] !== 'desc';\n    });\n    state.raycasterEls.forEach(function (el) {\n      return el.setAttribute('raycaster', isInteractive ? 'objects: [forcegraph]; interval: 100' : 'objects: __none__');\n    });\n    var passThroughProps = ['jsonUrl', 'numDimensions', 'dagMode', 'dagLevelDistance', 'dagNodeFilter', 'onDagError', 'nodeRelSize', 'nodeId', 'onNodeClick', 'nodeVal', 'nodeResolution', 'nodeVisibility', 'nodeColor', 'nodeAutoColorBy', 'nodeOpacity', 'nodeThreeObject', 'nodeThreeObjectExtend', 'linkSource', 'linkTarget', 'onLinkClick', 'linkVisibility', 'linkColor', 'linkAutoColorBy', 'linkOpacity', 'linkWidth', 'linkResolution', 'linkCurvature', 'linkCurveRotation', 'linkMaterial', 'linkThreeObject', 'linkThreeObjectExtend', 'linkPositionUpdate', 'linkDirectionalArrowLength', 'linkDirectionalArrowColor', 'linkDirectionalArrowRelPos', 'linkDirectionalArrowResolution', 'linkDirectionalParticles', 'linkDirectionalParticleSpeed', 'linkDirectionalParticleWidth', 'linkDirectionalParticleColor', 'linkDirectionalParticleResolution', 'forceEngine', 'd3AlphaMin', 'd3AlphaDecay', 'd3VelocityDecay', 'ngraphPhysics', 'warmupTicks', 'cooldownTicks', 'cooldownTime', 'onEngineTick', 'onEngineStop'];\n    var newProps = Object.assign.apply(Object, [{}].concat(_toConsumableArray(Object.entries(state).filter(function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 2),\n          prop = _ref4[0],\n          val = _ref4[1];\n\n      return changedProps.hasOwnProperty(prop) && passThroughProps.indexOf(prop) !== -1 && val !== undefined && val !== null;\n    }).map(function (_ref5) {\n      var _ref6 = _slicedToArray(_ref5, 2),\n          key = _ref6[0],\n          val = _ref6[1];\n\n      return _defineProperty({}, key, val);\n    })), _toConsumableArray(Object.entries(state.graphData).map(function (_ref8) {\n      var _ref9 = _slicedToArray(_ref8, 2),\n          key = _ref9[0],\n          val = _ref9[1];\n\n      return _defineProperty({}, key, val);\n    }))));\n    state.forcegraph.setAttribute('forcegraph', newProps);\n  }\n});\n\nexport { _3dForceGraphVr as default };","map":null,"metadata":{},"sourceType":"module"}