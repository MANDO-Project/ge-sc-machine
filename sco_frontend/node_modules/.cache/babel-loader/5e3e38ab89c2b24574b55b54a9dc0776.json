{"ast":null,"code":"/* global CANNON */\n\n/**\n * Based on aframe/examples/showcase/tracked-controls.\n *\n * Handles events coming from the hand-controls.\n * Determines if the entity is grabbed or released.\n * Updates its position to move along the controller.\n */\nmodule.exports = AFRAME.registerComponent('grab', {\n  init: function init() {\n    this.system = this.el.sceneEl.systems.physics;\n    this.GRABBED_STATE = 'grabbed';\n    this.grabbing = false;\n    this.hitEl =\n    /** @type {AFRAME.Element}    */\n    null;\n    this.physics =\n    /** @type {AFRAME.System}     */\n    this.el.sceneEl.systems.physics;\n    this.constraint =\n    /** @type {CANNON.Constraint} */\n    null; // Bind event handlers\n\n    this.onHit = this.onHit.bind(this);\n    this.onGripOpen = this.onGripOpen.bind(this);\n    this.onGripClose = this.onGripClose.bind(this);\n  },\n  play: function play() {\n    var el = this.el;\n    el.addEventListener('hit', this.onHit);\n    el.addEventListener('gripdown', this.onGripClose);\n    el.addEventListener('gripup', this.onGripOpen);\n    el.addEventListener('trackpaddown', this.onGripClose);\n    el.addEventListener('trackpadup', this.onGripOpen);\n    el.addEventListener('triggerdown', this.onGripClose);\n    el.addEventListener('triggerup', this.onGripOpen);\n  },\n  pause: function pause() {\n    var el = this.el;\n    el.removeEventListener('hit', this.onHit);\n    el.removeEventListener('gripdown', this.onGripClose);\n    el.removeEventListener('gripup', this.onGripOpen);\n    el.removeEventListener('trackpaddown', this.onGripClose);\n    el.removeEventListener('trackpadup', this.onGripOpen);\n    el.removeEventListener('triggerdown', this.onGripClose);\n    el.removeEventListener('triggerup', this.onGripOpen);\n  },\n  onGripClose: function onGripClose() {\n    this.grabbing = true;\n  },\n  onGripOpen: function onGripOpen() {\n    var hitEl = this.hitEl;\n    this.grabbing = false;\n\n    if (!hitEl) {\n      return;\n    }\n\n    hitEl.removeState(this.GRABBED_STATE);\n    this.hitEl = undefined;\n    this.system.removeConstraint(this.constraint);\n    this.constraint = null;\n  },\n  onHit: function onHit(evt) {\n    var hitEl = evt.detail.el; // If the element is already grabbed (it could be grabbed by another controller).\n    // If the hand is not grabbing the element does not stick.\n    // If we're already grabbing something you can't grab again.\n\n    if (!hitEl || hitEl.is(this.GRABBED_STATE) || !this.grabbing || this.hitEl) {\n      return;\n    }\n\n    hitEl.addState(this.GRABBED_STATE);\n    this.hitEl = hitEl;\n    this.constraint = new CANNON.LockConstraint(this.el.body, hitEl.body);\n    this.system.addConstraint(this.constraint);\n  }\n});","map":null,"metadata":{},"sourceType":"script"}