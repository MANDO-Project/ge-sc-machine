{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _d3Shape = require(\"d3-shape\");\n\nvar _node = _interopRequireDefault(require(\"./node.const\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n/**\n * @module Node/helper\n * @description\n * Some methods that help no the process of rendering a node.\n */\n\n/**\n * Converts a string that specifies a symbol into a concrete instance\n * of d3 symbol.<br/>\n * {@link https://github.com/d3/d3-shape/blob/master/README.md#symbol}\n * @param  {string} typeName - the string that specifies the symbol type (should be one of {@link #node-symbol-type|node.symbolType}).\n * @returns {Object} concrete instance of d3 symbol (defaults to circle).\n * @memberof Node/helper\n */\n\n\nfunction _convertTypeToD3Symbol(typeName) {\n  switch (typeName) {\n    case _node[\"default\"].SYMBOLS.CIRCLE:\n      return _d3Shape.symbolCircle;\n\n    case _node[\"default\"].SYMBOLS.CROSS:\n      return _d3Shape.symbolCross;\n\n    case _node[\"default\"].SYMBOLS.DIAMOND:\n      return _d3Shape.symbolDiamond;\n\n    case _node[\"default\"].SYMBOLS.SQUARE:\n      return _d3Shape.symbolSquare;\n\n    case _node[\"default\"].SYMBOLS.STAR:\n      return _d3Shape.symbolStar;\n\n    case _node[\"default\"].SYMBOLS.TRIANGLE:\n      return _d3Shape.symbolTriangle;\n\n    case _node[\"default\"].SYMBOLS.WYE:\n      return _d3Shape.symbolWye;\n\n    default:\n      return _d3Shape.symbolCircle;\n  }\n}\n/**\n * Build a d3 svg symbol based on passed symbol and symbol type.\n * @param  {number} [size=80] - the size of the symbol.\n * @param  {string} [symbolTypeDesc='circle'] - the string containing the type of symbol that we want to build\n * (should be one of {@link #node-symbol-type|node.symbolType}).\n * @returns {Object} concrete instance of d3 symbol.\n * @memberof Node/helper\n */\n\n\nfunction buildSvgSymbol() {\n  var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _node[\"default\"].DEFAULT_NODE_SIZE;\n  var symbolTypeDesc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _node[\"default\"].SYMBOLS.CIRCLE;\n  return (0, _d3Shape.symbol)().size(function () {\n    return size;\n  }).type(function () {\n    return _convertTypeToD3Symbol(symbolTypeDesc);\n  })();\n}\n/**\n * return dx, dy, and potentially alignmentBaseline and textAnchor props to put label in correct position relative to node\n * @param {number | undefined} dx - default computed offset of label\n * @param {'left' | 'right' | 'top' | 'bottom' | 'center' | undefined} labelPosition - user specified position of label relative to node\n * @returns {{dx: string, dy: string} | {dx: string, dy: string, textAnchor: string, dominantBaseline: string}}\n * props to put text svg for label in correct spot. default case returns just dx and dy, without textAnchor and dominantBaseline\n * @memberof Node/helper\n */\n\n\nfunction getLabelPlacementProps(dx, labelPosition) {\n  switch (labelPosition) {\n    case \"right\":\n      return {\n        dx: dx ? \"\".concat(dx) : _node[\"default\"].NODE_LABEL_DX,\n        dy: \"0\",\n        dominantBaseline: \"middle\",\n        textAnchor: \"start\"\n      };\n\n    case \"left\":\n      return {\n        dx: dx ? \"\".concat(-dx) : \"-\".concat(_node[\"default\"].NODE_LABEL_DX),\n        dy: \"0\",\n        dominantBaseline: \"middle\",\n        textAnchor: \"end\"\n      };\n\n    case \"top\":\n      return {\n        dx: \"0\",\n        dy: dx ? \"\".concat(-dx) : \"-\".concat(_node[\"default\"].NODE_LABEL_DX),\n        dominantBaseline: \"baseline\",\n        textAnchor: \"middle\"\n      };\n\n    case \"bottom\":\n      return {\n        dx: \"0\",\n        dy: dx ? \"\".concat(dx) : _node[\"default\"].NODE_LABEL_DX,\n        dominantBaseline: \"hanging\",\n        textAnchor: \"middle\"\n      };\n\n    case \"center\":\n      return {\n        dx: \"0\",\n        dy: \"0\",\n        dominantBaseline: \"middle\",\n        textAnchor: \"middle\"\n      };\n\n    default:\n      return {\n        dx: dx ? \"\".concat(dx) : _node[\"default\"].NODE_LABEL_DX,\n        dy: _node[\"default\"].NODE_LABEL_DY\n      };\n  }\n}\n\nvar _default = {\n  buildSvgSymbol: buildSvgSymbol,\n  getLabelPlacementProps: getLabelPlacementProps\n};\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}