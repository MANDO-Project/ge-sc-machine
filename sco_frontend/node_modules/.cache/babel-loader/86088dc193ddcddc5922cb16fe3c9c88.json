{"ast":null,"code":"/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n  return re.source;\n}\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\n\n\nfunction concat() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  const joined = args.map(x => source(x)).join(\"\");\n  return joined;\n}\n/**\n * Any of the passed expresssions may match\n *\n * Creates a huge this | this | that | that match\n * @param {(RegExp | string)[] } args\n * @returns {string}\n */\n\n\nfunction either() {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n\n  const joined = '(' + args.map(x => source(x)).join(\"|\") + \")\";\n  return joined;\n}\n/*\nLanguage: Visual Basic .NET\nDescription: Visual Basic .NET (VB.NET) is a multi-paradigm, object-oriented programming language, implemented on the .NET Framework.\nAuthors: Poren Chiang <ren.chiang@gmail.com>, Jan Pilzer\nWebsite: https://docs.microsoft.com/dotnet/visual-basic/getting-started\nCategory: common\n*/\n\n/** @type LanguageFn */\n\n\nfunction vbnet(hljs) {\n  /**\n   * Character Literal\n   * Either a single character (\"a\"C) or an escaped double quote (\"\"\"\"C).\n   */\n  const CHARACTER = {\n    className: 'string',\n    begin: /\"(\"\"|[^/n])\"C\\b/\n  };\n  const STRING = {\n    className: 'string',\n    begin: /\"/,\n    end: /\"/,\n    illegal: /\\n/,\n    contains: [{\n      // double quote escape\n      begin: /\"\"/\n    }]\n  };\n  /** Date Literals consist of a date, a time, or both separated by whitespace, surrounded by # */\n\n  const MM_DD_YYYY = /\\d{1,2}\\/\\d{1,2}\\/\\d{4}/;\n  const YYYY_MM_DD = /\\d{4}-\\d{1,2}-\\d{1,2}/;\n  const TIME_12H = /(\\d|1[012])(:\\d+){0,2} *(AM|PM)/;\n  const TIME_24H = /\\d{1,2}(:\\d{1,2}){1,2}/;\n  const DATE = {\n    className: 'literal',\n    variants: [{\n      // #YYYY-MM-DD# (ISO-Date) or #M/D/YYYY# (US-Date)\n      begin: concat(/# */, either(YYYY_MM_DD, MM_DD_YYYY), / *#/)\n    }, {\n      // #H:mm[:ss]# (24h Time)\n      begin: concat(/# */, TIME_24H, / *#/)\n    }, {\n      // #h[:mm[:ss]] A# (12h Time)\n      begin: concat(/# */, TIME_12H, / *#/)\n    }, {\n      // date plus time\n      begin: concat(/# */, either(YYYY_MM_DD, MM_DD_YYYY), / +/, either(TIME_12H, TIME_24H), / *#/)\n    }]\n  };\n  const NUMBER = {\n    className: 'number',\n    relevance: 0,\n    variants: [{\n      // Float\n      begin: /\\b\\d[\\d_]*((\\.[\\d_]+(E[+-]?[\\d_]+)?)|(E[+-]?[\\d_]+))[RFD@!#]?/\n    }, {\n      // Integer (base 10)\n      begin: /\\b\\d[\\d_]*((U?[SIL])|[%&])?/\n    }, {\n      // Integer (base 16)\n      begin: /&H[\\dA-F_]+((U?[SIL])|[%&])?/\n    }, {\n      // Integer (base 8)\n      begin: /&O[0-7_]+((U?[SIL])|[%&])?/\n    }, {\n      // Integer (base 2)\n      begin: /&B[01_]+((U?[SIL])|[%&])?/\n    }]\n  };\n  const LABEL = {\n    className: 'label',\n    begin: /^\\w+:/\n  };\n  const DOC_COMMENT = hljs.COMMENT(/'''/, /$/, {\n    contains: [{\n      className: 'doctag',\n      begin: /<\\/?/,\n      end: />/\n    }]\n  });\n  const COMMENT = hljs.COMMENT(null, /$/, {\n    variants: [{\n      begin: /'/\n    }, {\n      // TODO: Use `beforeMatch:` for leading spaces\n      begin: /([\\t ]|^)REM(?=\\s)/\n    }]\n  });\n  const DIRECTIVES = {\n    className: 'meta',\n    // TODO: Use `beforeMatch:` for indentation once available\n    begin: /[\\t ]*#(const|disable|else|elseif|enable|end|externalsource|if|region)\\b/,\n    end: /$/,\n    keywords: {\n      'meta-keyword': 'const disable else elseif enable end externalsource if region then'\n    },\n    contains: [COMMENT]\n  };\n  return {\n    name: 'Visual Basic .NET',\n    aliases: ['vb'],\n    case_insensitive: true,\n    classNameAliases: {\n      label: 'symbol'\n    },\n    keywords: {\n      keyword: 'addhandler alias aggregate ansi as async assembly auto binary by byref byval ' +\n      /* a-b */\n      'call case catch class compare const continue custom declare default delegate dim distinct do ' +\n      /* c-d */\n      'each equals else elseif end enum erase error event exit explicit finally for friend from function ' +\n      /* e-f */\n      'get global goto group handles if implements imports in inherits interface into iterator ' +\n      /* g-i */\n      'join key let lib loop me mid module mustinherit mustoverride mybase myclass ' +\n      /* j-m */\n      'namespace narrowing new next notinheritable notoverridable ' +\n      /* n */\n      'of off on operator option optional order overloads overridable overrides ' +\n      /* o */\n      'paramarray partial preserve private property protected public ' +\n      /* p */\n      'raiseevent readonly redim removehandler resume return ' +\n      /* r */\n      'select set shadows shared skip static step stop structure strict sub synclock ' +\n      /* s */\n      'take text then throw to try unicode until using when where while widening with withevents writeonly yield'\n      /* t-y */\n      ,\n      built_in: // Operators https://docs.microsoft.com/dotnet/visual-basic/language-reference/operators\n      'addressof and andalso await directcast gettype getxmlnamespace is isfalse isnot istrue like mod nameof new not or orelse trycast typeof xor ' + // Type Conversion Functions https://docs.microsoft.com/dotnet/visual-basic/language-reference/functions/type-conversion-functions\n      'cbool cbyte cchar cdate cdbl cdec cint clng cobj csbyte cshort csng cstr cuint culng cushort',\n      type: // Data types https://docs.microsoft.com/dotnet/visual-basic/language-reference/data-types\n      'boolean byte char date decimal double integer long object sbyte short single string uinteger ulong ushort',\n      literal: 'true false nothing'\n    },\n    illegal: '//|\\\\{|\\\\}|endif|gosub|variant|wend|^\\\\$ '\n    /* reserved deprecated keywords */\n    ,\n    contains: [CHARACTER, STRING, DATE, NUMBER, LABEL, DOC_COMMENT, COMMENT, DIRECTIVES]\n  };\n}\n\nmodule.exports = vbnet;","map":{"version":3,"sources":["C:/Users/Admin/Music/MANDO/ge-sc-machine/sco_frontend/node_modules/highlight.js/lib/languages/vbnet.js"],"names":["source","re","concat","args","joined","map","x","join","either","vbnet","hljs","CHARACTER","className","begin","STRING","end","illegal","contains","MM_DD_YYYY","YYYY_MM_DD","TIME_12H","TIME_24H","DATE","variants","NUMBER","relevance","LABEL","DOC_COMMENT","COMMENT","DIRECTIVES","keywords","name","aliases","case_insensitive","classNameAliases","label","keyword","built_in","type","literal","module","exports"],"mappings":"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","sourcesContent":["/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n\n  return re.source;\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map((x) => source(x)).join(\"\");\n  return joined;\n}\n\n/**\n * Any of the passed expresssions may match\n *\n * Creates a huge this | this | that | that match\n * @param {(RegExp | string)[] } args\n * @returns {string}\n */\nfunction either(...args) {\n  const joined = '(' + args.map((x) => source(x)).join(\"|\") + \")\";\n  return joined;\n}\n\n/*\nLanguage: Visual Basic .NET\nDescription: Visual Basic .NET (VB.NET) is a multi-paradigm, object-oriented programming language, implemented on the .NET Framework.\nAuthors: Poren Chiang <ren.chiang@gmail.com>, Jan Pilzer\nWebsite: https://docs.microsoft.com/dotnet/visual-basic/getting-started\nCategory: common\n*/\n\n/** @type LanguageFn */\nfunction vbnet(hljs) {\n  /**\n   * Character Literal\n   * Either a single character (\"a\"C) or an escaped double quote (\"\"\"\"C).\n   */\n  const CHARACTER = {\n    className: 'string',\n    begin: /\"(\"\"|[^/n])\"C\\b/\n  };\n\n  const STRING = {\n    className: 'string',\n    begin: /\"/,\n    end: /\"/,\n    illegal: /\\n/,\n    contains: [\n      {\n        // double quote escape\n        begin: /\"\"/\n      }\n    ]\n  };\n\n  /** Date Literals consist of a date, a time, or both separated by whitespace, surrounded by # */\n  const MM_DD_YYYY = /\\d{1,2}\\/\\d{1,2}\\/\\d{4}/;\n  const YYYY_MM_DD = /\\d{4}-\\d{1,2}-\\d{1,2}/;\n  const TIME_12H = /(\\d|1[012])(:\\d+){0,2} *(AM|PM)/;\n  const TIME_24H = /\\d{1,2}(:\\d{1,2}){1,2}/;\n  const DATE = {\n    className: 'literal',\n    variants: [\n      {\n        // #YYYY-MM-DD# (ISO-Date) or #M/D/YYYY# (US-Date)\n        begin: concat(/# */, either(YYYY_MM_DD, MM_DD_YYYY), / *#/)\n      },\n      {\n        // #H:mm[:ss]# (24h Time)\n        begin: concat(/# */, TIME_24H, / *#/)\n      },\n      {\n        // #h[:mm[:ss]] A# (12h Time)\n        begin: concat(/# */, TIME_12H, / *#/)\n      },\n      {\n        // date plus time\n        begin: concat(\n          /# */,\n          either(YYYY_MM_DD, MM_DD_YYYY),\n          / +/,\n          either(TIME_12H, TIME_24H),\n          / *#/\n        )\n      }\n    ]\n  };\n\n  const NUMBER = {\n    className: 'number',\n    relevance: 0,\n    variants: [\n      {\n        // Float\n        begin: /\\b\\d[\\d_]*((\\.[\\d_]+(E[+-]?[\\d_]+)?)|(E[+-]?[\\d_]+))[RFD@!#]?/\n      },\n      {\n        // Integer (base 10)\n        begin: /\\b\\d[\\d_]*((U?[SIL])|[%&])?/\n      },\n      {\n        // Integer (base 16)\n        begin: /&H[\\dA-F_]+((U?[SIL])|[%&])?/\n      },\n      {\n        // Integer (base 8)\n        begin: /&O[0-7_]+((U?[SIL])|[%&])?/\n      },\n      {\n        // Integer (base 2)\n        begin: /&B[01_]+((U?[SIL])|[%&])?/\n      }\n    ]\n  };\n\n  const LABEL = {\n    className: 'label',\n    begin: /^\\w+:/\n  };\n\n  const DOC_COMMENT = hljs.COMMENT(/'''/, /$/, {\n    contains: [\n      {\n        className: 'doctag',\n        begin: /<\\/?/,\n        end: />/\n      }\n    ]\n  });\n\n  const COMMENT = hljs.COMMENT(null, /$/, {\n    variants: [\n      {\n        begin: /'/\n      },\n      {\n        // TODO: Use `beforeMatch:` for leading spaces\n        begin: /([\\t ]|^)REM(?=\\s)/\n      }\n    ]\n  });\n\n  const DIRECTIVES = {\n    className: 'meta',\n    // TODO: Use `beforeMatch:` for indentation once available\n    begin: /[\\t ]*#(const|disable|else|elseif|enable|end|externalsource|if|region)\\b/,\n    end: /$/,\n    keywords: {\n      'meta-keyword':\n        'const disable else elseif enable end externalsource if region then'\n    },\n    contains: [ COMMENT ]\n  };\n\n  return {\n    name: 'Visual Basic .NET',\n    aliases: [ 'vb' ],\n    case_insensitive: true,\n    classNameAliases: {\n      label: 'symbol'\n    },\n    keywords: {\n      keyword:\n        'addhandler alias aggregate ansi as async assembly auto binary by byref byval ' + /* a-b */\n        'call case catch class compare const continue custom declare default delegate dim distinct do ' + /* c-d */\n        'each equals else elseif end enum erase error event exit explicit finally for friend from function ' + /* e-f */\n        'get global goto group handles if implements imports in inherits interface into iterator ' + /* g-i */\n        'join key let lib loop me mid module mustinherit mustoverride mybase myclass ' + /* j-m */\n        'namespace narrowing new next notinheritable notoverridable ' + /* n */\n        'of off on operator option optional order overloads overridable overrides ' + /* o */\n        'paramarray partial preserve private property protected public ' + /* p */\n        'raiseevent readonly redim removehandler resume return ' + /* r */\n        'select set shadows shared skip static step stop structure strict sub synclock ' + /* s */\n        'take text then throw to try unicode until using when where while widening with withevents writeonly yield' /* t-y */,\n      built_in:\n        // Operators https://docs.microsoft.com/dotnet/visual-basic/language-reference/operators\n        'addressof and andalso await directcast gettype getxmlnamespace is isfalse isnot istrue like mod nameof new not or orelse trycast typeof xor ' +\n        // Type Conversion Functions https://docs.microsoft.com/dotnet/visual-basic/language-reference/functions/type-conversion-functions\n        'cbool cbyte cchar cdate cdbl cdec cint clng cobj csbyte cshort csng cstr cuint culng cushort',\n      type:\n        // Data types https://docs.microsoft.com/dotnet/visual-basic/language-reference/data-types\n        'boolean byte char date decimal double integer long object sbyte short single string uinteger ulong ushort',\n      literal: 'true false nothing'\n    },\n    illegal:\n      '//|\\\\{|\\\\}|endif|gosub|variant|wend|^\\\\$ ' /* reserved deprecated keywords */,\n    contains: [\n      CHARACTER,\n      STRING,\n      DATE,\n      NUMBER,\n      LABEL,\n      DOC_COMMENT,\n      COMMENT,\n      DIRECTIVES\n    ]\n  };\n}\n\nmodule.exports = vbnet;\n"]},"metadata":{},"sourceType":"script"}